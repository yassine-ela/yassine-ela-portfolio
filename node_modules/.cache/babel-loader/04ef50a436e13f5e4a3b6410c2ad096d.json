{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"component\", \"color\", \"children\", \"disableDivider\", \"variant\", \"transition\", \"size\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useColorInversion, useThemeProps } from '../styles';\nimport styled from '../styles/styled';\nimport { getAccordionGroupUtilityClass } from './accordionGroupClasses';\nimport useSlot from '../utils/useSlot';\nimport ListProvider from '../List/ListProvider';\nimport { StyledList } from '../List/List';\nimport accordionDetailsClasses from '../AccordionDetails/accordionDetailsClasses';\nimport accordionClasses from '../Accordion/accordionClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color)), size && \"size\".concat(capitalize(size))]\n  };\n  return composeClasses(slots, getAccordionGroupUtilityClass, {});\n};\nconst AccordionGroupRoot = styled(StyledList, {\n  name: 'JoyAccordionGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(_ref => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  let transition = {};\n  if (ownerState.transition) {\n    if (typeof ownerState.transition === 'string') {\n      transition = {\n        '--AccordionDetails-transition': \"grid-template-rows \".concat(ownerState.transition, \", padding-block \").concat(ownerState.transition)\n      };\n    }\n    if (typeof ownerState.transition === 'object') {\n      transition = {\n        '--AccordionDetails-transition': \"grid-template-rows \".concat(ownerState.transition.initial, \", padding-block \").concat(ownerState.transition.initial),\n        [\"& .\".concat(accordionDetailsClasses.root, \".\").concat(accordionDetailsClasses.expanded)]: {\n          '--AccordionDetails-transition': \"grid-template-rows \".concat(ownerState.transition.expanded, \", padding-block \").concat(ownerState.transition.expanded)\n        }\n      };\n    }\n  }\n  return _extends({\n    '--List-padding': '0px',\n    '--ListDivider-gap': '0px'\n  }, transition, !ownerState.disableDivider && {\n    [\"& .\".concat(accordionClasses.root, \":not([data-last-child])\")]: {\n      '--Accordion-borderBottom': \"1px solid \".concat(theme.vars.palette.divider)\n    }\n  });\n});\n\n/**\r\n * ⚠️ AccordionGroup must be used as a direct child of the [Card](https://mui.com/joy-ui/react-card/) component.\r\n *\r\n * Demos:\r\n *\r\n * - [Accordion](https://mui.com/joy-ui/react-accordion/)\r\n *\r\n * API:\r\n *\r\n * - [AccordionGroup API](https://mui.com/joy-ui/api/accordion-group/)\r\n */\nconst AccordionGroup = /*#__PURE__*/React.forwardRef(function AccordionGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyAccordionGroup'\n  });\n  const {\n      component = 'div',\n      color: colorProp = 'neutral',\n      children,\n      disableDivider = false,\n      variant = 'plain',\n      transition = '0.2s ease',\n      size = 'md',\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const {\n    getColor\n  } = useColorInversion(variant);\n  const color = getColor(inProps.color, colorProp);\n  const ownerState = _extends({}, props, {\n    component,\n    color,\n    disableDivider,\n    variant,\n    transition,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref,\n    className: classes.root,\n    elementType: AccordionGroupRoot,\n    externalForwardedProps,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: /*#__PURE__*/_jsx(ListProvider, {\n      children: children\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? AccordionGroup.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * Used to render icon or text elements inside the AccordionGroup if `src` is not set.\r\n   * This can be an element, or just a string.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   * @default 'neutral'\r\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * If `true`, the divider between accordions will be hidden.\r\n   * @default false\r\n   */\n  disableDivider: PropTypes.bool,\n  /**\r\n   * The size of the component (affect other nested list* components).\r\n   * @default 'md'\r\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * The CSS transition for the Accordion details.\r\n   * @default '0.2s ease'\r\n   */\n  transition: PropTypes.oneOfType([PropTypes.shape({\n    expanded: PropTypes.string.isRequired,\n    initial: PropTypes.string.isRequired\n  }), PropTypes.string]),\n  /**\r\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\r\n   * @default 'plain'\r\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default AccordionGroup;","map":null,"metadata":{},"sourceType":"module"}