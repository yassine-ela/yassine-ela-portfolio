{"ast":null,"code":"import hyphenate from \"./hyphenate-style-name\";\nimport validateKeyframesObject from \"./validate-keyframes-object\";\nexport function atomicSelector(id, pseudo) {\n  let selector = \".\".concat(id);\n  if (pseudo) {\n    selector += pseudo;\n  }\n  return selector;\n}\nexport function keyframesToBlock(keyframes) {\n  if (process.env.NODE_ENV !== \"production\") {\n    validateKeyframesObject(keyframes);\n  }\n  if (process.env.NODE_ENV !== \"production\" && typeof Object.getPrototypeOf(keyframes) !== \"undefined\") {\n    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Only plain objects should be used as animation values. Unexpectedly recieved:\", keyframes);\n    }\n  }\n  let result = \"\";\n  for (const animationState in keyframes) {\n    result += \"\".concat(animationState, \"{\").concat(declarationsToBlock(keyframes[animationState]), \"}\");\n  }\n  return result;\n}\nexport function declarationsToBlock(style) {\n  let css = \"\";\n  for (const prop in style) {\n    const val = style[prop];\n    if (typeof val === \"string\" || typeof val === \"number\") {\n      css += \"\".concat(hyphenate(prop), \":\").concat(val, \";\");\n    }\n  } // trim trailing semicolon\n\n  return css.slice(0, -1);\n}\nexport function keyframesBlockToRule(id, block) {\n  return \"@keyframes \".concat(id, \"{\").concat(block, \"}\");\n}\nexport function fontFaceBlockToRule(id, block) {\n  return \"@font-face{font-family:\".concat(id, \";\").concat(block, \"}\");\n}\nexport function styleBlockToRule(selector, block) {\n  return \"\".concat(selector, \"{\").concat(block, \"}\");\n}","map":null,"metadata":{},"sourceType":"module"}