{"ast":null,"code":"'use client';\n\nimport _toConsumableArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _ClearIcon, _ArrowDropDownIcon;\nvar _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"clearOnBlur\", \"clearOnEscape\", \"defaultValue\", \"disableCloseOnSelect\", \"disabledItemsFocusable\", \"disableListWrap\", \"filterSelectedOptions\", \"handleHomeEndKeys\", \"includeInputInList\", \"openOnFocus\", \"selectOnFocus\"],\n  _excluded2 = [\"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"autoFocus\", \"clearIcon\", \"clearText\", \"closeText\", \"disableClearable\", \"disabled\", \"endDecorator\", \"error\", \"filterOptions\", \"forcePopupIcon\", \"freeSolo\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"id\", \"inputValue\", \"limitTags\", \"loading\", \"loadingText\", \"multiple\", \"name\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openText\", \"options\", \"placeholder\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderOption\", \"renderTags\", \"required\", \"type\", \"startDecorator\", \"size\", \"color\", \"variant\", \"value\", \"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"onDelete\"],\n  _excluded4 = [\"onBlur\", \"onFocus\", \"onMouseDown\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType, unstable_useForkRef as useForkRef, unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { useAutocomplete } from '@mui/base/useAutocomplete';\nimport { Popper } from '@mui/base/Popper';\nimport { useThemeProps } from '../styles';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport styled from '../styles/styled';\nimport { VariantColorProvider, getChildVariantAndColor } from '../styles/variantColorInheritance';\n// slot components\nimport { StyledIconButton } from '../IconButton/IconButton';\n// default render components\nimport Chip from '../Chip';\nimport ChipDelete from '../ChipDelete';\nimport { StyledInputRoot, StyledInputHtml, StyledInputStartDecorator, StyledInputEndDecorator } from '../Input/Input';\nimport List from '../List';\nimport ListProvider from '../List/ListProvider';\nimport ListSubheader from '../ListSubheader';\nimport ListItem from '../ListItem';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport { StyledAutocompleteListbox } from '../AutocompleteListbox/AutocompleteListbox';\nimport { StyledAutocompleteOption } from '../AutocompleteOption/AutocompleteOption';\nimport useSlot from '../utils/useSlot';\nimport ColorInversion, { useColorInversion } from '../styles/ColorInversion';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar defaultIsActiveElementInListbox = function defaultIsActiveElementInListbox(listboxRef) {\n  return listboxRef.current !== null && listboxRef.current.contains(document.activeElement);\n};\n// @ts-ignore\nvar defaultGetOptionLabel = function defaultGetOptionLabel(option) {\n  var _option$label;\n  return (_option$label = option.label) != null ? _option$label : option;\n};\nvar defaultLimitTagsText = function defaultLimitTagsText(more) {\n  return \"+\".concat(more);\n};\nvar defaultRenderGroup = function defaultRenderGroup(params) {\n  return /*#__PURE__*/_jsxs(ListItem, {\n    nested: true,\n    children: [/*#__PURE__*/_jsx(ListSubheader, {\n      sticky: true,\n      children: params.group\n    }), /*#__PURE__*/_jsx(List, {\n      children: params.children\n    })]\n  }, params.key);\n};\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var disabled = ownerState.disabled,\n    focused = ownerState.focused,\n    hasClearIcon = ownerState.hasClearIcon,\n    hasPopupIcon = ownerState.hasPopupIcon,\n    popupOpen = ownerState.popupOpen,\n    variant = ownerState.variant,\n    color = ownerState.color,\n    size = ownerState.size,\n    multiple = ownerState.multiple;\n  var slots = {\n    root: ['root', focused && 'focused', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon', variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color)), size && \"size\".concat(capitalize(size))],\n    wrapper: ['wrapper', multiple && 'multiple'],\n    input: ['input'],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen', disabled && 'disabled'],\n    listbox: ['listbox'],\n    option: ['option'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    limitTag: ['limitTag']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, {});\n};\nvar AutocompleteRoot = styled(StyledInputRoot, {\n  name: 'JoyAutocomplete',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref5) {\n  var ownerState = _ref5.ownerState;\n  return _extends({}, ownerState.size === 'sm' && {\n    '--Autocomplete-wrapperGap': '3px'\n  }, ownerState.size === 'md' && {\n    '--Autocomplete-wrapperGap': '3px'\n  }, ownerState.size === 'lg' && {\n    '--Autocomplete-wrapperGap': '4px'\n  }, {\n    /* Avoid double tap issue on iOS */\n    '@media (pointer: fine)': _defineProperty({}, \"&:hover .\".concat(autocompleteClasses.clearIndicator), {\n      visibility: 'visible'\n    })\n  }, ownerState.multiple && !ownerState.startDecorator && {\n    paddingInlineStart: 0\n  });\n});\n\n/**\n * Wrapper groups the chips (multi selection) and the input\n * so that start/end decorators can stay in the normal flow.\n */\nvar AutocompleteWrapper = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'Wrapper',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.wrapper;\n  }\n})(function (_ref6) {\n  var ownerState = _ref6.ownerState;\n  return _defineProperty({\n    flex: 1,\n    // stretch to fill the root slot\n    minWidth: 0,\n    // won't push end decorator out of the autocomplete\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    gap: 'var(--Autocomplete-wrapperGap)'\n  }, \"&.\".concat(autocompleteClasses.multiple), _extends({\n    paddingBlock: 'var(--Autocomplete-wrapperGap)'\n  }, !ownerState.startDecorator && {\n    paddingInlineStart: 'var(--Autocomplete-wrapperGap)'\n  }, !ownerState.endDecorator && {\n    paddingInlineEnd: 'var(--Autocomplete-wrapperGap)'\n  }));\n});\nvar AutocompleteInput = styled(StyledInputHtml, {\n  name: 'JoyAutocomplete',\n  slot: 'Input',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.input;\n  }\n})(function (_ref8) {\n  var ownerState = _ref8.ownerState;\n  return _extends({\n    minWidth: 30,\n    minHeight: 'var(--Chip-minHeight)'\n  }, ownerState.multiple && {\n    marginInlineStart: 'calc(var(--Autocomplete-wrapperGap) * 2.5)'\n  });\n});\nvar AutocompleteStartDecorator = styled(StyledInputStartDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'StartDecorator',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.startDecorator;\n  }\n})({});\nvar AutocompleteEndDecorator = styled(StyledInputEndDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'EndDecorator',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.endDecorator;\n  }\n})(function (_ref9) {\n  var ownerState = _ref9.ownerState;\n  return _extends({}, (ownerState.hasClearIcon || ownerState.hasPopupIcon) && {\n    '--Button-margin': '0px',\n    '--IconButton-margin': '0px',\n    '--Icon-margin': '0px'\n  });\n});\nvar AutocompleteClearIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.clearIndicator;\n  }\n})(function (_ref10) {\n  var ownerState = _ref10.ownerState;\n  return _extends({\n    alignSelf: 'center'\n  }, !ownerState.hasPopupIcon && {\n    marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)'\n  }, {\n    marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n    visibility: ownerState.focused ? 'visible' : 'hidden'\n  });\n});\nvar AutocompletePopupIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.popupIndicator;\n  }\n})(_defineProperty({\n  alignSelf: 'center',\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)'\n}, \"&.\".concat(autocompleteClasses.popupIndicatorOpen), {\n  transform: 'rotate(180deg)',\n  '--Icon-color': 'currentColor'\n}));\nvar AutocompleteListbox = styled(StyledAutocompleteListbox, {\n  name: 'JoyAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.listbox;\n  }\n})(function (_ref11) {\n  var theme = _ref11.theme;\n  return {\n    // `unstable_popup-zIndex` is a private variable that lets other component, e.g. Modal, to override the z-index so that the listbox can be displayed above the Modal.\n    zIndex: \"var(--unstable_popup-zIndex, \".concat(theme.vars.zIndex.popup, \")\")\n  };\n});\nvar AutocompleteOption = styled(StyledAutocompleteOption, {\n  name: 'JoyAutocomplete',\n  slot: 'Option',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.option;\n  }\n})({});\nvar AutocompleteLoading = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'Loading',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.loading;\n  }\n})(function (_ref12) {\n  var theme = _ref12.theme;\n  return {\n    color: (theme.vars || theme).palette.text.secondary\n  };\n});\nvar AutocompleteNoOptions = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.noOptions;\n  }\n})(function (_ref13) {\n  var theme = _ref13.theme;\n  return {\n    color: (theme.vars || theme).palette.text.secondary\n  };\n});\nvar AutocompleteLimitTag = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.noOptions;\n  }\n})({\n  marginInlineStart: 'calc(var(--Input-paddingInline) / 2)',\n  marginBlockStart: 'var(--_Input-paddingBlock)'\n});\nvar excludeUseAutocompleteParams = function excludeUseAutocompleteParams(_ref) {\n  var other = _objectWithoutPropertiesLoose(_ref, _excluded);\n  return other;\n};\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/joy-ui/react-autocomplete/)\n *\n * API:\n *\n * - [Autocomplete API](https://mui.com/joy-ui/api/autocomplete/)\n */\nvar Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _rootStateClasses;\n  var _ref2, _inProps$error, _ref3, _inProps$size, _inProps$color, _formControl$color, _ref4;\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyAutocomplete'\n  });\n  var ariaDescribedby = props['aria-describedby'],\n    ariaLabel = props['aria-label'],\n    ariaLabelledby = props['aria-labelledby'],\n    autoFocus = props.autoFocus,\n    _props$clearIcon = props.clearIcon,\n    clearIcon = _props$clearIcon === void 0 ? _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"md\"\n    })) : _props$clearIcon,\n    _props$clearText = props.clearText,\n    clearText = _props$clearText === void 0 ? 'Clear' : _props$clearText,\n    _props$closeText = props.closeText,\n    closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n    _props$disableClearab = props.disableClearable,\n    disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n    disabledProp = props.disabled,\n    endDecorator = props.endDecorator,\n    _props$error = props.error,\n    errorProp = _props$error === void 0 ? false : _props$error,\n    _props$forcePopupIcon = props.forcePopupIcon,\n    forcePopupIcon = _props$forcePopupIcon === void 0 ? 'auto' : _props$forcePopupIcon,\n    _props$freeSolo = props.freeSolo,\n    freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n    _props$getLimitTagsTe = props.getLimitTagsText,\n    getLimitTagsText = _props$getLimitTagsTe === void 0 ? defaultLimitTagsText : _props$getLimitTagsTe,\n    _props$getOptionLabel = props.getOptionLabel,\n    getOptionLabel = _props$getOptionLabel === void 0 ? defaultGetOptionLabel : _props$getOptionLabel,\n    groupBy = props.groupBy,\n    id = props.id,\n    _props$limitTags = props.limitTags,\n    limitTags = _props$limitTags === void 0 ? -1 : _props$limitTags,\n    _props$loading = props.loading,\n    loading = _props$loading === void 0 ? false : _props$loading,\n    _props$loadingText = props.loadingText,\n    loadingText = _props$loadingText === void 0 ? 'Loading…' : _props$loadingText,\n    _props$multiple = props.multiple,\n    multiple = _props$multiple === void 0 ? false : _props$multiple,\n    name = props.name,\n    _props$noOptionsText = props.noOptionsText,\n    noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText,\n    _props$openText = props.openText,\n    openText = _props$openText === void 0 ? 'Open' : _props$openText,\n    placeholder = props.placeholder,\n    _props$popupIcon = props.popupIcon,\n    popupIcon = _props$popupIcon === void 0 ? _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})) : _props$popupIcon,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    _props$renderGroup = props.renderGroup,\n    renderGroup = _props$renderGroup === void 0 ? defaultRenderGroup : _props$renderGroup,\n    renderOptionProp = props.renderOption,\n    renderTags = props.renderTags,\n    required = props.required,\n    type = props.type,\n    startDecorator = props.startDecorator,\n    _props$size = props.size,\n    sizeProp = _props$size === void 0 ? 'md' : _props$size,\n    _props$color = props.color,\n    colorProp = _props$color === void 0 ? 'neutral' : _props$color,\n    _props$variant = props.variant,\n    variant = _props$variant === void 0 ? 'outlined' : _props$variant,\n    component = props.component,\n    _props$slots2 = props.slots,\n    slots = _props$slots2 === void 0 ? {} : _props$slots2,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    otherProps = _objectWithoutPropertiesLoose(props, _excluded2);\n  var other = excludeUseAutocompleteParams(otherProps);\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var formControl = React.useContext(FormControlContext);\n  var error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;\n  var size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;\n  var rootColor = (_inProps$color = inProps.color) != null ? _inProps$color : error ? 'danger' : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp;\n  var color = getColor(inProps.color, rootColor);\n  var disabled = (_ref4 = disabledProp != null ? disabledProp : formControl == null ? void 0 : formControl.disabled) != null ? _ref4 : false;\n  var _useAutocomplete = useAutocomplete(_extends({}, props, {\n      id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,\n      componentName: 'Autocomplete',\n      unstable_classNamePrefix: 'Mui',\n      unstable_isActiveElementInListbox: defaultIsActiveElementInListbox\n    })),\n    getRootProps = _useAutocomplete.getRootProps,\n    getInputProps = _useAutocomplete.getInputProps,\n    getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,\n    getClearProps = _useAutocomplete.getClearProps,\n    getTagProps = _useAutocomplete.getTagProps,\n    getListboxProps = _useAutocomplete.getListboxProps,\n    getOptionProps = _useAutocomplete.getOptionProps,\n    value = _useAutocomplete.value,\n    dirty = _useAutocomplete.dirty,\n    popupOpen = _useAutocomplete.popupOpen,\n    focused = _useAutocomplete.focused,\n    focusedTag = _useAutocomplete.focusedTag,\n    anchorEl = _useAutocomplete.anchorEl,\n    setAnchorEl = _useAutocomplete.setAnchorEl,\n    inputValue = _useAutocomplete.inputValue,\n    groupedOptions = _useAutocomplete.groupedOptions;\n  var _getInputProps2 = getInputProps(),\n    handleInputMouseDown = _getInputProps2.onMouseDown;\n  var _getRootProps = getRootProps(),\n    handleRootOnClick = _getRootProps.onClick;\n  var hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  var hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  var ownerState = _extends({}, props, {\n    value: value,\n    disabled: disabled,\n    focused: focused,\n    getOptionLabel: getOptionLabel,\n    hasOptions: !!groupedOptions.length,\n    hasClearIcon: hasClearIcon,\n    hasPopupIcon: hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen: popupOpen,\n    size: size,\n    color: color,\n    variant: variant\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var selectedOptions;\n  if (multiple && value.length > 0) {\n    var getCustomizedTagProps = function getCustomizedTagProps(params) {\n      var _getTagProps = getTagProps(params),\n        onDelete = _getTagProps.onDelete,\n        tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded3);\n      return _extends({\n        disabled: disabled,\n        size: size,\n        onClick: onDelete\n      }, tagProps);\n    };\n    if (renderTags) {\n      selectedOptions = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      selectedOptions = value.map(function (option, index) {\n        return /*#__PURE__*/_jsx(Chip, {\n          size: size,\n          variant: \"soft\",\n          color: color === 'context' ? undefined : 'neutral',\n          endDecorator: /*#__PURE__*/_jsx(ChipDelete, _extends({}, getCustomizedTagProps({\n            index: index\n          }))),\n          children: getOptionLabel(option)\n        }, index);\n      });\n    }\n  }\n  var rootRef = useForkRef(ref, setAnchorEl);\n  var rootStateClasses = (_rootStateClasses = {}, _defineProperty(_rootStateClasses, autocompleteClasses.disabled, disabled), _defineProperty(_rootStateClasses, autocompleteClasses.error, error), _defineProperty(_rootStateClasses, autocompleteClasses.focused, focused), _defineProperty(_rootStateClasses, autocompleteClasses.formControl, Boolean(formControl)), _rootStateClasses);\n  var _useSlot = useSlot('root', {\n      ref: rootRef,\n      className: [classes.root, rootStateClasses],\n      elementType: AutocompleteRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      getSlotProps: getRootProps,\n      additionalProps: {\n        onClick: function onClick(event) {\n          if (handleRootOnClick) {\n            handleRootOnClick(event);\n          }\n          if (event.currentTarget === event.target && handleInputMouseDown) {\n            handleInputMouseDown(event);\n          }\n        }\n      }\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  var _useSlot3 = useSlot('wrapper', {\n      className: classes.wrapper,\n      elementType: AutocompleteWrapper,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot4 = _slicedToArray(_useSlot3, 2),\n    SlotWrapper = _useSlot4[0],\n    wrapperProps = _useSlot4[1];\n  var inputStateClasses = _defineProperty({}, autocompleteClasses.disabled, disabled);\n  var _useSlot5 = useSlot('input', {\n      className: [classes.input, inputStateClasses],\n      elementType: AutocompleteInput,\n      getSlotProps: function getSlotProps(handlers) {\n        var _getInputProps = getInputProps(),\n          _onBlur = _getInputProps.onBlur,\n          _onFocus = _getInputProps.onFocus,\n          _onMouseDown = _getInputProps.onMouseDown,\n          inputSlotProps = _objectWithoutPropertiesLoose(_getInputProps, _excluded4);\n        return _extends({}, inputSlotProps, {\n          onBlur: function onBlur(event) {\n            var _handlers$onBlur;\n            _onBlur == null || _onBlur(event);\n            (_handlers$onBlur = handlers.onBlur) == null || _handlers$onBlur.call(handlers, event);\n          },\n          onFocus: function onFocus(event) {\n            var _handlers$onFocus;\n            _onFocus == null || _onFocus(event);\n            (_handlers$onFocus = handlers.onFocus) == null || _handlers$onFocus.call(handlers, event);\n          },\n          onMouseDown: function onMouseDown(event) {\n            var _handlers$onMouseDown;\n            _onMouseDown == null || _onMouseDown(event);\n            (_handlers$onMouseDown = handlers.onMouseDown) == null || _handlers$onMouseDown.call(handlers, event);\n          }\n        });\n      },\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      additionalProps: {\n        autoFocus: autoFocus,\n        placeholder: placeholder,\n        name: name,\n        readOnly: readOnly,\n        disabled: disabled,\n        required: required != null ? required : formControl == null ? void 0 : formControl.required,\n        type: type,\n        'aria-invalid': error || undefined,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledby,\n        'aria-describedby': ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl['aria-describedby']\n      }\n    }),\n    _useSlot6 = _slicedToArray(_useSlot5, 2),\n    SlotInput = _useSlot6[0],\n    inputProps = _useSlot6[1];\n  var _useSlot7 = useSlot('startDecorator', {\n      className: classes.startDecorator,\n      elementType: AutocompleteStartDecorator,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot8 = _slicedToArray(_useSlot7, 2),\n    SlotStartDecorator = _useSlot8[0],\n    startDecoratorProps = _useSlot8[1];\n  var _useSlot9 = useSlot('endDecorator', {\n      className: classes.endDecorator,\n      elementType: AutocompleteEndDecorator,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot10 = _slicedToArray(_useSlot9, 2),\n    SlotEndDecorator = _useSlot10[0],\n    endDecoratorProps = _useSlot10[1];\n  var _useSlot11 = useSlot('clearIndicator', {\n      className: classes.clearIndicator,\n      elementType: AutocompleteClearIndicator,\n      getSlotProps: getClearProps,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      getSlotOwnerState: function getSlotOwnerState(mergedProps) {\n        return {\n          size: mergedProps.size || size,\n          variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n          color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n          disableColorInversion: !!inProps.color\n        };\n      },\n      additionalProps: {\n        'aria-label': clearText,\n        title: clearText\n      }\n    }),\n    _useSlot12 = _slicedToArray(_useSlot11, 2),\n    SlotClearIndicator = _useSlot12[0],\n    clearIndicatorProps = _useSlot12[1];\n  var _useSlot13 = useSlot('popupIndicator', {\n      className: classes.popupIndicator,\n      elementType: AutocompletePopupIndicator,\n      getSlotProps: getPopupIndicatorProps,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      getSlotOwnerState: function getSlotOwnerState(mergedProps) {\n        return {\n          size: mergedProps.size || size,\n          variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n          color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n          disableColorInversion: !!inProps.color\n        };\n      },\n      additionalProps: {\n        disabled: disabled,\n        'aria-label': popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        type: 'button'\n      }\n    }),\n    _useSlot14 = _slicedToArray(_useSlot13, 2),\n    SlotPopupIndicator = _useSlot14[0],\n    popupIndicatorProps = _useSlot14[1];\n  var _useSlot15 = useSlot('listbox', {\n      className: classes.listbox,\n      elementType: AutocompleteListbox,\n      getSlotProps: getListboxProps,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      getSlotOwnerState: function getSlotOwnerState(mergedProps) {\n        return {\n          size: mergedProps.size || size,\n          variant: mergedProps.variant || variant,\n          color: mergedProps.color || (!mergedProps.disablePortal ? rootColor : color),\n          disableColorInversion: !mergedProps.disablePortal\n        };\n      },\n      additionalProps: {\n        anchorEl: anchorEl,\n        open: popupOpen,\n        style: anchorEl ? {\n          width: anchorEl.clientWidth\n        } : {}\n      }\n    }),\n    _useSlot16 = _slicedToArray(_useSlot15, 2),\n    SlotListbox = _useSlot16[0],\n    listboxProps = _useSlot16[1];\n  var _useSlot17 = useSlot('loading', {\n      className: classes.loading,\n      elementType: AutocompleteLoading,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot18 = _slicedToArray(_useSlot17, 2),\n    SlotLoading = _useSlot18[0],\n    loadingProps = _useSlot18[1];\n  var _useSlot19 = useSlot('noOptions', {\n      className: classes.noOptions,\n      elementType: AutocompleteNoOptions,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      additionalProps: {\n        role: 'presentation',\n        onMouseDown: function onMouseDown(event) {\n          // Prevent input blur when interacting with the \"no options\" content\n          event.preventDefault();\n        }\n      }\n    }),\n    _useSlot20 = _slicedToArray(_useSlot19, 2),\n    SlotNoOptions = _useSlot20[0],\n    noOptionsProps = _useSlot20[1];\n  var _useSlot21 = useSlot('limitTag', {\n      className: classes.limitTag,\n      elementType: AutocompleteLimitTag,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot22 = _slicedToArray(_useSlot21, 2),\n    SlotLimitTag = _useSlot22[0],\n    limitTagProps = _useSlot22[1];\n  if (limitTags > -1 && Array.isArray(selectedOptions)) {\n    var more = selectedOptions.length - limitTags;\n    if (!focused && more > 0) {\n      selectedOptions = selectedOptions.splice(0, limitTags);\n      selectedOptions.push( /*#__PURE__*/_jsx(SlotLimitTag, _extends({}, limitTagProps, {\n        children: getLimitTagsText(more)\n      }), selectedOptions.length));\n    }\n  }\n  var _useSlot23 = useSlot('option', {\n      className: classes.option,\n      elementType: AutocompleteOption,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      getSlotOwnerState: function getSlotOwnerState(mergedProps) {\n        return {\n          variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n          color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n          disableColorInversion: !listboxProps.disablePortal\n        };\n      },\n      additionalProps: {\n        as: 'li'\n      }\n    }),\n    _useSlot24 = _slicedToArray(_useSlot23, 2),\n    SlotOption = _useSlot24[0],\n    baseOptionProps = _useSlot24[1];\n  var defaultRenderOption = function defaultRenderOption(optionProps, option) {\n    return /*#__PURE__*/_jsx(SlotOption, _extends({}, optionProps, {\n      children: getOptionLabel(option)\n    }));\n  };\n  var renderOption = renderOptionProp || defaultRenderOption;\n  var renderListOption = function renderListOption(option, index) {\n    var optionProps = getOptionProps({\n      option: option,\n      index: index\n    });\n    return renderOption(_extends({}, baseOptionProps, optionProps), option, {\n      // `aria-selected` prop will always by boolean, see useAutocomplete hook.\n      selected: !!optionProps['aria-selected'],\n      inputValue: inputValue,\n      ownerState: ownerState\n    });\n  };\n\n  // Wait for `listboxProps` because `slotProps.listbox` could be a function.\n  var modifiers = React.useMemo(function () {\n    return [{\n      name: 'offset',\n      options: {\n        offset: [0, 4]\n      }\n    }].concat(_toConsumableArray(listboxProps.modifiers || []));\n  }, [listboxProps.modifiers]);\n  var popup = null;\n  if (anchorEl) {\n    var _listboxProps$ownerSt, _props$slots;\n    popup = /*#__PURE__*/_jsx(VariantColorProvider, {\n      variant: variant,\n      color: rootColor,\n      children: /*#__PURE__*/_jsx(ListProvider, {\n        nested: true,\n        children: /*#__PURE__*/_jsxs(SlotListbox, _extends({}, listboxProps, {\n          className: clsx(listboxProps.className, ((_listboxProps$ownerSt = listboxProps.ownerState) == null ? void 0 : _listboxProps$ownerSt.color) === 'context' && autocompleteClasses.colorContext)\n          // @ts-ignore internal logic (too complex to typed PopperOwnProps to SlotListbox but this should be removed when we have `usePopper`)\n          ,\n\n          modifiers: modifiers\n        }, !((_props$slots = props.slots) != null && _props$slots.listbox) && {\n          as: Popper,\n          slots: {\n            root: listboxProps.as || 'ul'\n          }\n        }, {\n          children: [groupedOptions.map(function (option, index) {\n            if (groupBy) {\n              var typedOption = option;\n              return renderGroup({\n                key: String(typedOption.key),\n                group: typedOption.group,\n                children: typedOption.options.map(function (option2, index2) {\n                  return renderListOption(option2, typedOption.index + index2);\n                })\n              });\n            }\n            return renderListOption(option, index);\n          }), loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(SlotLoading, _extends({}, loadingProps, {\n            children: loadingText\n          })) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(SlotNoOptions, _extends({}, noOptionsProps, {\n            children: noOptionsText\n          })) : null]\n        }))\n      })\n    });\n    if (!listboxProps.disablePortal) {\n      // For portal popup, the children should not inherit color inversion from the upper parent.\n      popup = /*#__PURE__*/_jsx(ColorInversion.Provider, {\n        value: undefined,\n        children: popup\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n      children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {\n        children: startDecorator\n      })), /*#__PURE__*/_jsxs(SlotWrapper, _extends({}, wrapperProps, {\n        children: [selectedOptions, /*#__PURE__*/_jsx(SlotInput, _extends({}, inputProps))]\n      })), endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {\n        children: endDecorator\n      })), hasClearIcon ? /*#__PURE__*/_jsx(SlotClearIndicator, _extends({}, clearIndicatorProps, {\n        children: clearIcon\n      })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(SlotPopupIndicator, _extends({}, popupIndicatorProps, {\n        children: popupIcon\n      })) : null]\n    })), popup]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Identifies the element (or elements) that describes the object.\n   * @see aria-labelledby\n   */\n  'aria-describedby': PropTypes.string,\n  /**\n   * Defines a string value that labels the current element.\n   * @see aria-labelledby.\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * Identifies the element (or elements) that labels the current element.\n   * @see aria-describedby.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"md\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, function (props) {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', \"However, \".concat(props.defaultValue, \" was provided.\")].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endDecorator: PropTypes.node,\n  /**\n   * If `true`, the `input` will indicate an error.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {string | number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more: string | number) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The input placeholder\n   */\n  placeholder: PropTypes.string,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    endDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    limitTag: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    loading: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    noOptions: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    option: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    wrapper: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    clearIndicator: PropTypes.elementType,\n    endDecorator: PropTypes.elementType,\n    input: PropTypes.elementType,\n    limitTag: PropTypes.elementType,\n    listbox: PropTypes.elementType,\n    loading: PropTypes.elementType,\n    noOptions: PropTypes.elementType,\n    option: PropTypes.elementType,\n    popupIndicator: PropTypes.elementType,\n    root: PropTypes.elementType,\n    startDecorator: PropTypes.elementType,\n    wrapper: PropTypes.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startDecorator: PropTypes.node,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, function (props) {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', \"However, \".concat(props.value, \" was provided.\")].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])\n} : void 0;\nexport default Autocomplete;","map":null,"metadata":{},"sourceType":"module"}