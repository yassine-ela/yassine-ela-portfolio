{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"container\", \"disableAutoFocus\", \"disableEnforceFocus\", \"disableEscapeKeyDown\", \"disablePortal\", \"disableRestoreFocus\", \"disableScrollLock\", \"hideBackdrop\", \"keepMounted\", \"onClose\", \"onKeyDown\", \"open\", \"component\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, HTMLElementType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { Portal } from '@mui/base/Portal';\nimport { FocusTrap } from '@mui/base/FocusTrap';\nimport { unstable_useModal as useModal } from '@mui/base/unstable_useModal';\nimport { styled, useThemeProps } from '../styles';\nimport useSlot from '../utils/useSlot';\nimport { getModalUtilityClass } from './modalClasses';\nimport CloseModalContext from './CloseModalContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    open\n  } = ownerState;\n  const slots = {\n    root: ['root', !open && 'hidden'],\n    backdrop: ['backdrop']\n  };\n  return composeClasses(slots, getModalUtilityClass, {});\n};\nexport const StyledModalRoot = styled('div')(({\n  ownerState,\n  theme\n}) => _extends({\n  '--unstable_popup-zIndex': `calc(${theme.vars.zIndex.modal} + 1)`,\n  '& ~ [role=\"listbox\"]': {\n    // target all the listbox (Autocomplete, Menu, Select, etc.) that uses portal\n    '--unstable_popup-zIndex': `calc(${theme.vars.zIndex.modal} + 1)`\n  },\n  position: 'fixed',\n  zIndex: theme.vars.zIndex.modal,\n  right: 0,\n  bottom: 0,\n  top: 0,\n  left: 0\n}, !ownerState.open && {\n  visibility: 'hidden'\n}));\nconst ModalRoot = styled(StyledModalRoot, {\n  name: 'JoyModal',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nexport const StyledModalBackdrop = styled('div')(({\n  theme\n}) => ({\n  zIndex: -1,\n  position: 'fixed',\n  right: 0,\n  bottom: 0,\n  top: 0,\n  left: 0,\n  backgroundColor: theme.vars.palette.background.backdrop,\n  WebkitTapHighlightColor: 'transparent',\n  backdropFilter: 'blur(8px)'\n}));\nexport const ModalBackdrop = styled(StyledModalBackdrop, {\n  name: 'JoyModal',\n  slot: 'Backdrop',\n  overridesResolver: (props, styles) => styles.backdrop\n})({});\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Modal](https://mui.com/joy-ui/react-modal/)\r\n *\r\n * API:\r\n *\r\n * - [Modal API](https://mui.com/joy-ui/api/modal/)\r\n */\nconst Modal = /*#__PURE__*/React.forwardRef(function Modal(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyModal'\n  });\n  const {\n      children,\n      container,\n      disableAutoFocus = false,\n      disableEnforceFocus = false,\n      disableEscapeKeyDown = false,\n      disablePortal = false,\n      disableRestoreFocus = false,\n      disableScrollLock = false,\n      hideBackdrop = false,\n      keepMounted = false,\n      onClose,\n      open,\n      component,\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disableAutoFocus,\n    disableEnforceFocus,\n    disableEscapeKeyDown,\n    disablePortal,\n    disableRestoreFocus,\n    disableScrollLock,\n    hideBackdrop,\n    keepMounted\n  });\n  const {\n    getRootProps,\n    getBackdropProps,\n    rootRef,\n    portalRef,\n    isTopModal\n  } = useModal(_extends({}, ownerState, {\n    rootRef: ref\n  }));\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref: rootRef,\n    className: classes.root,\n    elementType: ModalRoot,\n    externalForwardedProps,\n    getSlotProps: getRootProps,\n    ownerState\n  });\n  const [SlotBackdrop, backdropProps] = useSlot('backdrop', {\n    className: classes.backdrop,\n    elementType: ModalBackdrop,\n    externalForwardedProps,\n    getSlotProps: getBackdropProps,\n    ownerState\n  });\n  if (!keepMounted && !open) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(CloseModalContext.Provider, {\n    value: onClose,\n    children: /*#__PURE__*/_jsx(Portal, {\n      ref: portalRef,\n      container: container,\n      disablePortal: disablePortal,\n      children: /*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n        children: [!hideBackdrop ? /*#__PURE__*/_jsx(SlotBackdrop, _extends({}, backdropProps)) : null, /*#__PURE__*/_jsx(FocusTrap, {\n          disableEnforceFocus: disableEnforceFocus,\n          disableAutoFocus: disableAutoFocus,\n          disableRestoreFocus: disableRestoreFocus,\n          isEnabled: isTopModal,\n          open: open,\n          children: React.Children.only(children) && /*#__PURE__*/React.cloneElement(children, _extends({}, children.props.tabIndex === undefined && {\n            tabIndex: -1\n          }))\n        })]\n      }))\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Modal.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * A single child content element.\r\n   */\n  children: elementAcceptingRef.isRequired,\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * An HTML element or function that returns one.\r\n   * The `container` will have the portal children appended to it.\r\n   *\r\n   * By default, it uses the body of the top-level document object,\r\n   * so it's simply `document.body` most of the time.\r\n   */\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\n  /**\r\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\r\n   * replace it to the last focused element when it closes.\r\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\r\n   *\r\n   * Generally this should never be set to `true` as it makes the modal less\r\n   * accessible to assistive technologies, like screen readers.\r\n   * @default false\r\n   */\n  disableAutoFocus: PropTypes.bool,\n  /**\r\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\r\n   *\r\n   * Generally this should never be set to `true` as it makes the modal less\r\n   * accessible to assistive technologies, like screen readers.\r\n   * @default false\r\n   */\n  disableEnforceFocus: PropTypes.bool,\n  /**\r\n   * If `true`, hitting escape will not fire the `onClose` callback.\r\n   * @default false\r\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n  /**\r\n   * The `children` will be under the DOM hierarchy of the parent component.\r\n   * @default false\r\n   */\n  disablePortal: PropTypes.bool,\n  /**\r\n   * If `true`, the modal will not restore focus to previously focused element once\r\n   * modal is hidden or unmounted.\r\n   * @default false\r\n   */\n  disableRestoreFocus: PropTypes.bool,\n  /**\r\n   * Disable the scroll lock behavior.\r\n   * @default false\r\n   */\n  disableScrollLock: PropTypes.bool,\n  /**\r\n   * If `true`, the backdrop is not rendered.\r\n   * @default false\r\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\r\n   * Always keep the children in the DOM.\r\n   * This prop can be useful in SEO situation or\r\n   * when you want to maximize the responsiveness of the Modal.\r\n   * @default false\r\n   */\n  keepMounted: PropTypes.bool,\n  /**\r\n   * Callback fired when the component requests to be closed.\r\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"closeClick\"`.\r\n   */\n  onClose: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onKeyDown: PropTypes.func,\n  /**\r\n   * If `true`, the component is shown.\r\n   */\n  open: PropTypes.bool.isRequired,\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    backdrop: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}