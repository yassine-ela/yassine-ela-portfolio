{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport withWidth, { isWidthDown, isWidthUp } from './withWidth';\nimport useTheme from '../styles/useTheme';\n\n/**\r\n * @ignore - internal component.\r\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction HiddenJs(props) {\n  const {\n    children,\n    only,\n    width\n  } = props;\n  const theme = useTheme();\n  let visible = true;\n\n  // `only` check is faster to get out sooner if used.\n  if (only) {\n    if (Array.isArray(only)) {\n      for (let i = 0; i < only.length; i += 1) {\n        const breakpoint = only[i];\n        if (width === breakpoint) {\n          visible = false;\n          break;\n        }\n      }\n    } else if (only && width === only) {\n      visible = false;\n    }\n  }\n\n  // Allow `only` to be combined with other props. If already hidden, no need to check others.\n  if (visible) {\n    // determine visibility based on the smallest size up\n    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {\n      const breakpoint = theme.breakpoints.keys[i];\n      const breakpointUp = props[\"\".concat(breakpoint, \"Up\")];\n      const breakpointDown = props[\"\".concat(breakpoint, \"Down\")];\n      if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {\n        visible = false;\n        break;\n      }\n    }\n  }\n  if (!visible) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? HiddenJs.propTypes = {\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  lgDown: PropTypes.bool,\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  lgUp: PropTypes.bool,\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  mdDown: PropTypes.bool,\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  mdUp: PropTypes.bool,\n  /**\r\n   * Hide the given breakpoint(s).\r\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  smDown: PropTypes.bool,\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  smUp: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   * width prop provided by withWidth decorator.\r\n   */\n  width: PropTypes.string.isRequired,\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  xlDown: PropTypes.bool,\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  xlUp: PropTypes.bool,\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  xsDown: PropTypes.bool,\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  xsUp: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? HiddenJs.propTypes = exactProp(HiddenJs.propTypes) : void 0;\n}\nexport default withWidth()(HiddenJs);","map":null,"metadata":{},"sourceType":"module"}