{"ast":null,"code":"import _defineProperty from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport hyphenate from \"./hyphenate-style-name\";\nimport { validateNoMixedHand } from \"./validate-no-mixed-hand\";\nimport { prefix } from \"inline-style-prefixer\";\nimport { MultiCache } from \"./cache\";\nexport default function injectStylePrefixed(styleCache, styles, media, pseudo) {\n  var cache = styleCache.getCache(media);\n  var classString = \"\";\n  for (var originalKey in styles) {\n    var originalVal = styles[originalKey];\n    if (originalVal === void 0 || originalVal === null) {\n      continue;\n    }\n    if (typeof originalVal !== \"object\") {\n      // Non-null and non-undefined primitive value\n      if (process.env.NODE_ENV !== \"production\") {\n        validateValueType(originalVal, originalKey);\n      }\n      var propValPair = \"\".concat(hyphenate(originalKey), \":\").concat(originalVal);\n      var key = \"\".concat(pseudo).concat(propValPair);\n      var cachedId = cache.cache[key];\n      if (cachedId !== void 0) {\n        // cache hit\n        classString += \" \" + cachedId;\n        continue;\n      } else {\n        // cache miss\n        var block = \"\";\n        var prefixed = prefix(_defineProperty({}, originalKey, originalVal));\n        for (var prefixedKey in prefixed) {\n          var prefixedVal = prefixed[prefixedKey];\n          var prefixedValType = typeof prefixedVal;\n          if (prefixedValType === \"string\" || prefixedValType === \"number\") {\n            var prefixedPair = \"\".concat(hyphenate(prefixedKey), \":\").concat(prefixedVal);\n            if (prefixedPair !== propValPair) {\n              block += \"\".concat(prefixedPair, \";\");\n            }\n          } else if (Array.isArray(prefixedVal)) {\n            var hyphenated = hyphenate(prefixedKey);\n            for (var i = 0; i < prefixedVal.length; i++) {\n              var _prefixedPair = \"\".concat(hyphenated, \":\").concat(prefixedVal[i]);\n              if (_prefixedPair !== propValPair) {\n                block += \"\".concat(_prefixedPair, \";\");\n              }\n            }\n          }\n        }\n        block += propValPair; // ensure original prop/val is last (for hydration)\n\n        var id = cache.addValue(key, {\n          pseudo: pseudo,\n          block: block\n        });\n        classString += \" \" + id;\n      }\n    } else {\n      // Non-null object value\n      if (originalKey[0] === \":\") {\n        classString += \" \" + injectStylePrefixed(styleCache, originalVal, media, pseudo + originalKey);\n      } else if (originalKey.substring(0, 6) === \"@media\") {\n        classString += \" \" + injectStylePrefixed(styleCache, originalVal, originalKey.substr(7), pseudo);\n      }\n    }\n  }\n  if (process.env.NODE_ENV !== \"production\") {\n    var conflicts = validateNoMixedHand(styles);\n    if (conflicts.length) {\n      conflicts.forEach(function (_ref) {\n        var shorthand = _ref.shorthand,\n          longhand = _ref.longhand;\n        var short = JSON.stringify(_defineProperty({}, shorthand.property, shorthand.value));\n        var long = JSON.stringify(_defineProperty({}, longhand.property, longhand.value)); // eslint-disable-next-line no-console\n\n        console.warn(\"Styles `\".concat(short, \"` and `\").concat(long, \"` in object yielding class \\\"\").concat(classString.slice(1), \"\\\" may result in unexpected behavior. Mixing shorthand and longhand properties within the same style object is unsupported with atomic rendering.\"));\n      });\n    }\n  } // remove leading space\n\n  return classString.slice(1);\n}\nfunction validateValueType(value, key) {\n  if (value === null || Array.isArray(value) || typeof value !== \"number\" && typeof value !== \"string\") {\n    throw new Error(\"Unsupported style value: \".concat(JSON.stringify(value), \" used in property \").concat(JSON.stringify(key)));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}