{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"color\", \"component\", \"size\", \"variant\", \"children\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useThemeProps } from '../styles';\nimport styled from '../styles/styled';\nimport { getAvatarGroupUtilityClass } from './avatarGroupClasses';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AvatarGroupContext = /*#__PURE__*/React.createContext(undefined);\nvar useUtilityClasses = function useUtilityClasses() {\n  var slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getAvatarGroupUtilityClass, {});\n};\nvar AvatarGroupGroupRoot = styled('div', {\n  name: 'JoyAvatarGroup',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref) {\n  var ownerState = _ref.ownerState,\n    theme = _ref.theme;\n  return _extends({}, ownerState.size === 'sm' && {\n    '--AvatarGroup-gap': '-0.375rem',\n    '--Avatar-ringSize': '2px'\n  }, ownerState.size === 'md' && {\n    '--AvatarGroup-gap': '-0.5rem',\n    '--Avatar-ringSize': '2px'\n  }, ownerState.size === 'lg' && {\n    '--AvatarGroup-gap': '-0.625rem',\n    '--Avatar-ringSize': '4px'\n  }, {\n    '--Avatar-ring': \"0 0 0 var(--Avatar-ringSize) var(--Avatar-ringColor, \".concat(theme.vars.palette.background.surface, \")\"),\n    '--Avatar-marginInlineStart': 'var(--AvatarGroup-gap)',\n    display: 'flex',\n    marginInlineStart: 'calc(-1 * var(--AvatarGroup-gap))'\n  });\n});\n\n/**\n *\n * Demos:\n *\n * - [Avatar](https://mui.com/joy-ui/react-avatar/)\n *\n * API:\n *\n * - [AvatarGroup API](https://mui.com/joy-ui/api/avatar-group/)\n */\nvar AvatarGroup = /*#__PURE__*/React.forwardRef(function AvatarGroup(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyAvatarGroup'\n  });\n  var className = props.className,\n    color = props.color,\n    _props$component = props.component,\n    component = _props$component === void 0 ? 'div' : _props$component,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 'md' : _props$size,\n    variant = props.variant,\n    children = props.children,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var ownerState = React.useMemo(function () {\n    return _extends({}, props, {\n      color: color,\n      component: component,\n      size: size,\n      variant: variant\n    });\n  }, [color, component, props, size, variant]);\n  var classes = useUtilityClasses();\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      className: clsx(classes.root, className),\n      elementType: AvatarGroupGroupRoot,\n      externalForwardedProps: _extends({}, other, {\n        component: component,\n        slots: slots,\n        slotProps: slotProps\n      }),\n      ownerState: ownerState\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  return /*#__PURE__*/_jsx(AvatarGroupContext.Provider, {\n    value: ownerState,\n    children: /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? AvatarGroup.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Used to render icon or text elements inside the AvatarGroup if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The size of the component.\n   * It accepts theme values between 'sm' and 'lg'.\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['lg', 'md', 'sm']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'soft'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default AvatarGroup;","map":null,"metadata":{},"sourceType":"module"}