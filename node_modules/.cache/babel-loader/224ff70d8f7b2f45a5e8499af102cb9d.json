{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"component\", \"children\", \"variant\", \"color\", \"level\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useThemeProps } from '../styles';\nimport styled from '../styles/styled';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport cardOverflowClasses from '../CardOverflow/cardOverflowClasses';\nimport useSlot from '../utils/useSlot';\nimport ModalDialogVariantColorContext from '../ModalDialog/ModalDialogVariantColorContext';\nimport ModalDialogSizeContext from '../ModalDialog/ModalDialogSizeContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var level = ownerState.level,\n    color = ownerState.color,\n    variant = ownerState.variant;\n  var slots = {\n    root: ['root', level, color && \"color\".concat(capitalize(color)), variant && \"variant\".concat(capitalize(variant))]\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, {});\n};\nvar DialogTitleRoot = styled('h2', {\n  name: 'JoyDialogTitle',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref) {\n  var theme = _ref.theme,\n    ownerState = _ref.ownerState;\n  var _theme$typography, _theme$variants$owner;\n  var lineHeight = ownerState.level !== 'inherit' ? (_theme$typography = theme.typography[ownerState.level]) == null ? void 0 : _theme$typography.lineHeight : '1';\n  return _extends({\n    '--Icon-fontSize': \"calc(1em * \".concat(lineHeight, \")\")\n  }, ownerState.color && {\n    '--Icon-color': 'currentColor'\n  }, {\n    display: 'flex',\n    gap: 'clamp(4px, 0.375em, 0.75rem)',\n    margin: 'var(--unstable_DialogTitle-margin, 0px)'\n  }, ownerState.level && ownerState.level !== 'inherit' && theme.typography[ownerState.level], {\n    color: 'inherit'\n  }, ownerState.variant && _extends({\n    borderRadius: theme.vars.radius.xs,\n    paddingBlock: 'min(0.1em, 4px)',\n    paddingInline: '0.25em'\n  }, (_theme$variants$owner = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants$owner[ownerState.color]), _defineProperty({}, \".\".concat(cardOverflowClasses.root, \" > &\"), {\n    '--unstable_DialogTitle-margin': 'var(--Card-padding) 0'\n  }));\n});\nvar sizeToLevel = {\n  sm: 'title-md',\n  md: 'title-lg',\n  lg: 'h4'\n};\n\n/**\n * ⚠️ DialogTitle must be used as a direct child of the [Card](https://mui.com/joy-ui/react-card/) component.\n *\n * Demos:\n *\n * - [Modal](https://mui.com/joy-ui/react-modal/)\n *\n * API:\n *\n * - [DialogTitle API](https://mui.com/joy-ui/api/dialog-title/)\n */\nvar DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyDialogTitle'\n  });\n  var size = React.useContext(ModalDialogSizeContext);\n  var context = React.useContext(ModalDialogVariantColorContext);\n  var _props$component = props.component,\n    component = _props$component === void 0 ? 'h2' : _props$component,\n    children = props.children,\n    variant = props.variant,\n    colorProp = props.color,\n    _props$level = props.level,\n    level = _props$level === void 0 ? sizeToLevel[size || 'md'] : _props$level,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, variant ? colorProp != null ? colorProp : 'neutral' : colorProp);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var ownerState = _extends({}, props, {\n    component: component,\n    color: color,\n    variant: variant,\n    level: level\n  });\n  var classes = useUtilityClasses(ownerState);\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      className: classes.root,\n      elementType: DialogTitleRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      additionalProps: {\n        id: context == null ? void 0 : context.labelledBy\n      }\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Used to render icon or text elements inside the DialogTitle if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Applies the theme typography styles.\n   * @default { sm: 'title-md', md: 'title-lg', lg: 'h4' }\n   */\n  level: PropTypes.oneOf(['body-lg', 'body-md', 'body-sm', 'body-xs', 'h1', 'h2', 'h3', 'h4', 'inherit', 'title-lg', 'title-md', 'title-sm']),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   */\n  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])\n} : void 0;\nexport default DialogTitle;","map":null,"metadata":{},"sourceType":"module"}