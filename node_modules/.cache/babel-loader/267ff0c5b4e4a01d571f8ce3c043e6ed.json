{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"children\", \"disabled\", \"component\", \"selected\", \"color\", \"orientation\", \"variant\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { useMenuItem } from '@mui/base/useMenuItem';\nimport { StyledListItemButton } from '../ListItemButton/ListItemButton';\nimport { styled, useThemeProps } from '../styles';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport { useVariantColor } from '../styles/variantColorInheritance';\nimport { getMenuItemUtilityClass } from './menuItemClasses';\nimport RowListContext from '../List/RowListContext';\nimport ListItemButtonOrientationContext from '../ListItemButton/ListItemButtonOrientationContext';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var focusVisible = ownerState.focusVisible,\n    disabled = ownerState.disabled,\n    selected = ownerState.selected,\n    color = ownerState.color,\n    variant = ownerState.variant;\n  var slots = {\n    root: ['root', focusVisible && 'focusVisible', disabled && 'disabled', selected && 'selected', color && \"color\".concat(capitalize(color)), variant && \"variant\".concat(capitalize(variant))]\n  };\n  var composedClasses = composeClasses(slots, getMenuItemUtilityClass, {});\n  return composedClasses;\n};\nvar MenuItemRoot = styled(StyledListItemButton, {\n  name: 'JoyMenuItem',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({});\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/joy-ui/react-menu/)\n *\n * API:\n *\n * - [MenuItem API](https://mui.com/joy-ui/api/menu-item/)\n * - inherits [ListItemButton API](https://mui.com/joy-ui/api/list-item-button/)\n */\nvar MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyMenuItem'\n  });\n  var row = React.useContext(RowListContext);\n  var children = props.children,\n    _props$disabled = props.disabled,\n    disabledProp = _props$disabled === void 0 ? false : _props$disabled,\n    _props$component = props.component,\n    component = _props$component === void 0 ? 'li' : _props$component,\n    _props$selected = props.selected,\n    selected = _props$selected === void 0 ? false : _props$selected,\n    _props$color = props.color,\n    colorProp = _props$color === void 0 ? 'neutral' : _props$color,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n    _props$variant = props.variant,\n    variantProp = _props$variant === void 0 ? 'plain' : _props$variant,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useVariantColor = useVariantColor(inProps.variant, inProps.color),\n    _useVariantColor$vari = _useVariantColor.variant,\n    variant = _useVariantColor$vari === void 0 ? variantProp : _useVariantColor$vari,\n    _useVariantColor$colo = _useVariantColor.color,\n    inheritedColor = _useVariantColor$colo === void 0 ? colorProp : _useVariantColor$colo;\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, inheritedColor);\n  var _useMenuItem = useMenuItem({\n      disabled: disabledProp,\n      rootRef: ref\n    }),\n    getRootProps = _useMenuItem.getRootProps,\n    disabled = _useMenuItem.disabled,\n    focusVisible = _useMenuItem.focusVisible;\n  var ownerState = _extends({}, props, {\n    component: component,\n    color: color,\n    disabled: disabled,\n    focusVisible: focusVisible,\n    orientation: orientation,\n    selected: selected,\n    row: row,\n    variant: variant\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      elementType: MenuItemRoot,\n      getSlotProps: getRootProps,\n      externalForwardedProps: externalForwardedProps,\n      className: classes.root,\n      ownerState: ownerState\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  return /*#__PURE__*/_jsx(ListItemButtonOrientationContext.Provider, {\n    value: orientation,\n    children: /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * @ignore\n   */\n  component: PropTypes.elementType,\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The content direction flow.\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * If `true`, the component is selected.\n   * @default false\n   */\n  selected: PropTypes.bool,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'plain'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['contained', 'light', 'outlined', 'text']), PropTypes.string])\n} : void 0;\nexport default MenuItem;","map":null,"metadata":{},"sourceType":"module"}