{"ast":null,"code":"'use client';\n\nimport _taggedTemplateLiteral from \"C:\\\\yassine-ela-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"children\", \"animation\", \"overlay\", \"loading\", \"variant\", \"level\", \"height\", \"width\", \"sx\", \"slots\", \"slotProps\"];\nlet _ = t => t,\n  _t,\n  _t2,\n  _t3,\n  _t4,\n  _t5;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { keyframes, css } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useThemeProps } from '../styles';\nimport styled from '../styles/styled';\nimport { getSkeletonUtilityClass } from './skeletonClasses';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    level\n  } = ownerState;\n  const slots = {\n    root: ['root', variant && \"variant\".concat(capitalize(variant)), level && \"level\".concat(capitalize(level))]\n  };\n  return composeClasses(slots, getSkeletonUtilityClass, {});\n};\n\n// Add solid background for masking the component that has the same background.\n// Otherwise, the pulse animation will not work properly.\nconst pulseKeyframe = keyframes(_t || (_t = _(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  0% {\\n    opacity: 1;\\n  }\\n\\n  50% {\\n    opacity: 0.8;\\n    background: var(--unstable_pulse-bg);\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n\"])))));\nconst waveKeyframe = keyframes(_t2 || (_t2 = _(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  0% {\\n    transform: translateX(-100%);\\n  }\\n\\n  50% {\\n    /* +0.5s of delay between each loop */\\n    transform: translateX(100%);\\n  }\\n\\n  100% {\\n    transform: translateX(100%);\\n  }\\n\"])))));\nconst SkeletonRoot = styled('span', {\n  name: 'JoySkeleton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(\n/**\r\n * Animations\r\n */\n_ref => {\n  let {\n    ownerState,\n    theme\n  } = _ref;\n  return ownerState.animation === 'pulse' && ownerState.variant !== 'inline' && css(_t3 || (_t3 = _(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n      &::before {\\n        animation: \", \" 2s ease-in-out 0.5s infinite;\\n        background: \", \";\\n      }\\n    \"])), 0, 0)), pulseKeyframe, theme.vars.palette.background.level3);\n}, _ref2 => {\n  let {\n    ownerState,\n    theme\n  } = _ref2;\n  return ownerState.animation === 'pulse' && ownerState.variant === 'inline' && css(_t4 || (_t4 = _(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n      &::after {\\n        animation: \", \" 2s ease-in-out 0.5s infinite;\\n        background: \", \";\\n      }\\n    \"])), 0, 0)), pulseKeyframe, theme.vars.palette.background.level3);\n}, _ref3 => {\n  let {\n    ownerState,\n    theme\n  } = _ref3;\n  return ownerState.animation === 'wave' && css(_t5 || (_t5 = _(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */\\n      -webkit-mask-image: -webkit-radial-gradient(white, black);\\n      background: \", \";\\n\\n      &::after {\\n        content: ' ';\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        right: 0;\\n        bottom: 0;\\n        z-index: var(--unstable_pseudo-zIndex);\\n        animation: \", \" 1.6s linear 0.5s infinite;\\n        background: linear-gradient(\\n          90deg,\\n          transparent,\\n          var(--unstable_wave-bg, rgba(0 0 0 / 0.08)),\\n          transparent\\n        );\\n        transform: translateX(-100%); /* Avoid flash during server-side hydration */\\n      }\\n    \"])), 0, 0)), theme.vars.palette.background.level3, waveKeyframe);\n},\n/**\r\n * Implementation notes:\r\n * 1. The `Skeleton` has 3 parts:\r\n *  - the root (span) element as a container\r\n *  - the ::before pseudo-element for covering the content\r\n *  - the ::after pseudo-element for animation on top of the ::before pseudo-element\r\n *\r\n * 2. The root element and ::before will change to absolute position when shape=\"overlay\" to cover the parent's content.\r\n *\r\n * 3. For geometry shape (rectangular, circular), the typography styles are applied to the root element so that width, height can be customized based on the font-size.\r\n */\n_ref4 => {\n  let {\n    ownerState,\n    theme\n  } = _ref4;\n  var _components, _theme$typography, _theme$typography2, _theme$typography3;\n  const defaultLevel = ((_components = theme.components) == null || (_components = _components.JoyTypography) == null || (_components = _components.defaultProps) == null ? void 0 : _components.level) || 'body1';\n  return [{\n    display: 'block',\n    position: 'relative',\n    '--unstable_pseudo-zIndex': 9,\n    '--unstable_pulse-bg': theme.vars.palette.background.level1,\n    overflow: 'hidden',\n    cursor: 'default',\n    '& *': {\n      visibility: 'hidden'\n    },\n    '&::before': {\n      display: 'block',\n      content: '\" \"',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      zIndex: 'var(--unstable_pseudo-zIndex)',\n      borderRadius: 'inherit'\n    },\n    [theme.getColorSchemeSelector('dark')]: {\n      '--unstable_wave-bg': 'rgba(255 255 255 / 0.1)'\n    }\n  }, ownerState.variant === 'rectangular' && _extends({\n    borderRadius: 'min(0.15em, 6px)',\n    height: 'auto',\n    width: '100%',\n    '&::before': {\n      position: 'absolute'\n    }\n  }, !ownerState.animation && {\n    backgroundColor: theme.vars.palette.background.level3\n  }, ownerState.level !== 'inherit' && _extends({}, theme.typography[ownerState.level])), ownerState.variant === 'circular' && _extends({\n    borderRadius: '50%',\n    width: '100%',\n    height: '100%',\n    '&::before': {\n      position: 'absolute'\n    }\n  }, !ownerState.animation && {\n    backgroundColor: theme.vars.palette.background.level3\n  }, ownerState.level !== 'inherit' && _extends({}, theme.typography[ownerState.level])), ownerState.variant === 'text' && _extends({\n    borderRadius: 'min(0.15em, 6px)',\n    background: 'transparent',\n    width: '100%'\n  }, ownerState.level !== 'inherit' && _extends({}, theme.typography[ownerState.level || defaultLevel], {\n    paddingBlockStart: \"calc((\".concat(((_theme$typography = theme.typography[ownerState.level || defaultLevel]) == null ? void 0 : _theme$typography.lineHeight) || 1, \" - 1) * 0.56em)\"),\n    paddingBlockEnd: \"calc((\".concat(((_theme$typography2 = theme.typography[ownerState.level || defaultLevel]) == null ? void 0 : _theme$typography2.lineHeight) || 1, \" - 1) * 0.44em)\"),\n    '&::before': _extends({\n      height: '1em'\n    }, theme.typography[ownerState.level || defaultLevel], ownerState.animation === 'wave' && {\n      backgroundColor: theme.vars.palette.background.level3\n    }, !ownerState.animation && {\n      backgroundColor: theme.vars.palette.background.level3\n    }),\n    '&::after': _extends({\n      height: '1em',\n      top: \"calc((\".concat(((_theme$typography3 = theme.typography[ownerState.level || defaultLevel]) == null ? void 0 : _theme$typography3.lineHeight) || 1, \" - 1) * 0.56em)\")\n    }, theme.typography[ownerState.level || defaultLevel])\n  })), ownerState.variant === 'inline' && _extends({\n    display: 'inline',\n    position: 'initial',\n    borderRadius: 'min(0.15em, 6px)'\n  }, !ownerState.animation && {\n    backgroundColor: theme.vars.palette.background.level3\n  }, ownerState.level !== 'inherit' && _extends({}, theme.typography[ownerState.level]), {\n    WebkitMaskImage: '-webkit-radial-gradient(white, black)',\n    '&::before': {\n      position: 'absolute',\n      zIndex: 'var(--unstable_pseudo-zIndex)',\n      backgroundColor: theme.vars.palette.background.level3\n    }\n  }, ownerState.animation === 'pulse' && {\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      zIndex: 'var(--unstable_pseudo-zIndex)',\n      backgroundColor: theme.vars.palette.background.level3\n    }\n  }), ownerState.variant === 'overlay' && _extends({\n    borderRadius: theme.vars.radius.xs,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 'var(--unstable_pseudo-zIndex)'\n  }, ownerState.animation === 'pulse' && {\n    backgroundColor: theme.vars.palette.background.surface\n  }, ownerState.level !== 'inherit' && _extends({}, theme.typography[ownerState.level]), {\n    '&::before': {\n      position: 'absolute'\n    }\n  })];\n});\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Skeleton](https://mui.com/joy-ui/react-skeleton/)\r\n *\r\n * API:\r\n *\r\n * - [Skeleton API](https://mui.com/joy-ui/api/skeleton/)\r\n */\nconst Skeleton = /*#__PURE__*/React.forwardRef(function Skeleton(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoySkeleton'\n  });\n  const {\n      className,\n      component = 'span',\n      children,\n      animation = 'pulse',\n      overlay = false,\n      loading = true,\n      variant = 'overlay',\n      level = variant === 'text' ? 'body-md' : 'inherit',\n      height,\n      width,\n      sx,\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps,\n    sx: [{\n      width,\n      height\n    }, ...(Array.isArray(sx) ? sx : [sx])]\n  });\n  const ownerState = _extends({}, props, {\n    animation,\n    component,\n    level,\n    loading,\n    overlay,\n    variant,\n    width,\n    height\n  });\n  const classes = useUtilityClasses(ownerState);\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref,\n    className: clsx(classes.root, className),\n    elementType: SkeletonRoot,\n    externalForwardedProps,\n    ownerState\n  });\n  return loading ? /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: children\n  })) : /*#__PURE__*/_jsx(React.Fragment, {\n    children: React.Children.map(children, (child, index) => index === 0 && /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {\n      'data-first-child': ''\n    }) : child)\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Skeleton.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * The animation.\r\n   * If `false` the animation effect is disabled.\r\n   * @default 'pulse'\r\n   */\n  animation: PropTypes.oneOf(['pulse', 'wave', false]),\n  /**\r\n   * Used to render icon or text elements inside the Skeleton if `src` is not set.\r\n   * This can be an element, or just a string.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * Height of the skeleton.\r\n   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\r\n   */\n  height: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.shape({\n    lg: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    md: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    sm: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    xl: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    xs: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n  }), PropTypes.string]),\n  /**\r\n   * Applies the theme typography styles.\r\n   * @default variant === 'text' ? 'body-md' : 'inherit'\r\n   */\n  level: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'title-lg', 'title-md', 'title-sm', 'body-lg', 'body-md', 'body-sm', 'body-xs', 'inherit']), PropTypes.string]),\n  /**\r\n   * If `true`, the skeleton appears.\r\n   * @default true\r\n   */\n  loading: PropTypes.bool,\n  /**\r\n   * If `true`, the skeleton's position will change to `absolute` to fill the available space of the nearest parent.\r\n   * This prop is useful to create a placeholder that has the element's dimensions.\r\n   * @default false\r\n   */\n  overlay: PropTypes.bool,\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * The type of content that will be rendered.\r\n   * @default 'overlay'\r\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['circular', 'inline', 'overlay', 'rectangular', 'text']), PropTypes.string]),\n  /**\r\n   * Width of the skeleton.\r\n   * Useful when the skeleton is inside an inline element with no width of its own.\r\n   */\n  width: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.shape({\n    lg: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    md: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    sm: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    xl: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    xs: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n  }), PropTypes.string])\n} : void 0;\n\n// @ts-ignore internal usage only with Typography and Link\nSkeleton.muiName = 'Skeleton';\nexport default Skeleton;","map":null,"metadata":{},"sourceType":"module"}