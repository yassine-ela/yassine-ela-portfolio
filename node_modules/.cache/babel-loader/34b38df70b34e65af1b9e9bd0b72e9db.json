{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"checked\", \"uncheckedIcon\", \"checkedIcon\", \"label\", \"defaultChecked\", \"disabled\", \"disableIcon\", \"overlay\", \"id\", \"indeterminate\", \"indeterminateIcon\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"onFocusVisible\", \"readOnly\", \"required\", \"value\", \"color\", \"variant\", \"size\", \"component\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId, unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useSwitch } from '@mui/base/useSwitch';\nimport { styled, useThemeProps } from '../styles';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport useSlot from '../utils/useSlot';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport CheckIcon from '../internal/svg-icons/Check';\nimport IndeterminateIcon from '../internal/svg-icons/HorizontalRule';\nimport { TypographyNestedContext } from '../Typography/Typography';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var checked = ownerState.checked,\n    disabled = ownerState.disabled,\n    disableIcon = ownerState.disableIcon,\n    focusVisible = ownerState.focusVisible,\n    color = ownerState.color,\n    variant = ownerState.variant,\n    size = ownerState.size,\n    indeterminate = ownerState.indeterminate;\n  var slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', focusVisible && 'focusVisible', variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color)), size && \"size\".concat(capitalize(size))],\n    checkbox: ['checkbox', checked && 'checked', indeterminate && 'indeterminate', disabled && 'disabled' // disabled class is necessary for displaying global variant\n    ],\n\n    action: ['action', checked && 'checked', disableIcon && disabled && 'disabled',\n    // add disabled class to action element for displaying global variant\n    focusVisible && 'focusVisible'],\n    input: ['input'],\n    label: ['label']\n  };\n  return composeClasses(slots, getCheckboxUtilityClass, {});\n};\nvar CheckboxRoot = styled('span', {\n  name: 'JoyCheckbox',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref3) {\n  var ownerState = _ref3.ownerState,\n    theme = _ref3.theme;\n  var _theme$variants$plain, _theme$variants, _theme$variants2;\n  return _extends({\n    '--Icon-fontSize': 'var(--Checkbox-size)'\n  }, ownerState.size === 'sm' && {\n    '--Checkbox-size': '1rem',\n    '--Checkbox-gap': '0.5rem',\n    '& ~ *': {\n      '--FormHelperText-margin': '0 0 0 1.5rem'\n    },\n    fontSize: theme.vars.fontSize.sm\n  }, ownerState.size === 'md' && {\n    '--Checkbox-size': '1.25rem',\n    '--Checkbox-gap': '0.625rem',\n    '& ~ *': {\n      '--FormHelperText-margin': '0.25rem 0 0 1.875rem'\n    },\n    fontSize: theme.vars.fontSize.md\n  }, ownerState.size === 'lg' && {\n    '--Checkbox-size': '1.5rem',\n    '--Checkbox-gap': '0.75rem',\n    '& ~ *': {\n      '--FormHelperText-margin': '0.375rem 0 0 2.25rem'\n    },\n    fontSize: theme.vars.fontSize.lg\n  }, _defineProperty({\n    position: ownerState.overlay ? 'initial' : 'relative',\n    display: 'inline-flex',\n    fontFamily: theme.vars.fontFamily.body,\n    lineHeight: 'var(--Checkbox-size)',\n    color: theme.vars.palette.text.primary\n  }, \"&.\".concat(checkboxClasses.disabled), {\n    color: (_theme$variants$plain = theme.variants.plainDisabled) == null || (_theme$variants$plain = _theme$variants$plain[ownerState.color]) == null ? void 0 : _theme$variants$plain.color\n  }), ownerState.disableIcon && _defineProperty({\n    color: (_theme$variants = theme.variants[ownerState.variant]) == null || (_theme$variants = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants.color\n  }, \"&.\".concat(checkboxClasses.disabled), {\n    color: (_theme$variants2 = theme.variants[\"\".concat(ownerState.variant, \"Disabled\")]) == null || (_theme$variants2 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants2.color\n  }));\n});\nvar CheckboxCheckbox = styled('span', {\n  name: 'JoyCheckbox',\n  slot: 'Checkbox',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.checkbox;\n  }\n})(function (_ref5) {\n  var theme = _ref5.theme,\n    ownerState = _ref5.ownerState;\n  var _theme$variants3, _variantStyle$backgro, _theme$variants4, _theme$variants5, _theme$variants6;\n  var variantStyle = (_theme$variants3 = theme.variants[\"\".concat(ownerState.variant)]) == null ? void 0 : _theme$variants3[ownerState.color];\n  return [_extends({\n    '--Icon-color': ownerState.color !== 'neutral' || ownerState.variant === 'solid' ? 'currentColor' : theme.vars.palette.text.icon,\n    boxSizing: 'border-box',\n    borderRadius: \"min(\".concat(theme.vars.radius.sm, \", 0.25rem)\"),\n    width: 'var(--Checkbox-size)',\n    height: 'var(--Checkbox-size)',\n    display: 'inline-flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexShrink: 0\n  }, ownerState.disableIcon && {\n    display: 'contents'\n  }, _defineProperty({}, \"&.\".concat(checkboxClasses.checked, \", &.\").concat(checkboxClasses.indeterminate), {\n    '--Icon-color': 'currentColor'\n  }))].concat(_toConsumableArray(!ownerState.disableIcon ? [_extends({}, variantStyle, {\n    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface\n  }), {\n    '&:hover': (_theme$variants4 = theme.variants[\"\".concat(ownerState.variant, \"Hover\")]) == null ? void 0 : _theme$variants4[ownerState.color]\n  }, {\n    '&:active': (_theme$variants5 = theme.variants[\"\".concat(ownerState.variant, \"Active\")]) == null ? void 0 : _theme$variants5[ownerState.color]\n  }, _defineProperty({}, \"&.\".concat(checkboxClasses.disabled), (_theme$variants6 = theme.variants[\"\".concat(ownerState.variant, \"Disabled\")]) == null ? void 0 : _theme$variants6[ownerState.color])] : []));\n});\nvar CheckboxAction = styled('span', {\n  name: 'JoyCheckbox',\n  slot: 'Action',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.action;\n  }\n})(function (_ref7) {\n  var theme = _ref7.theme,\n    ownerState = _ref7.ownerState;\n  var _theme$variants7, _theme$variants8, _theme$variants9, _theme$variants10;\n  return [_defineProperty({\n    borderRadius: \"var(--Checkbox-actionRadius, \".concat(ownerState.overlay ? 'var(--unstable_actionRadius, inherit)' : 'inherit', \")\"),\n    textAlign: 'left',\n    // prevent text-align inheritance\n    position: 'absolute',\n    top: 'calc(-1 * var(--variant-borderWidth, 0px))',\n    // clickable on the border and focus outline does not move when checked/unchecked\n    left: 'calc(-1 * var(--variant-borderWidth, 0px))',\n    bottom: 'calc(-1 * var(--variant-borderWidth, 0px))',\n    right: 'calc(-1 * var(--variant-borderWidth, 0px))',\n    zIndex: 1\n  }, theme.focus.selector, theme.focus.default)].concat(_toConsumableArray(ownerState.disableIcon ? [(_theme$variants7 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants7[ownerState.color], {\n    '&:hover': (_theme$variants8 = theme.variants[\"\".concat(ownerState.variant, \"Hover\")]) == null ? void 0 : _theme$variants8[ownerState.color]\n  }, {\n    '&:active': (_theme$variants9 = theme.variants[\"\".concat(ownerState.variant, \"Active\")]) == null ? void 0 : _theme$variants9[ownerState.color]\n  }, _defineProperty({}, \"&.\".concat(checkboxClasses.disabled), (_theme$variants10 = theme.variants[\"\".concat(ownerState.variant, \"Disabled\")]) == null ? void 0 : _theme$variants10[ownerState.color])] : []));\n});\nvar CheckboxInput = styled('input', {\n  name: 'JoyCheckbox',\n  slot: 'Input',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.input;\n  }\n})(function () {\n  return {\n    margin: 0,\n    opacity: 0,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    cursor: 'pointer'\n  };\n});\nvar CheckboxLabel = styled('label', {\n  name: 'JoyCheckbox',\n  slot: 'Label',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.label;\n  }\n})(function (_ref10) {\n  var ownerState = _ref10.ownerState;\n  return _extends({\n    flex: 1,\n    minWidth: 0\n  }, ownerState.disableIcon ? {\n    zIndex: 1,\n    // label should stay on top of the action.\n    pointerEvents: 'none' // makes hover ineffect.\n  } : {\n    marginInlineStart: 'var(--Checkbox-gap)'\n  });\n});\nvar defaultCheckedIcon = /*#__PURE__*/_jsx(CheckIcon, {});\nvar defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateIcon, {});\n/**\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/joy-ui/react-checkbox/)\n *\n * API:\n *\n * - [Checkbox API](https://mui.com/joy-ui/api/checkbox/)\n */\nvar Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _ref, _inProps$disabled, _ref2, _inProps$size, _formControl$color;\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyCheckbox'\n  });\n  var checkedProp = props.checked,\n    uncheckedIcon = props.uncheckedIcon,\n    _props$checkedIcon = props.checkedIcon,\n    checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n    label = props.label,\n    defaultChecked = props.defaultChecked,\n    disabledExternalProp = props.disabled,\n    _props$disableIcon = props.disableIcon,\n    disableIcon = _props$disableIcon === void 0 ? false : _props$disableIcon,\n    overlay = props.overlay,\n    idOverride = props.id,\n    _props$indeterminate = props.indeterminate,\n    indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n    _props$indeterminateI = props.indeterminateIcon,\n    indeterminateIcon = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n    name = props.name,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onFocus = props.onFocus,\n    onFocusVisible = props.onFocusVisible,\n    readOnly = props.readOnly,\n    required = props.required,\n    value = props.value,\n    colorProp = props.color,\n    variantProp = props.variant,\n    _props$size = props.size,\n    sizeProp = _props$size === void 0 ? 'md' : _props$size,\n    component = props.component,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var formControl = React.useContext(FormControlContext);\n  var disabledProp = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledExternalProp;\n  var size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref2 : sizeProp;\n  if (process.env.NODE_ENV !== 'production') {\n    var registerEffect = formControl == null ? void 0 : formControl.registerEffect;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (registerEffect) {\n        return registerEffect();\n      }\n      return undefined;\n    }, [registerEffect]);\n  }\n  var id = useId(idOverride != null ? idOverride : formControl == null ? void 0 : formControl.htmlFor);\n  var useCheckboxProps = {\n    checked: checkedProp,\n    defaultChecked: defaultChecked,\n    disabled: disabledProp,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    onFocusVisible: onFocusVisible\n  };\n  var _useSwitch = useSwitch(useCheckboxProps),\n    getInputProps = _useSwitch.getInputProps,\n    checked = _useSwitch.checked,\n    disabled = _useSwitch.disabled,\n    focusVisible = _useSwitch.focusVisible;\n  var isCheckboxActive = checked || indeterminate;\n  var activeVariant = variantProp || 'solid';\n  var inactiveVariant = variantProp || 'outlined';\n  var variant = isCheckboxActive ? activeVariant : inactiveVariant;\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, formControl != null && formControl.error ? 'danger' : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);\n  var activeColor = color || 'primary';\n  var inactiveColor = color || 'neutral';\n  var ownerState = _extends({}, props, {\n    checked: checked,\n    disabled: disabled,\n    disableIcon: disableIcon,\n    overlay: overlay,\n    focusVisible: focusVisible,\n    color: isCheckboxActive ? activeColor : inactiveColor,\n    variant: variant,\n    size: size\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      className: classes.root,\n      elementType: CheckboxRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  var _useSlot3 = useSlot('checkbox', {\n      className: classes.checkbox,\n      elementType: CheckboxCheckbox,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot4 = _slicedToArray(_useSlot3, 2),\n    SlotCheckbox = _useSlot4[0],\n    checkboxProps = _useSlot4[1];\n  var _useSlot5 = useSlot('action', {\n      className: classes.action,\n      elementType: CheckboxAction,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot6 = _slicedToArray(_useSlot5, 2),\n    SlotAction = _useSlot6[0],\n    actionProps = _useSlot6[1];\n  var _useSlot7 = useSlot('input', {\n      additionalProps: _extends({\n        id: id,\n        name: name,\n        value: value,\n        readOnly: readOnly,\n        required: required != null ? required : formControl == null ? void 0 : formControl.required,\n        'aria-describedby': formControl == null ? void 0 : formControl['aria-describedby']\n      }, indeterminate && {\n        // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-checked#values\n        'aria-checked': 'mixed'\n      }),\n      className: classes.input,\n      elementType: CheckboxInput,\n      externalForwardedProps: externalForwardedProps,\n      getSlotProps: getInputProps,\n      ownerState: ownerState\n    }),\n    _useSlot8 = _slicedToArray(_useSlot7, 2),\n    SlotInput = _useSlot8[0],\n    inputProps = _useSlot8[1];\n  var _useSlot9 = useSlot('label', {\n      additionalProps: {\n        htmlFor: id\n      },\n      className: classes.label,\n      elementType: CheckboxLabel,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot10 = _slicedToArray(_useSlot9, 2),\n    SlotLabel = _useSlot10[0],\n    labelProps = _useSlot10[1];\n  var icon = uncheckedIcon;\n  if (disableIcon) {\n    icon = null;\n  } else if (indeterminate) {\n    icon = indeterminateIcon;\n  } else if (checked) {\n    icon = checkedIcon;\n  }\n  return /*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n    children: [/*#__PURE__*/_jsxs(SlotCheckbox, _extends({}, checkboxProps, {\n      children: [/*#__PURE__*/_jsx(SlotAction, _extends({}, actionProps, {\n        children: /*#__PURE__*/_jsx(SlotInput, _extends({}, inputProps))\n      })), icon]\n    })), label && /*#__PURE__*/_jsx(TypographyNestedContext.Provider, {\n      value: true,\n      children: /*#__PURE__*/_jsx(SlotLabel, _extends({}, labelProps, {\n        children: label\n      }))\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the checked icon is removed and the selected variant is applied on the `action` element instead.\n   * @default false\n   */\n  disableIcon: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * The label element next to the checkbox.\n   */\n  label: PropTypes.node,\n  /**\n   * The `name` attribute of the input.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n  /**\n   * If `true`, the root element's position is set to initial which allows the action area to fill the nearest positioned parent.\n   * This prop is useful for composing Checkbox with ListItem component.\n   * @default false\n   */\n  overlay: PropTypes.bool,\n  /**\n   * If `true`, the component is read only.\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg']),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    action: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    checkbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    label: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    action: PropTypes.elementType,\n    checkbox: PropTypes.elementType,\n    input: PropTypes.elementType,\n    label: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The icon when `checked` is false.\n   */\n  uncheckedIcon: PropTypes.node,\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'solid'\n   */\n  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])\n} : void 0;\nexport default Checkbox;","map":null,"metadata":{},"sourceType":"module"}