{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"invertedColors\", \"role\", \"variant\", \"size\", \"startDecorator\", \"endDecorator\", \"component\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { ColorInversionProvider, useColorInversion } from '../styles/ColorInversion';\nimport useSlot from '../utils/useSlot';\nimport { getAlertUtilityClass } from './alertClasses';\nimport { resolveSxValue } from '../styles/styleUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', size && \"size\".concat(capitalize(size)), color && \"color\".concat(capitalize(color)), variant && \"variant\".concat(capitalize(variant))],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator']\n  };\n  return composeClasses(slots, getAlertUtilityClass, {});\n};\nconst AlertRoot = styled('div', {\n  name: 'JoyAlert',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(_ref => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  var _theme$variants, _theme$colorInversion;\n  const {\n    p,\n    padding,\n    borderRadius\n  } = resolveSxValue({\n    theme,\n    ownerState\n  }, ['p', 'padding', 'borderRadius']);\n  return [_extends({\n    '--Alert-radius': theme.vars.radius.sm,\n    '--Alert-decoratorChildRadius': 'max((var(--Alert-radius) - var(--variant-borderWidth, 0px)) - var(--Alert-padding), min(var(--Alert-padding) + var(--variant-borderWidth, 0px), var(--Alert-radius) / 2))',\n    '--Button-minHeight': 'var(--Alert-decoratorChildHeight)',\n    '--IconButton-size': 'var(--Alert-decoratorChildHeight)',\n    '--Button-radius': 'var(--Alert-decoratorChildRadius)',\n    '--IconButton-radius': 'var(--Alert-decoratorChildRadius)',\n    '--Icon-color': 'currentColor'\n  }, ownerState.size === 'sm' && {\n    '--Alert-padding': '0.5rem',\n    '--Alert-decoratorChildHeight': '1.5rem',\n    '--Icon-fontSize': theme.vars.fontSize.xl,\n    gap: '0.5rem'\n  }, ownerState.size === 'md' && {\n    '--Alert-padding': '0.75rem',\n    '--Alert-decoratorChildHeight': '2rem',\n    '--Icon-fontSize': theme.vars.fontSize.xl,\n    gap: '0.625rem'\n  }, ownerState.size === 'lg' && {\n    '--Alert-padding': '1rem',\n    '--Alert-decoratorChildHeight': '2.375rem',\n    '--Icon-fontSize': theme.vars.fontSize.xl2,\n    gap: '0.875rem'\n  }, {\n    backgroundColor: theme.vars.palette.background.surface,\n    display: 'flex',\n    position: 'relative',\n    alignItems: 'center',\n    padding: \"var(--Alert-padding)\",\n    borderRadius: 'var(--Alert-radius)'\n  }, theme.typography[\"body-\".concat({\n    sm: 'xs',\n    md: 'sm',\n    lg: 'md'\n  }[ownerState.size])], {\n    fontWeight: theme.vars.fontWeight.md\n  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]), ownerState.color !== 'context' && ownerState.invertedColors && ((_theme$colorInversion = theme.colorInversion[ownerState.variant]) == null ? void 0 : _theme$colorInversion[ownerState.color]), p !== undefined && {\n    '--Alert-padding': p\n  }, padding !== undefined && {\n    '--Alert-padding': padding\n  }, borderRadius !== undefined && {\n    '--Alert-radius': borderRadius\n  }];\n});\nconst AlertStartDecorator = styled('span', {\n  name: 'JoyAlert',\n  slot: 'StartDecorator',\n  overridesResolver: (props, styles) => styles.startDecorator\n})({\n  display: 'inherit',\n  flex: 'none'\n});\nconst AlertEndDecorator = styled('span', {\n  name: 'JoyAlert',\n  slot: 'EndDecorator',\n  overridesResolver: (props, styles) => styles.endDecorator\n})({\n  display: 'inherit',\n  flex: 'none',\n  marginLeft: 'auto'\n});\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Alert](https://mui.com/joy-ui/react-alert/)\r\n *\r\n * API:\r\n *\r\n * - [Alert API](https://mui.com/joy-ui/api/alert/)\r\n */\nconst Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyAlert'\n  });\n  const {\n      children,\n      className,\n      color: colorProp = 'neutral',\n      invertedColors = false,\n      role = 'alert',\n      variant = 'soft',\n      size = 'md',\n      startDecorator,\n      endDecorator,\n      component,\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    getColor\n  } = useColorInversion(variant);\n  const color = getColor(inProps.color, colorProp);\n  const ownerState = _extends({}, props, {\n    color,\n    variant,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref,\n    className: clsx(classes.root, className),\n    elementType: AlertRoot,\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      role\n    }\n  });\n  const [SlotStartDecorator, startDecoratorProps] = useSlot('startDecorator', {\n    className: classes.startDecorator,\n    elementType: AlertStartDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotEndDecorator, endDecoratorProps] = useSlot('endDecorator', {\n    className: classes.endDecorator,\n    elementType: AlertEndDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const result = /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {\n      children: startDecorator\n    })), children, endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {\n      children: endDecorator\n    }))]\n  });\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: invertedColors ? /*#__PURE__*/_jsx(ColorInversionProvider, {\n      variant: variant,\n      children: result\n    }) : result\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   * @default 'neutral'\r\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * Element placed after the children.\r\n   */\n  endDecorator: PropTypes.node,\n  /**\r\n   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.\r\n   * @default false\r\n   */\n  invertedColors: PropTypes.bool,\n  /**\r\n   * The ARIA role attribute of the element.\r\n   * @default 'alert'\r\n   */\n  role: PropTypes.string,\n  /**\r\n   * The size of the component.\r\n   * @default 'md'\r\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    endDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    endDecorator: PropTypes.elementType,\n    root: PropTypes.elementType,\n    startDecorator: PropTypes.elementType\n  }),\n  /**\r\n   * Element placed before the children.\r\n   */\n  startDecorator: PropTypes.node,\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\r\n   * @default 'soft'\r\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default Alert;","map":null,"metadata":{},"sourceType":"module"}