{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { useDropdown } from '../useDropdown/useDropdown';\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Menu](https://mui.com/base-ui/react-menu/)\r\n *\r\n * API:\r\n *\r\n * - [Dropdown API](https://mui.com/base-ui/react-menu/components-api/#dropdown)\r\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction Dropdown(props) {\n  const {\n    children,\n    open,\n    defaultOpen,\n    onOpenChange\n  } = props;\n  const {\n    contextValue\n  } = useDropdown({\n    defaultOpen,\n    onOpenChange,\n    open\n  });\n  return /*#__PURE__*/_jsx(DropdownContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? Dropdown.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * If `true`, the dropdown is initially open.\r\n   */\n  defaultOpen: PropTypes.bool,\n  /**\r\n   * Callback fired when the component requests to be opened or closed.\r\n   */\n  onOpenChange: PropTypes.func,\n  /**\r\n   * Allows to control whether the dropdown is open.\r\n   * This is a controlled counterpart of `defaultOpen`.\r\n   */\n  open: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Dropdown['propTypes' + ''] = exactProp(Dropdown.propTypes);\n}\nexport { Dropdown };","map":null,"metadata":{},"sourceType":"module"}