{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"component\", \"children\", \"buttonFlex\", \"orientation\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useThemeProps } from '../styles';\nimport styled from '../styles/styled';\nimport { getDialogActionsUtilityClass } from './dialogActionsClasses';\nimport useSlot from '../utils/useSlot';\nimport { StyledCardActionsRoot } from '../CardActions/CardActions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogActionsUtilityClass, {});\n};\nconst DialogActionsRoot = styled(StyledCardActionsRoot, {\n  name: 'JoyDialogActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Modal](https://mui.com/joy-ui/react-modal/)\r\n *\r\n * API:\r\n *\r\n * - [DialogActions API](https://mui.com/joy-ui/api/dialog-actions/)\r\n */\nconst DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyDialogActions'\n  });\n  const {\n      component = 'div',\n      children,\n      buttonFlex,\n      orientation = 'horizontal-reverse',\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const ownerState = _extends({}, props, {\n    component,\n    buttonFlex,\n    orientation\n  });\n  const classes = useUtilityClasses();\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref,\n    className: classes.root,\n    elementType: DialogActionsRoot,\n    externalForwardedProps,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogActions.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * The CSS `flex` for the Button and its wrapper.\r\n   */\n  buttonFlex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\r\n   * Used to render icon or text elements inside the DialogActions if `src` is not set.\r\n   * This can be an element, or just a string.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * The component orientation.\r\n   * @default 'horizontal-reverse'\r\n   */\n  orientation: PropTypes.oneOf(['horizontal-reverse', 'horizontal', 'vertical']),\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogActions;","map":null,"metadata":{},"sourceType":"module"}