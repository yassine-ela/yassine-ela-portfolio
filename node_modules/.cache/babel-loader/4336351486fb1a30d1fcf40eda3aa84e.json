{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _CloseIcon;\nvar _excluded = [\"component\", \"color\", \"variant\", \"size\", \"onClick\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { useButton } from '@mui/base/useButton';\nimport useSlot from '../utils/useSlot';\nimport { useThemeProps, styled } from '../styles';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport { StyledIconButton } from '../IconButton/IconButton';\nimport { getModalCloseUtilityClass } from './modalCloseClasses';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport CloseModalContext from '../Modal/CloseModalContext';\nimport ModalDialogSizeContext from '../ModalDialog/ModalDialogSizeContext';\nimport ModalDialogVariantColorContext from '../ModalDialog/ModalDialogVariantColorContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var variant = ownerState.variant,\n    color = ownerState.color,\n    disabled = ownerState.disabled,\n    focusVisible = ownerState.focusVisible,\n    size = ownerState.size;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color)), size && \"size\".concat(capitalize(size))]\n  };\n  return composeClasses(slots, getModalCloseUtilityClass, {});\n};\nexport var ModalCloseRoot = styled(StyledIconButton, {\n  name: 'JoyModalClose',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref3) {\n  var ownerState = _ref3.ownerState,\n    theme = _ref3.theme;\n  var _theme$variants;\n  return _extends({}, ownerState.size === 'sm' && {\n    '--IconButton-size': '1.75rem'\n  }, ownerState.size === 'md' && {\n    '--IconButton-size': '2rem'\n  }, ownerState.size === 'lg' && {\n    '--IconButton-size': '2.25rem'\n  }, {\n    position: 'absolute',\n    zIndex: 1,\n    // stay on top of the title in case it is positioned relatively\n    top: \"var(--ModalClose-inset, 0.625rem)\",\n    right: \"var(--ModalClose-inset, 0.625rem)\",\n    borderRadius: \"var(--ModalClose-radius, \".concat(theme.vars.radius.sm, \")\")\n  }, !((_theme$variants = theme.variants[ownerState.variant]) != null && (_theme$variants = _theme$variants[ownerState.color]) != null && _theme$variants.backgroundColor) && {\n    color: theme.vars.palette.text.secondary\n  });\n});\nvar modalDialogVariantMapping = {\n  plain: 'plain',\n  outlined: 'plain',\n  soft: 'soft',\n  solid: 'solid'\n};\n/**\n *\n * Demos:\n *\n * - [Modal](https://mui.com/joy-ui/react-modal/)\n *\n * API:\n *\n * - [ModalClose API](https://mui.com/joy-ui/api/modal-close/)\n */\nvar ModalClose = /*#__PURE__*/React.forwardRef(function ModalClose(inProps, ref) {\n  var _ref, _inProps$variant, _modalDialogVariantCo, _ref2, _inProps$size;\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyModalClose'\n  });\n  var _props$component = props.component,\n    component = _props$component === void 0 ? 'button' : _props$component,\n    _props$color = props.color,\n    colorProp = _props$color === void 0 ? 'neutral' : _props$color,\n    _props$variant = props.variant,\n    variantProp = _props$variant === void 0 ? 'plain' : _props$variant,\n    _props$size = props.size,\n    sizeProp = _props$size === void 0 ? 'md' : _props$size,\n    _onClick = props.onClick,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var closeModalContext = React.useContext(CloseModalContext);\n  var modalDialogVariantColor = React.useContext(ModalDialogVariantColorContext);\n  var variant = (_ref = (_inProps$variant = inProps.variant) != null ? _inProps$variant : modalDialogVariantMapping[modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.variant]) != null ? _ref : variantProp;\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, (_modalDialogVariantCo = modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.color) != null ? _modalDialogVariantCo : colorProp);\n  var modalDialogSize = React.useContext(ModalDialogSizeContext);\n  var size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : modalDialogSize) != null ? _ref2 : sizeProp;\n  var _useButton = useButton(_extends({}, props, {\n      rootRef: ref\n    })),\n    focusVisible = _useButton.focusVisible,\n    getRootProps = _useButton.getRootProps;\n  var ownerState = _extends({}, props, {\n    color: color,\n    component: component,\n    variant: variant,\n    size: size,\n    focusVisible: focusVisible\n  });\n  var classes = useUtilityClasses(ownerState);\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      elementType: ModalCloseRoot,\n      getSlotProps: getRootProps,\n      externalForwardedProps: _extends({\n        onClick: function onClick(event) {\n          closeModalContext == null || closeModalContext(event, 'closeClick');\n          _onClick == null || _onClick(event);\n        }\n      }, other, {\n        component: component,\n        slots: slots,\n        slotProps: slotProps\n      }),\n      className: classes.root,\n      ownerState: ownerState\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: _CloseIcon || (_CloseIcon = /*#__PURE__*/_jsx(CloseIcon, {}))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ModalClose.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'plain'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default ModalClose;","map":null,"metadata":{},"sourceType":"module"}