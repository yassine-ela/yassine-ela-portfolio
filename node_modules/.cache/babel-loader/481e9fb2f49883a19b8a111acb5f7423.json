{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"children\", \"borderAxis\", \"hoverRow\", \"noWrap\", \"size\", \"variant\", \"color\", \"stripe\", \"stickyHeader\", \"stickyFooter\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useThemeProps } from '../styles';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport styled from '../styles/styled';\nimport { getTableUtilityClass } from './tableClasses';\nimport { TypographyInheritContext } from '../Typography/Typography';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    size,\n    variant,\n    color,\n    borderAxis,\n    stickyHeader,\n    stickyFooter,\n    noWrap,\n    hoverRow\n  } = ownerState;\n  const slots = {\n    root: ['root', stickyHeader && 'stickyHeader', stickyFooter && 'stickyFooter', noWrap && 'noWrap', hoverRow && 'hoverRow', borderAxis && \"borderAxis\".concat(capitalize(borderAxis)), variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color)), size && \"size\".concat(capitalize(size))]\n  };\n  return composeClasses(slots, getTableUtilityClass, {});\n};\nconst tableSelector = {\n  /**\r\n   * According to https://www.w3.org/TR/2014/REC-html5-20141028/tabular-data.html#the-tr-element,\r\n   * `tr` can only have `td | th` as children, so using :first-of-type is better than :first-child to prevent emotion SSR warning\r\n   */\n  getColumnExceptFirst() {\n    return '& tr > *:not(:first-of-type), & tr > th + td, & tr > td + th';\n  },\n  /**\r\n   * Every cell in the table\r\n   */\n  getCell() {\n    return '& th, & td';\n  },\n  /**\r\n   * `th` cell of the table (could exist in the body)\r\n   */\n  getHeadCell() {\n    return '& th';\n  },\n  /**\r\n   * Only the cell of `thead`\r\n   */\n  getHeaderCell() {\n    return '& thead th';\n  },\n  getHeaderCellOfRow(row) {\n    return \"& thead tr:nth-of-type(\".concat(row, \") th\");\n  },\n  getBottomHeaderCell() {\n    return '& thead th:not([colspan])';\n  },\n  getHeaderNestedFirstColumn() {\n    return '& thead tr:not(:first-of-type) th:not([colspan]):first-of-type';\n  },\n  /**\r\n   * The body cell that contains data\r\n   */\n  getDataCell() {\n    return '& td';\n  },\n  getDataCellExceptLastRow() {\n    return '& tr:not(:last-of-type) > td';\n  },\n  /**\r\n   * The body cell either `td` or `th`\r\n   */\n  getBodyCellExceptLastRow() {\n    return \"\".concat(this.getDataCellExceptLastRow(), \", & tr:not(:last-of-type) > th[scope=\\\"row\\\"]\");\n  },\n  getBodyCellOfRow(row) {\n    if (typeof row === 'number' && row < 0) {\n      return \"& tbody tr:nth-last-of-type(\".concat(Math.abs(row), \") td, & tbody tr:nth-last-of-type(\").concat(Math.abs(row), \") th[scope=\\\"row\\\"]\");\n    }\n    return \"& tbody tr:nth-of-type(\".concat(row, \") td, & tbody tr:nth-of-type(\").concat(row, \") th[scope=\\\"row\\\"]\");\n  },\n  getBodyRow(row) {\n    if (row === undefined) {\n      return \"& tbody tr\";\n    }\n    return \"& tbody tr:nth-of-type(\".concat(row, \")\");\n  },\n  getFooterCell() {\n    return '& tfoot th, & tfoot td';\n  },\n  getFooterFirstRowCell() {\n    return \"& tfoot tr:not(:last-of-type) th, & tfoot tr:not(:last-of-type) td\";\n  }\n};\nconst TableRoot = styled('table', {\n  name: 'JoyTable',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(_ref => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  var _theme$variants, _variantStyle$borderC, _theme$variants2, _ownerState$borderAxi, _ownerState$borderAxi2, _ownerState$borderAxi3, _ownerState$borderAxi4;\n  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];\n  return [_extends({\n    '--Table-headerUnderlineThickness': '2px',\n    '--TableCell-borderColor': (_variantStyle$borderC = variantStyle == null ? void 0 : variantStyle.borderColor) != null ? _variantStyle$borderC : theme.vars.palette.divider,\n    '--TableCell-headBackground': \"var(--Sheet-background, \".concat(theme.vars.palette.background.surface, \")\")\n  }, ownerState.size === 'sm' && {\n    '--unstable_TableCell-height': 'var(--TableCell-height, 32px)',\n    '--TableCell-paddingX': '0.25rem',\n    '--TableCell-paddingY': '0.25rem'\n  }, ownerState.size === 'md' && {\n    '--unstable_TableCell-height': 'var(--TableCell-height, 40px)',\n    '--TableCell-paddingX': '0.5rem',\n    '--TableCell-paddingY': '0.375rem'\n  }, ownerState.size === 'lg' && {\n    '--unstable_TableCell-height': 'var(--TableCell-height, 48px)',\n    '--TableCell-paddingX': '0.75rem',\n    '--TableCell-paddingY': '0.5rem'\n  }, {\n    tableLayout: 'fixed',\n    width: '100%',\n    borderSpacing: '0px',\n    borderCollapse: 'separate',\n    borderRadius: 'var(--TableCell-cornerRadius, var(--unstable_actionRadius))'\n  }, theme.typography[\"body-\".concat({\n    sm: 'xs',\n    md: 'sm',\n    lg: 'md'\n  }[ownerState.size])], (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color], {\n    '& caption': {\n      color: theme.vars.palette.text.tertiary,\n      padding: 'calc(2 * var(--TableCell-paddingY)) var(--TableCell-paddingX)'\n    },\n    [tableSelector.getDataCell()]: _extends({\n      padding: 'var(--TableCell-paddingY) var(--TableCell-paddingX)',\n      height: 'var(--unstable_TableCell-height)',\n      borderColor: 'var(--TableCell-borderColor)',\n      // must come after border bottom\n      backgroundColor: 'var(--TableCell-dataBackground)'\n    }, ownerState.noWrap && {\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden'\n    }),\n    [tableSelector.getHeadCell()]: {\n      textAlign: 'left',\n      padding: 'var(--TableCell-paddingY) var(--TableCell-paddingX)',\n      backgroundColor: 'var(--TableCell-headBackground)',\n      // use `background-color` in case the Sheet has gradient background\n      height: 'var(--unstable_TableCell-height)',\n      fontWeight: theme.vars.fontWeight.lg,\n      borderColor: 'var(--TableCell-borderColor)',\n      color: theme.vars.palette.text.secondary,\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden'\n    },\n    [tableSelector.getHeaderCell()]: {\n      verticalAlign: 'bottom',\n      // Automatic radius adjustment with Sheet\n      '&:first-of-type': {\n        borderTopLeftRadius: 'var(--TableCell-cornerRadius, var(--unstable_actionRadius))'\n      },\n      '&:last-of-type': {\n        borderTopRightRadius: 'var(--TableCell-cornerRadius, var(--unstable_actionRadius))'\n      }\n    },\n    '& tfoot tr > *': {\n      backgroundColor: \"var(--TableCell-footBackground, \".concat(theme.vars.palette.background.level1, \")\"),\n      // Automatic radius adjustment with Sheet\n      '&:first-of-type': {\n        borderBottomLeftRadius: 'var(--TableCell-cornerRadius, var(--unstable_actionRadius))'\n      },\n      '&:last-of-type': {\n        borderBottomRightRadius: 'var(--TableCell-cornerRadius, var(--unstable_actionRadius))'\n      }\n    }\n  }), (((_ownerState$borderAxi = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi.startsWith('x')) || ((_ownerState$borderAxi2 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi2.startsWith('both'))) && {\n    // insert border between rows\n    [tableSelector.getHeaderCell()]: {\n      borderBottomWidth: 1,\n      borderBottomStyle: 'solid'\n    },\n    [tableSelector.getBottomHeaderCell()]: {\n      borderBottomWidth: 'var(--Table-headerUnderlineThickness)',\n      borderBottomStyle: 'solid'\n    },\n    [tableSelector.getBodyCellExceptLastRow()]: {\n      borderBottomWidth: 1,\n      borderBottomStyle: 'solid'\n    },\n    [tableSelector.getFooterCell()]: {\n      borderTopWidth: 1,\n      borderTopStyle: 'solid'\n    }\n  }, (((_ownerState$borderAxi3 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi3.startsWith('y')) || ((_ownerState$borderAxi4 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi4.startsWith('both'))) && {\n    // insert border between columns\n    [\"\".concat(tableSelector.getColumnExceptFirst(), \", \").concat(tableSelector.getHeaderNestedFirstColumn())]: {\n      borderLeftWidth: 1,\n      borderLeftStyle: 'solid'\n    }\n  }, (ownerState.borderAxis === 'x' || ownerState.borderAxis === 'both') && {\n    // insert border at the top of header and bottom of body\n    [tableSelector.getHeaderCellOfRow(1)]: {\n      borderTopWidth: 1,\n      borderTopStyle: 'solid'\n    },\n    [tableSelector.getBodyCellOfRow(-1)]: {\n      borderBottomWidth: 1,\n      borderBottomStyle: 'solid'\n    },\n    [tableSelector.getFooterCell()]: {\n      borderBottomWidth: 1,\n      borderBottomStyle: 'solid'\n    }\n  }, (ownerState.borderAxis === 'y' || ownerState.borderAxis === 'both') && {\n    // insert border on the left of first column and right of the last column\n    '& tr > *:first-of-type': {\n      borderLeftWidth: 1,\n      borderLeftStyle: 'solid'\n    },\n    '& tr > *:last-of-type:not(:first-of-type)': {\n      borderRightWidth: 1,\n      borderRightStyle: 'solid'\n    }\n  }, ownerState.stripe && {\n    [tableSelector.getBodyRow(ownerState.stripe)]: {\n      // For customization, a table cell can look for this variable with a fallback value.\n      background: \"var(--TableRow-stripeBackground, \".concat(theme.vars.palette.background.level2, \")\"),\n      color: theme.vars.palette.text.primary\n    }\n  }, ownerState.hoverRow && {\n    [tableSelector.getBodyRow()]: {\n      '&:hover': {\n        background: \"var(--TableRow-hoverBackground, \".concat(theme.vars.palette.background.level3, \")\")\n      }\n    }\n  }, ownerState.stickyHeader && {\n    // The column header\n    [tableSelector.getHeaderCell()]: {\n      position: 'sticky',\n      top: 0,\n      zIndex: theme.vars.zIndex.table\n    },\n    [tableSelector.getHeaderCellOfRow(2)]: {\n      // support upto 2 rows for the sticky header\n      top: 'var(--unstable_TableCell-height)'\n    }\n  }, ownerState.stickyFooter && {\n    // The column header\n    [tableSelector.getFooterCell()]: {\n      position: 'sticky',\n      bottom: 0,\n      zIndex: theme.vars.zIndex.table,\n      color: theme.vars.palette.text.secondary,\n      fontWeight: theme.vars.fontWeight.lg\n    },\n    [tableSelector.getFooterFirstRowCell()]: {\n      // support upto 2 rows for the sticky footer\n      bottom: 'var(--unstable_TableCell-height)'\n    }\n  }];\n});\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Table](https://mui.com/joy-ui/react-table/)\r\n *\r\n * API:\r\n *\r\n * - [Table API](https://mui.com/joy-ui/api/table/)\r\n */\nconst Table = /*#__PURE__*/React.forwardRef(function Table(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyTable'\n  });\n  const {\n      className,\n      component,\n      children,\n      borderAxis = 'xBetween',\n      hoverRow = false,\n      noWrap = false,\n      size = 'md',\n      variant = 'plain',\n      color: colorProp = 'neutral',\n      stripe,\n      stickyHeader = false,\n      stickyFooter = false,\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    getColor\n  } = useColorInversion(variant);\n  const color = getColor(inProps.color, colorProp);\n  const ownerState = _extends({}, props, {\n    borderAxis,\n    hoverRow,\n    noWrap,\n    component,\n    size,\n    color,\n    variant,\n    stripe,\n    stickyHeader,\n    stickyFooter\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref,\n    className: clsx(classes.root, className),\n    elementType: TableRoot,\n    externalForwardedProps,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(TypographyInheritContext.Provider, {\n    value: true,\n    children: /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Table.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * The axis to display a border on the table cell.\r\n   * @default 'xBetween'\r\n   */\n  borderAxis: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['both', 'bothBetween', 'none', 'x', 'xBetween', 'y', 'yBetween']), PropTypes.string]),\n  /**\r\n   * Children of the table\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   * @default 'neutral'\r\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * If `true`, the table row will shade on hover.\r\n   * @default false\r\n   */\n  hoverRow: PropTypes.bool,\n  /**\r\n   * If `true`, the body cells will not wrap, but instead will truncate with a text overflow ellipsis.\r\n   *\r\n   * Note: Header cells are always truncated with overflow ellipsis.\r\n   *\r\n   * @default false\r\n   */\n  noWrap: PropTypes.bool,\n  /**\r\n   * The size of the component.\r\n   * It accepts theme values between 'sm' and 'lg'.\r\n   * @default 'md'\r\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * If `true`, the footer always appear at the bottom of the overflow table.\r\n   *\r\n   * ⚠️ It doesn't work with IE11.\r\n   * @default false\r\n   */\n  stickyFooter: PropTypes.bool,\n  /**\r\n   * If `true`, the header always appear at the top of the overflow table.\r\n   *\r\n   * ⚠️ It doesn't work with IE11.\r\n   * @default false\r\n   */\n  stickyHeader: PropTypes.bool,\n  /**\r\n   * The odd or even row of the table body will have subtle background color.\r\n   */\n  stripe: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['odd', 'even']), PropTypes.string]),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\r\n   * @default 'plain'\r\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default Table;","map":null,"metadata":{},"sourceType":"module"}