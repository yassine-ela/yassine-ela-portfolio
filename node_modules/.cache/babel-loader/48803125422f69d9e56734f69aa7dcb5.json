{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"component\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { styled, useThemeProps } from '../styles';\nimport { getFormHelperTextUtilityClass } from './formHelperTextClasses';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport formControlClasses from '../FormControl/formControlClasses';\nimport formLabelClasses from '../FormLabel/formLabelClasses';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getFormHelperTextUtilityClass, {});\n};\nconst FormHelperTextRoot = styled('div', {\n  name: 'JoyFormHelperText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    '--Icon-fontSize': 'calc(var(--FormHelperText-lineHeight) * 1em)',\n    display: 'flex',\n    alignItems: 'center',\n    gap: '2px',\n    fontFamily: theme.vars.fontFamily.body,\n    fontSize: \"var(--FormHelperText-fontSize, \".concat(theme.vars.fontSize.sm, \")\"),\n    lineHeight: \"var(--FormHelperText-lineHeight, \".concat(theme.vars.lineHeight.sm, \")\"),\n    color: \"var(--FormHelperText-color, \".concat(theme.vars.palette.text.tertiary, \")\"),\n    margin: 'var(--FormHelperText-margin, 0px)',\n    [\".\".concat(formLabelClasses.root, \" + &\")]: {\n      '--FormHelperText-margin': '0px' // remove the margin if the helper text is next to the form label.\n    },\n    [\".\".concat(formControlClasses.error, \" &\")]: {\n      '--Icon-color': 'currentColor'\n    }\n  };\n});\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Input](https://mui.com/joy-ui/react-input/)\r\n *\r\n * API:\r\n *\r\n * - [FormHelperText API](https://mui.com/joy-ui/api/form-helper-text/)\r\n */\nconst FormHelperText = /*#__PURE__*/React.forwardRef(function FormHelperText(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyFormHelperText'\n  });\n  const {\n      children,\n      component,\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(rootRef, ref);\n  const formControl = React.useContext(FormControlContext);\n  const setHelperText = formControl == null ? void 0 : formControl.setHelperText;\n  React.useEffect(() => {\n    setHelperText == null || setHelperText(rootRef.current);\n    return () => {\n      setHelperText == null || setHelperText(null);\n    };\n  }, [setHelperText]);\n  const classes = useUtilityClasses();\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref: handleRef,\n    elementType: FormHelperTextRoot,\n    externalForwardedProps,\n    ownerState: props,\n    additionalProps: {\n      as: component,\n      id: formControl == null ? void 0 : formControl['aria-describedby']\n    },\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormHelperText.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default FormHelperText;","map":null,"metadata":{},"sourceType":"module"}