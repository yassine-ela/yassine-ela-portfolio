{"ast":null,"code":"import _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar VariantColorContext = /*#__PURE__*/React.createContext(undefined);\n\n/**\n * @internal For internal usage only.\n *\n * Use this function in a slot to get the matched default variant and color when the parent's variant and/or color changes.\n */\nexport function getChildVariantAndColor(parentVariant, parentColor) {\n  var childColor = parentColor;\n  var childVariant = parentVariant;\n  if (parentVariant === 'outlined') {\n    childColor = 'neutral';\n    childVariant = 'plain';\n  }\n  if (parentVariant === 'plain') {\n    childColor = 'neutral';\n  }\n  return {\n    variant: childVariant,\n    color: childColor\n  };\n}\n\n/**\n * @internal For internal usage only.\n *\n * This hook should be used in a children that are connected with its parent\n * to get the matched default variant and color when the parent's variant and/or color changes.\n *\n * For example, the `Option` component in `Select` component is using this function.\n */\nexport function useVariantColor(instanceVariant, instanceColor) {\n  var alwaysInheritColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var value = React.useContext(VariantColorContext);\n  var _ref = typeof value === 'string' ? value.split(':') : [],\n    _ref2 = _slicedToArray(_ref, 2),\n    variant = _ref2[0],\n    color = _ref2[1];\n  var result = getChildVariantAndColor(variant || undefined, color || undefined);\n  result.variant = instanceVariant || result.variant;\n  result.color = instanceColor || (alwaysInheritColor ? color : result.color);\n  return result;\n}\n\n/**\n * @internal For internal usage only.\n */\nexport function VariantColorProvider(_ref3) {\n  var children = _ref3.children,\n    color = _ref3.color,\n    variant = _ref3.variant;\n  return /*#__PURE__*/_jsx(VariantColorContext.Provider, {\n    value: \"\".concat(variant || '', \":\").concat(color || ''),\n    children: children\n  });\n}","map":null,"metadata":{},"sourceType":"module"}