{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nexport function driver(style, styletron) {\n  var tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\nexport function getInitialStyle() {\n  return {};\n}\nexport function renderDeclarativeRules(style, styletron) {\n  for (var key in style) {\n    var val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes(val);\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        var result = \"\";\n        var _iterator = _createForOfIteratorHelper(val),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var font = _step.value;\n            if (typeof font === \"object\") {\n              result += \"\".concat(styletron.renderFontFace(font), \",\");\n            } else if (typeof font === \"string\") {\n              result += \"\".concat(font, \",\");\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else if (val === void 0) {\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace(val);\n        continue;\n      }\n    }\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules(val, styletron);\n    }\n  }\n  return style;\n}","map":null,"metadata":{},"sourceType":"module"}