{"ast":null,"code":"import _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"cssVarPrefix\", \"breakpoints\", \"spacing\", \"components\", \"variants\", \"colorInversion\", \"shouldSkipGeneratingVar\"],\n  _excluded2 = [\"colorSchemes\"];\nimport { deepmerge } from '@mui/utils';\nimport { createBreakpoints, createSpacing, colorChannel, unstable_prepareCssVars as prepareCssVars, unstable_createGetCssVar as systemCreateGetCssVar, unstable_styleFunctionSx as styleFunctionSx } from '@mui/system';\nimport defaultSxConfig from './sxConfig';\nimport colors from '../colors';\nimport defaultShouldSkipGeneratingVar from './shouldSkipGeneratingVar';\nimport { generateUtilityClass } from '../className';\nimport { createSoftInversion, createSolidInversion, createVariant } from './variantUtils';\n\n// Use Partial2Level instead of PartialDeep because nested value type is CSSObject which does not work with PartialDeep.\n\nexport var createGetCssVar = function createGetCssVar() {\n  var cssVarPrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'joy';\n  return systemCreateGetCssVar(cssVarPrefix);\n};\nexport default function extendTheme(themeOptions) {\n  var _scalesInput$colorSch, _scalesInput$colorSch2, _scalesInput$colorSch3, _scalesInput$colorSch4, _scalesInput$colorSch5, _scalesInput$colorSch6, _scalesInput$focus$th, _scalesInput$focus, _scalesInput$focus$th2, _scalesInput$focus2;\n  var _ref = themeOptions || {},\n    _ref$cssVarPrefix = _ref.cssVarPrefix,\n    cssVarPrefix = _ref$cssVarPrefix === void 0 ? 'joy' : _ref$cssVarPrefix,\n    breakpoints = _ref.breakpoints,\n    spacing = _ref.spacing,\n    componentsInput = _ref.components,\n    variantsInput = _ref.variants,\n    colorInversionInput = _ref.colorInversion,\n    _ref$shouldSkipGenera = _ref.shouldSkipGeneratingVar,\n    shouldSkipGeneratingVar = _ref$shouldSkipGenera === void 0 ? defaultShouldSkipGeneratingVar : _ref$shouldSkipGenera,\n    scalesInput = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var getCssVar = createGetCssVar(cssVarPrefix);\n  var defaultColors = {\n    primary: colors.blue,\n    neutral: colors.grey,\n    danger: colors.red,\n    success: colors.green,\n    warning: colors.yellow,\n    common: {\n      white: '#FFF',\n      black: '#000'\n    }\n  };\n  var getCssVarColor = function getCssVarColor(cssVar) {\n    var _defaultColors$color;\n    var tokens = cssVar.split('-');\n    var color = tokens[1];\n    var index = tokens[2];\n\n    // @ts-ignore\n    return getCssVar(cssVar, (_defaultColors$color = defaultColors[color]) == null ? void 0 : _defaultColors$color[index]);\n  };\n  var createLightModeVariantVariables = function createLightModeVariantVariables(color) {\n    return {\n      plainColor: getCssVarColor(\"palette-\".concat(color, \"-500\")),\n      plainHoverBg: getCssVarColor(\"palette-\".concat(color, \"-100\")),\n      plainActiveBg: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      plainDisabledColor: getCssVarColor(\"palette-neutral-400\"),\n      outlinedColor: getCssVarColor(\"palette-\".concat(color, \"-500\")),\n      outlinedBorder: getCssVarColor(\"palette-\".concat(color, \"-300\")),\n      outlinedHoverBg: getCssVarColor(\"palette-\".concat(color, \"-100\")),\n      outlinedActiveBg: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      outlinedDisabledColor: getCssVarColor(\"palette-neutral-400\"),\n      outlinedDisabledBorder: getCssVarColor(\"palette-neutral-200\"),\n      softColor: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      softBg: getCssVarColor(\"palette-\".concat(color, \"-100\")),\n      softHoverBg: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      softActiveColor: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      softActiveBg: getCssVarColor(\"palette-\".concat(color, \"-300\")),\n      softDisabledColor: getCssVarColor(\"palette-neutral-400\"),\n      softDisabledBg: getCssVarColor(\"palette-neutral-50\"),\n      solidColor: getCssVarColor(\"palette-common-white\"),\n      solidBg: getCssVarColor(\"palette-\".concat(color, \"-500\")),\n      solidHoverBg: getCssVarColor(\"palette-\".concat(color, \"-600\")),\n      solidActiveBg: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      solidDisabledColor: getCssVarColor(\"palette-neutral-400\"),\n      solidDisabledBg: getCssVarColor(\"palette-neutral-100\")\n    };\n  };\n  var createDarkModeVariantVariables = function createDarkModeVariantVariables(color) {\n    return {\n      plainColor: getCssVarColor(\"palette-\".concat(color, \"-300\")),\n      plainHoverBg: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      plainActiveBg: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      plainDisabledColor: getCssVarColor(\"palette-neutral-500\"),\n      outlinedColor: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      outlinedBorder: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      outlinedHoverBg: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      outlinedActiveBg: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      outlinedDisabledColor: getCssVarColor(\"palette-neutral-500\"),\n      outlinedDisabledBorder: getCssVarColor(\"palette-neutral-800\"),\n      softColor: getCssVarColor(\"palette-\".concat(color, \"-200\")),\n      softBg: getCssVarColor(\"palette-\".concat(color, \"-800\")),\n      softHoverBg: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      softActiveColor: getCssVarColor(\"palette-\".concat(color, \"-100\")),\n      softActiveBg: getCssVarColor(\"palette-\".concat(color, \"-600\")),\n      softDisabledColor: getCssVarColor(\"palette-neutral-500\"),\n      softDisabledBg: getCssVarColor(\"palette-neutral-800\"),\n      solidColor: getCssVarColor(\"palette-common-white\"),\n      solidBg: getCssVarColor(\"palette-\".concat(color, \"-500\")),\n      solidHoverBg: getCssVarColor(\"palette-\".concat(color, \"-600\")),\n      solidActiveBg: getCssVarColor(\"palette-\".concat(color, \"-700\")),\n      solidDisabledColor: getCssVarColor(\"palette-neutral-500\"),\n      solidDisabledBg: getCssVarColor(\"palette-neutral-800\")\n    };\n  };\n  var lightColorSystem = {\n    palette: {\n      mode: 'light',\n      primary: _extends({}, defaultColors.primary, createLightModeVariantVariables('primary')),\n      neutral: _extends({}, defaultColors.neutral, createLightModeVariantVariables('neutral'), {\n        plainColor: getCssVarColor('palette-neutral-700'),\n        plainHoverColor: getCssVarColor(\"palette-neutral-900\"),\n        outlinedColor: getCssVarColor('palette-neutral-700')\n      }),\n      danger: _extends({}, defaultColors.danger, createLightModeVariantVariables('danger')),\n      success: _extends({}, defaultColors.success, createLightModeVariantVariables('success')),\n      warning: _extends({}, defaultColors.warning, createLightModeVariantVariables('warning')),\n      common: {\n        white: '#FFF',\n        black: '#000'\n      },\n      text: {\n        primary: getCssVarColor('palette-neutral-800'),\n        secondary: getCssVarColor('palette-neutral-700'),\n        tertiary: getCssVarColor('palette-neutral-600'),\n        icon: getCssVarColor('palette-neutral-500')\n      },\n      background: {\n        body: getCssVarColor('palette-common-white'),\n        surface: getCssVarColor('palette-neutral-50'),\n        popup: getCssVarColor('palette-common-white'),\n        level1: getCssVarColor('palette-neutral-100'),\n        level2: getCssVarColor('palette-neutral-200'),\n        level3: getCssVarColor('palette-neutral-300'),\n        tooltip: getCssVarColor('palette-neutral-500'),\n        backdrop: \"rgba(\".concat(getCssVar('palette-neutral-darkChannel', colorChannel(defaultColors.neutral[900]) // should be the same index as in `attachColorChannels`\n        ), \" / 0.25)\")\n      },\n      divider: \"rgba(\".concat(getCssVar('palette-neutral-mainChannel', colorChannel(defaultColors.neutral[500]) // should be the same index as in `attachColorChannels`\n      ), \" / 0.2)\"),\n      focusVisible: getCssVarColor('palette-primary-500')\n    },\n    shadowRing: '0 0 #000',\n    shadowChannel: '21 21 21',\n    shadowOpacity: '0.08'\n  };\n  var darkColorSystem = {\n    palette: {\n      mode: 'dark',\n      primary: _extends({}, defaultColors.primary, createDarkModeVariantVariables('primary')),\n      neutral: _extends({}, defaultColors.neutral, createDarkModeVariantVariables('neutral'), {\n        plainColor: getCssVarColor('palette-neutral-300'),\n        plainHoverColor: getCssVarColor(\"palette-neutral-300\")\n      }),\n      danger: _extends({}, defaultColors.danger, createDarkModeVariantVariables('danger')),\n      success: _extends({}, defaultColors.success, createDarkModeVariantVariables('success')),\n      warning: _extends({}, defaultColors.warning, createDarkModeVariantVariables('warning')),\n      common: {\n        white: '#FFF',\n        black: '#000'\n      },\n      text: {\n        primary: getCssVarColor('palette-neutral-100'),\n        secondary: getCssVarColor('palette-neutral-300'),\n        tertiary: getCssVarColor('palette-neutral-400'),\n        icon: getCssVarColor('palette-neutral-400')\n      },\n      background: {\n        body: getCssVarColor('palette-common-black'),\n        surface: getCssVarColor('palette-neutral-900'),\n        popup: getCssVarColor('palette-common-black'),\n        level1: getCssVarColor('palette-neutral-800'),\n        level2: getCssVarColor('palette-neutral-700'),\n        level3: getCssVarColor('palette-neutral-600'),\n        tooltip: getCssVarColor('palette-neutral-600'),\n        backdrop: \"rgba(\".concat(getCssVar('palette-neutral-darkChannel', colorChannel(defaultColors.neutral[50]) // should be the same index as in `attachColorChannels`\n        ), \" / 0.25)\")\n      },\n      divider: \"rgba(\".concat(getCssVar('palette-neutral-mainChannel', colorChannel(defaultColors.neutral[500]) // should be the same index as in `attachColorChannels`\n      ), \" / 0.16)\"),\n      focusVisible: getCssVarColor('palette-primary-500')\n    },\n    shadowRing: '0 0 #000',\n    shadowChannel: '0 0 0',\n    shadowOpacity: '0.6'\n  };\n  var fontFamilyFallback = '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"';\n  var fontFamily = _extends({\n    body: \"\\\"Inter\\\", \".concat(getCssVar(\"fontFamily-fallback, \".concat(fontFamilyFallback))),\n    display: \"\\\"Inter\\\", \".concat(getCssVar(\"fontFamily-fallback, \".concat(fontFamilyFallback))),\n    code: 'Source Code Pro,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace',\n    fallback: fontFamilyFallback\n  }, scalesInput.fontFamily);\n  var fontWeight = _extends({\n    sm: 300,\n    // regular\n    md: 500,\n    // medium\n    lg: 600,\n    // semi-bold\n    xl: 700\n  }, scalesInput.fontWeight);\n  var fontSize = _extends({\n    xs: '0.75rem',\n    // 12px\n    sm: '0.875rem',\n    // 14px\n    md: '1rem',\n    // 16px\n    lg: '1.125rem',\n    // 18px\n    xl: '1.25rem',\n    // 20px\n    xl2: '1.5rem',\n    // 24px\n    xl3: '1.875rem',\n    // 30px\n    xl4: '2.25rem'\n  }, scalesInput.fontSize);\n  var lineHeight = _extends({\n    xs: '1.33334',\n    // largest font sizes: h1, h2\n    sm: '1.42858',\n    // normal font sizes\n    md: '1.5',\n    // normal font sizes\n    lg: '1.55556',\n    // large font sizes for components\n    xl: '1.66667'\n  }, scalesInput.lineHeight);\n  var defaultShadowRing = (_scalesInput$colorSch = (_scalesInput$colorSch2 = scalesInput.colorSchemes) == null || (_scalesInput$colorSch2 = _scalesInput$colorSch2.light) == null ? void 0 : _scalesInput$colorSch2.shadowRing) != null ? _scalesInput$colorSch : lightColorSystem.shadowRing;\n  var defaultShadowChannel = (_scalesInput$colorSch3 = (_scalesInput$colorSch4 = scalesInput.colorSchemes) == null || (_scalesInput$colorSch4 = _scalesInput$colorSch4.light) == null ? void 0 : _scalesInput$colorSch4.shadowChannel) != null ? _scalesInput$colorSch3 : lightColorSystem.shadowChannel;\n  var defaultShadowOpacity = (_scalesInput$colorSch5 = (_scalesInput$colorSch6 = scalesInput.colorSchemes) == null || (_scalesInput$colorSch6 = _scalesInput$colorSch6.light) == null ? void 0 : _scalesInput$colorSch6.shadowOpacity) != null ? _scalesInput$colorSch5 : lightColorSystem.shadowOpacity;\n  var defaultScales = {\n    colorSchemes: {\n      light: lightColorSystem,\n      dark: darkColorSystem\n    },\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n    focus: {\n      thickness: '2px',\n      selector: \"&.\".concat(generateUtilityClass('', 'focusVisible'), \", &:focus-visible\"),\n      default: {\n        outlineOffset: \"var(--focus-outline-offset, \".concat(getCssVar('focus-thickness', (_scalesInput$focus$th = (_scalesInput$focus = scalesInput.focus) == null ? void 0 : _scalesInput$focus.thickness) != null ? _scalesInput$focus$th : '2px'), \")\"),\n        outline: \"\".concat(getCssVar('focus-thickness', (_scalesInput$focus$th2 = (_scalesInput$focus2 = scalesInput.focus) == null ? void 0 : _scalesInput$focus2.thickness) != null ? _scalesInput$focus$th2 : '2px'), \" solid \").concat(getCssVar('palette-focusVisible', defaultColors.primary[500]))\n      }\n    },\n    lineHeight: lineHeight,\n    radius: {\n      xs: '2px',\n      sm: '6px',\n      md: '8px',\n      lg: '12px',\n      xl: '16px'\n    },\n    shadow: {\n      xs: \"\".concat(getCssVar('shadowRing', defaultShadowRing), \", 0px 1px 2px 0px rgba(\").concat(getCssVar('shadowChannel', defaultShadowChannel), \" / \").concat(getCssVar('shadowOpacity', defaultShadowOpacity), \")\"),\n      sm: \"\".concat(getCssVar('shadowRing', defaultShadowRing), \", 0px 1px 2px 0px rgba(\").concat(getCssVar('shadowChannel', defaultShadowChannel), \" / \").concat(getCssVar('shadowOpacity', defaultShadowOpacity), \"), 0px 2px 4px 0px rgba(\").concat(getCssVar('shadowChannel', defaultShadowChannel), \" / \").concat(getCssVar('shadowOpacity', defaultShadowOpacity), \")\"),\n      md: \"\".concat(getCssVar('shadowRing', defaultShadowRing), \", 0px 2px 8px -2px rgba(\").concat(getCssVar('shadowChannel', defaultShadowChannel), \" / \").concat(getCssVar('shadowOpacity', defaultShadowOpacity), \"), 0px 6px 12px -2px rgba(\").concat(getCssVar('shadowChannel', defaultShadowChannel), \" / \").concat(getCssVar('shadowOpacity', defaultShadowOpacity), \")\"),\n      lg: \"\".concat(getCssVar('shadowRing', defaultShadowRing), \", 0px 2px 8px -2px rgba(\").concat(getCssVar('shadowChannel', defaultShadowChannel), \" / \").concat(getCssVar('shadowOpacity', defaultShadowOpacity), \"), 0px 12px 16px -4px rgba(\").concat(getCssVar('shadowChannel', defaultShadowChannel), \" / \").concat(getCssVar('shadowOpacity', defaultShadowOpacity), \")\"),\n      xl: \"\".concat(getCssVar('shadowRing', defaultShadowRing), \", 0px 2px 8px -2px rgba(\").concat(getCssVar('shadowChannel', defaultShadowChannel), \" / \").concat(getCssVar('shadowOpacity', defaultShadowOpacity), \"), 0px 20px 24px -4px rgba(\").concat(getCssVar('shadowChannel', defaultShadowChannel), \" / \").concat(getCssVar('shadowOpacity', defaultShadowOpacity), \")\")\n    },\n    zIndex: {\n      badge: 1,\n      table: 10,\n      popup: 1000,\n      modal: 1300,\n      tooltip: 1500\n    },\n    typography: {\n      h1: {\n        fontFamily: getCssVar(\"fontFamily-display, \".concat(fontFamily.display)),\n        fontWeight: getCssVar(\"fontWeight-xl, \".concat(fontWeight.xl)),\n        fontSize: getCssVar(\"fontSize-xl4, \".concat(fontSize.xl4)),\n        lineHeight: getCssVar(\"lineHeight-xs, \".concat(lineHeight.xs)),\n        letterSpacing: '-0.025em',\n        color: getCssVar(\"palette-text-primary, \".concat(lightColorSystem.palette.text.primary))\n      },\n      h2: {\n        fontFamily: getCssVar(\"fontFamily-display, \".concat(fontFamily.display)),\n        fontWeight: getCssVar(\"fontWeight-xl, \".concat(fontWeight.xl)),\n        fontSize: getCssVar(\"fontSize-xl3, \".concat(fontSize.xl3)),\n        lineHeight: getCssVar(\"lineHeight-xs, \".concat(lineHeight.xs)),\n        letterSpacing: '-0.025em',\n        color: getCssVar(\"palette-text-primary, \".concat(lightColorSystem.palette.text.primary))\n      },\n      h3: {\n        fontFamily: getCssVar(\"fontFamily-display, \".concat(fontFamily.display)),\n        fontWeight: getCssVar(\"fontWeight-lg, \".concat(fontWeight.lg)),\n        fontSize: getCssVar(\"fontSize-xl2, \".concat(fontSize.xl2)),\n        lineHeight: getCssVar(\"lineHeight-xs, \".concat(lineHeight.xs)),\n        letterSpacing: '-0.025em',\n        color: getCssVar(\"palette-text-primary, \".concat(lightColorSystem.palette.text.primary))\n      },\n      h4: {\n        fontFamily: getCssVar(\"fontFamily-display, \".concat(fontFamily.display)),\n        fontWeight: getCssVar(\"fontWeight-lg, \".concat(fontWeight.lg)),\n        fontSize: getCssVar(\"fontSize-xl, \".concat(fontSize.xl)),\n        lineHeight: getCssVar(\"lineHeight-md, \".concat(lineHeight.md)),\n        letterSpacing: '-0.025em',\n        color: getCssVar(\"palette-text-primary, \".concat(lightColorSystem.palette.text.primary))\n      },\n      'title-lg': {\n        fontFamily: getCssVar(\"fontFamily-body, \".concat(fontFamily.body)),\n        fontWeight: getCssVar(\"fontWeight-lg, \".concat(fontWeight.lg)),\n        fontSize: getCssVar(\"fontSize-lg, \".concat(fontSize.lg)),\n        lineHeight: getCssVar(\"lineHeight-xs, \".concat(lineHeight.xs)),\n        color: getCssVar(\"palette-text-primary, \".concat(lightColorSystem.palette.text.primary))\n      },\n      'title-md': {\n        fontFamily: getCssVar(\"fontFamily-body, \".concat(fontFamily.body)),\n        fontWeight: getCssVar(\"fontWeight-md, \".concat(fontWeight.md)),\n        fontSize: getCssVar(\"fontSize-md, \".concat(fontSize.md)),\n        lineHeight: getCssVar(\"lineHeight-md, \".concat(lineHeight.md)),\n        color: getCssVar(\"palette-text-primary, \".concat(lightColorSystem.palette.text.primary))\n      },\n      'title-sm': {\n        fontFamily: getCssVar(\"fontFamily-body, \".concat(fontFamily.body)),\n        fontWeight: getCssVar(\"fontWeight-md, \".concat(fontWeight.md)),\n        fontSize: getCssVar(\"fontSize-sm, \".concat(fontSize.sm)),\n        lineHeight: getCssVar(\"lineHeight-sm, \".concat(lineHeight.sm)),\n        color: getCssVar(\"palette-text-primary, \".concat(lightColorSystem.palette.text.primary))\n      },\n      'body-lg': {\n        fontFamily: getCssVar(\"fontFamily-body, \".concat(fontFamily.body)),\n        fontSize: getCssVar(\"fontSize-lg, \".concat(fontSize.lg)),\n        lineHeight: getCssVar(\"lineHeight-md, \".concat(lineHeight.md)),\n        color: getCssVar(\"palette-text-secondary, \".concat(lightColorSystem.palette.text.secondary))\n      },\n      'body-md': {\n        fontFamily: getCssVar(\"fontFamily-body, \".concat(fontFamily.body)),\n        fontSize: getCssVar(\"fontSize-md, \".concat(fontSize.md)),\n        lineHeight: getCssVar(\"lineHeight-md, \".concat(lineHeight.md)),\n        color: getCssVar(\"palette-text-secondary, \".concat(lightColorSystem.palette.text.secondary))\n      },\n      'body-sm': {\n        fontFamily: getCssVar(\"fontFamily-body, \".concat(fontFamily.body)),\n        fontSize: getCssVar(\"fontSize-sm, \".concat(fontSize.sm)),\n        lineHeight: getCssVar(\"lineHeight-md, \".concat(lineHeight.md)),\n        color: getCssVar(\"palette-text-tertiary, \".concat(lightColorSystem.palette.text.tertiary))\n      },\n      'body-xs': {\n        fontFamily: getCssVar(\"fontFamily-body, \".concat(fontFamily.body)),\n        fontWeight: getCssVar(\"fontWeight-md, \".concat(fontWeight.md)),\n        fontSize: getCssVar(\"fontSize-xs, \".concat(fontSize.xs)),\n        lineHeight: getCssVar(\"lineHeight-md, \".concat(lineHeight.md)),\n        color: getCssVar(\"palette-text-tertiary, \".concat(lightColorSystem.palette.text.tertiary))\n      }\n    }\n  };\n  var _ref2 = scalesInput ? deepmerge(defaultScales, scalesInput) : defaultScales,\n    colorSchemes = _ref2.colorSchemes,\n    mergedScales = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n  var theme = _extends({\n    colorSchemes: colorSchemes\n  }, mergedScales, {\n    breakpoints: createBreakpoints(breakpoints != null ? breakpoints : {}),\n    components: deepmerge({\n      // TODO: find a way to abstract SvgIcon out of @mui/material\n      MuiSvgIcon: {\n        defaultProps: {\n          fontSize: 'xl2'\n        },\n        styleOverrides: {\n          root: function root(_ref3) {\n            var ownerState = _ref3.ownerState,\n              themeProp = _ref3.theme;\n            var _themeProp$vars$palet;\n            var instanceFontSize = ownerState.instanceFontSize;\n            return _extends({\n              margin: 'var(--Icon-margin)'\n            }, ownerState.fontSize && ownerState.fontSize !== 'inherit' && {\n              fontSize: \"var(--Icon-fontSize, \".concat(themeProp.vars.fontSize[ownerState.fontSize], \")\")\n            }, !ownerState.htmlColor && _extends({\n              color: \"var(--Icon-color, \".concat(theme.vars.palette.text.icon, \")\")\n            }, ownerState.color && ownerState.color !== 'inherit' && ownerState.color !== 'context' && themeProp.vars.palette[ownerState.color] && {\n              color: \"rgba(\".concat((_themeProp$vars$palet = themeProp.vars.palette[ownerState.color]) == null ? void 0 : _themeProp$vars$palet.mainChannel, \" / 1)\")\n            }, ownerState.color === 'context' && {\n              color: themeProp.vars.palette.text.secondary\n            }), instanceFontSize && instanceFontSize !== 'inherit' && {\n              '--Icon-fontSize': themeProp.vars.fontSize[instanceFontSize]\n            });\n          }\n        }\n      }\n    }, componentsInput),\n    cssVarPrefix: cssVarPrefix,\n    getCssVar: getCssVar,\n    spacing: createSpacing(spacing),\n    colorInversionConfig: {\n      soft: ['plain', 'outlined', 'soft', 'solid'],\n      solid: ['plain', 'outlined', 'soft', 'solid']\n    }\n  }); // Need type casting due to module augmentation inside the repo\n\n  /**\n   Color channels generation\n  */\n  function attachColorChannels(supportedColorScheme, palette) {\n    Object.keys(palette).forEach(function (key) {\n      var channelMapping = {\n        main: '500',\n        light: '200',\n        dark: '700'\n      };\n      if (supportedColorScheme === 'dark') {\n        // @ts-ignore internal\n        channelMapping.main = 400;\n      }\n      if (!palette[key].mainChannel && palette[key][channelMapping.main]) {\n        palette[key].mainChannel = colorChannel(palette[key][channelMapping.main]);\n      }\n      if (!palette[key].lightChannel && palette[key][channelMapping.light]) {\n        palette[key].lightChannel = colorChannel(palette[key][channelMapping.light]);\n      }\n      if (!palette[key].darkChannel && palette[key][channelMapping.dark]) {\n        palette[key].darkChannel = colorChannel(palette[key][channelMapping.dark]);\n      }\n    });\n  }\n  // Set the channels\n  Object.entries(theme.colorSchemes).forEach(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      supportedColorScheme = _ref5[0],\n      colorSystem = _ref5[1];\n    attachColorChannels(supportedColorScheme, colorSystem.palette);\n  });\n\n  // ===============================================================\n  // Create `theme.vars` that contain `var(--*)` as values\n  // ===============================================================\n  var parserConfig = {\n    prefix: cssVarPrefix,\n    shouldSkipGeneratingVar: shouldSkipGeneratingVar\n  };\n  var _prepareCssVars = prepareCssVars(\n    // @ts-ignore property truDark is missing from colorSchemes\n    _extends({\n      colorSchemes: colorSchemes\n    }, mergedScales), parserConfig),\n    themeVars = _prepareCssVars.vars,\n    generateCssVars = _prepareCssVars.generateCssVars;\n  theme.vars = themeVars;\n  theme.generateCssVars = generateCssVars;\n  theme.unstable_sxConfig = _extends({}, defaultSxConfig, themeOptions == null ? void 0 : themeOptions.unstable_sxConfig);\n  theme.unstable_sx = function sx(props) {\n    return styleFunctionSx({\n      sx: props,\n      theme: this\n    });\n  };\n  theme.getColorSchemeSelector = function (colorScheme) {\n    return colorScheme === 'light' ? '&' : \"&[data-joy-color-scheme=\\\"\".concat(colorScheme, \"\\\"], [data-joy-color-scheme=\\\"\").concat(colorScheme, \"\\\"] &\");\n  };\n  var createVariantInput = {\n    getCssVar: getCssVar,\n    palette: theme.colorSchemes.light.palette\n  };\n  theme.variants = deepmerge({\n    plain: createVariant('plain', createVariantInput),\n    plainHover: createVariant('plainHover', createVariantInput),\n    plainActive: createVariant('plainActive', createVariantInput),\n    plainDisabled: createVariant('plainDisabled', createVariantInput),\n    outlined: createVariant('outlined', createVariantInput),\n    outlinedHover: createVariant('outlinedHover', createVariantInput),\n    outlinedActive: createVariant('outlinedActive', createVariantInput),\n    outlinedDisabled: createVariant('outlinedDisabled', createVariantInput),\n    soft: createVariant('soft', createVariantInput),\n    softHover: createVariant('softHover', createVariantInput),\n    softActive: createVariant('softActive', createVariantInput),\n    softDisabled: createVariant('softDisabled', createVariantInput),\n    solid: createVariant('solid', createVariantInput),\n    solidHover: createVariant('solidHover', createVariantInput),\n    solidActive: createVariant('solidActive', createVariantInput),\n    solidDisabled: createVariant('solidDisabled', createVariantInput)\n  }, variantsInput);\n  theme.palette = _extends({}, theme.colorSchemes.light.palette, {\n    colorScheme: 'light'\n  });\n  theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar;\n\n  // @ts-ignore if the colorInversion is provided as callbacks, it needs to be resolved in the CssVarsProvider\n  theme.colorInversion = typeof colorInversionInput === 'function' ? colorInversionInput : deepmerge({\n    soft: createSoftInversion(theme, true),\n    solid: createSolidInversion(theme, true)\n  }, colorInversionInput || {}, {\n    clone: false\n  });\n  return theme;\n}","map":null,"metadata":{},"sourceType":"module"}