{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { DropdownActionTypes } from '../useDropdown/useDropdown.types';\nimport { useButton } from '../useButton/useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuButton API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-button)\n */\nexport function useMenuButton() {\n  var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _parameters$disabled = parameters.disabled,\n    disabled = _parameters$disabled === void 0 ? false : _parameters$disabled,\n    focusableWhenDisabled = parameters.focusableWhenDisabled,\n    externalRef = parameters.rootRef;\n  var menuContext = React.useContext(DropdownContext);\n  if (menuContext === null) {\n    throw new Error('useMenuButton: no menu context available.');\n  }\n  var state = menuContext.state,\n    dispatch = menuContext.dispatch,\n    registerTrigger = menuContext.registerTrigger,\n    popupId = menuContext.popupId;\n  var _useButton = useButton({\n      disabled: disabled,\n      focusableWhenDisabled: focusableWhenDisabled,\n      rootRef: externalRef\n    }),\n    getButtonRootProps = _useButton.getRootProps,\n    buttonRootRef = _useButton.rootRef,\n    active = _useButton.active;\n  var handleRef = useForkRef(buttonRootRef, registerTrigger);\n  var createHandleClick = function createHandleClick(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onClic;\n      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n      dispatch({\n        type: DropdownActionTypes.toggle,\n        event: event\n      });\n    };\n  };\n  var createHandleKeyDown = function createHandleKeyDown(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyD;\n      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        event.preventDefault();\n        dispatch({\n          type: DropdownActionTypes.open,\n          event: event\n        });\n      }\n    };\n  };\n  var getOwnRootProps = function getOwnRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onClick: createHandleClick(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers)\n    };\n  };\n  var getRootProps = function getRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var getCombinedProps = combineHooksSlotProps(getButtonRootProps, getOwnRootProps);\n    return _extends({}, getCombinedProps(otherHandlers), {\n      'aria-haspopup': 'menu',\n      'aria-expanded': state.open,\n      'aria-controls': popupId,\n      ref: handleRef\n    });\n  };\n  return {\n    active: active,\n    getRootProps: getRootProps,\n    open: state.open,\n    rootRef: handleRef\n  };\n}","map":null,"metadata":{},"sourceType":"module"}