{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _ClearIcon, _ArrowDropDownIcon;\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"clearOnBlur\", \"clearOnEscape\", \"defaultValue\", \"disableCloseOnSelect\", \"disabledItemsFocusable\", \"disableListWrap\", \"filterSelectedOptions\", \"handleHomeEndKeys\", \"includeInputInList\", \"openOnFocus\", \"selectOnFocus\"],\n  _excluded2 = [\"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"autoFocus\", \"clearIcon\", \"clearText\", \"closeText\", \"disableClearable\", \"disabled\", \"endDecorator\", \"error\", \"filterOptions\", \"forcePopupIcon\", \"freeSolo\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"id\", \"inputValue\", \"limitTags\", \"loading\", \"loadingText\", \"multiple\", \"name\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openText\", \"options\", \"placeholder\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderOption\", \"renderTags\", \"required\", \"type\", \"startDecorator\", \"size\", \"color\", \"variant\", \"value\", \"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"onDelete\"],\n  _excluded4 = [\"onBlur\", \"onFocus\", \"onMouseDown\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType, unstable_useForkRef as useForkRef, unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { useAutocomplete } from '@mui/base/useAutocomplete';\nimport { Popper } from '@mui/base/Popper';\nimport { useThemeProps } from '../styles';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport styled from '../styles/styled';\nimport { VariantColorProvider, getChildVariantAndColor } from '../styles/variantColorInheritance';\n// slot components\nimport { StyledIconButton } from '../IconButton/IconButton';\n// default render components\nimport Chip from '../Chip';\nimport ChipDelete from '../ChipDelete';\nimport { StyledInputRoot, StyledInputHtml, StyledInputStartDecorator, StyledInputEndDecorator } from '../Input/Input';\nimport List from '../List';\nimport ListProvider from '../List/ListProvider';\nimport ListSubheader from '../ListSubheader';\nimport ListItem from '../ListItem';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport { StyledAutocompleteListbox } from '../AutocompleteListbox/AutocompleteListbox';\nimport { StyledAutocompleteOption } from '../AutocompleteOption/AutocompleteOption';\nimport useSlot from '../utils/useSlot';\nimport ColorInversion, { useColorInversion } from '../styles/ColorInversion';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.contains(document.activeElement);\n// @ts-ignore\nconst defaultGetOptionLabel = option => {\n  var _option$label;\n  return (_option$label = option.label) != null ? _option$label : option;\n};\nconst defaultLimitTagsText = more => `+${more}`;\nconst defaultRenderGroup = params => /*#__PURE__*/_jsxs(ListItem, {\n  nested: true,\n  children: [/*#__PURE__*/_jsx(ListSubheader, {\n    sticky: true,\n    children: params.group\n  }), /*#__PURE__*/_jsx(List, {\n    children: params.children\n  })]\n}, params.key);\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    focused,\n    hasClearIcon,\n    hasPopupIcon,\n    popupOpen,\n    variant,\n    color,\n    size,\n    multiple\n  } = ownerState;\n  const slots = {\n    root: ['root', focused && 'focused', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],\n    wrapper: ['wrapper', multiple && 'multiple'],\n    input: ['input'],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen', disabled && 'disabled'],\n    listbox: ['listbox'],\n    option: ['option'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    limitTag: ['limitTag']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, {});\n};\nconst AutocompleteRoot = styled(StyledInputRoot, {\n  name: 'JoyAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  ownerState\n}) => _extends({}, ownerState.size === 'sm' && {\n  '--Autocomplete-wrapperGap': '3px'\n}, ownerState.size === 'md' && {\n  '--Autocomplete-wrapperGap': '3px'\n}, ownerState.size === 'lg' && {\n  '--Autocomplete-wrapperGap': '4px'\n}, {\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, ownerState.multiple && !ownerState.startDecorator && {\n  paddingInlineStart: 0\n}));\n\n/**\r\n * Wrapper groups the chips (multi selection) and the input\r\n * so that start/end decorators can stay in the normal flow.\r\n */\nconst AutocompleteWrapper = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'Wrapper',\n  overridesResolver: (props, styles) => styles.wrapper\n})(({\n  ownerState\n}) => ({\n  flex: 1,\n  // stretch to fill the root slot\n  minWidth: 0,\n  // won't push end decorator out of the autocomplete\n  display: 'flex',\n  alignItems: 'center',\n  flexWrap: 'wrap',\n  gap: 'var(--Autocomplete-wrapperGap)',\n  [`&.${autocompleteClasses.multiple}`]: _extends({\n    paddingBlock: 'var(--Autocomplete-wrapperGap)'\n  }, !ownerState.startDecorator && {\n    paddingInlineStart: 'var(--Autocomplete-wrapperGap)'\n  }, !ownerState.endDecorator && {\n    paddingInlineEnd: 'var(--Autocomplete-wrapperGap)'\n  })\n}));\nconst AutocompleteInput = styled(StyledInputHtml, {\n  name: 'JoyAutocomplete',\n  slot: 'Input',\n  overridesResolver: (props, styles) => styles.input\n})(({\n  ownerState\n}) => _extends({\n  minWidth: 30,\n  minHeight: 'var(--Chip-minHeight)'\n}, ownerState.multiple && {\n  marginInlineStart: 'calc(var(--Autocomplete-wrapperGap) * 2.5)'\n}));\nconst AutocompleteStartDecorator = styled(StyledInputStartDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'StartDecorator',\n  overridesResolver: (props, styles) => styles.startDecorator\n})({});\nconst AutocompleteEndDecorator = styled(StyledInputEndDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'EndDecorator',\n  overridesResolver: (props, styles) => styles.endDecorator\n})(({\n  ownerState\n}) => _extends({}, (ownerState.hasClearIcon || ownerState.hasPopupIcon) && {\n  '--Button-margin': '0px',\n  '--IconButton-margin': '0px',\n  '--Icon-margin': '0px'\n}));\nconst AutocompleteClearIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})(({\n  ownerState\n}) => _extends({\n  alignSelf: 'center'\n}, !ownerState.hasPopupIcon && {\n  marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)'\n}, {\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  visibility: ownerState.focused ? 'visible' : 'hidden'\n}));\nconst AutocompletePopupIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (props, styles) => styles.popupIndicator\n})({\n  alignSelf: 'center',\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)',\n  [`&.${autocompleteClasses.popupIndicatorOpen}`]: {\n    transform: 'rotate(180deg)',\n    '--Icon-color': 'currentColor'\n  }\n});\nconst AutocompleteListbox = styled(StyledAutocompleteListbox, {\n  name: 'JoyAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  // `unstable_popup-zIndex` is a private variable that lets other component, e.g. Modal, to override the z-index so that the listbox can be displayed above the Modal.\n  zIndex: `var(--unstable_popup-zIndex, ${theme.vars.zIndex.popup})`\n}));\nconst AutocompleteOption = styled(StyledAutocompleteOption, {\n  name: 'JoyAutocomplete',\n  slot: 'Option',\n  overridesResolver: (props, styles) => styles.option\n})({});\nconst AutocompleteLoading = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary\n}));\nconst AutocompleteNoOptions = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary\n}));\nconst AutocompleteLimitTag = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})({\n  marginInlineStart: 'calc(var(--Input-paddingInline) / 2)',\n  marginBlockStart: 'var(--_Input-paddingBlock)'\n});\nconst excludeUseAutocompleteParams = _ref => {\n  let other = _objectWithoutPropertiesLoose(_ref, _excluded);\n  return other;\n};\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Autocomplete](https://mui.com/joy-ui/react-autocomplete/)\r\n *\r\n * API:\r\n *\r\n * - [Autocomplete API](https://mui.com/joy-ui/api/autocomplete/)\r\n */\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _ref2, _inProps$error, _ref3, _inProps$size, _inProps$color, _formControl$color, _ref4;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyAutocomplete'\n  });\n  const {\n      'aria-describedby': ariaDescribedby,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      autoFocus,\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n        fontSize: \"md\"\n      })),\n      clearText = 'Clear',\n      closeText = 'Close',\n      disableClearable = false,\n      disabled: disabledProp,\n      endDecorator,\n      error: errorProp = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      getLimitTagsText = defaultLimitTagsText,\n      getOptionLabel = defaultGetOptionLabel,\n      groupBy,\n      id,\n      limitTags = -1,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      name,\n      noOptionsText = 'No options',\n      openText = 'Open',\n      placeholder,\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n      readOnly = false,\n      renderGroup = defaultRenderGroup,\n      renderOption: renderOptionProp,\n      renderTags,\n      required,\n      type,\n      startDecorator,\n      size: sizeProp = 'md',\n      color: colorProp = 'neutral',\n      variant = 'outlined',\n      component,\n      slots = {},\n      slotProps = {}\n    } = props,\n    otherProps = _objectWithoutPropertiesLoose(props, _excluded2);\n  const other = excludeUseAutocompleteParams(otherProps);\n  const {\n    getColor\n  } = useColorInversion(variant);\n  const formControl = React.useContext(FormControlContext);\n  const error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;\n  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;\n  const rootColor = (_inProps$color = inProps.color) != null ? _inProps$color : error ? 'danger' : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp;\n  const color = getColor(inProps.color, rootColor);\n  const disabled = (_ref4 = disabledProp != null ? disabledProp : formControl == null ? void 0 : formControl.disabled) != null ? _ref4 : false;\n  const {\n    getRootProps,\n    getInputProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,\n    componentName: 'Autocomplete',\n    unstable_classNamePrefix: 'Mui',\n    unstable_isActiveElementInListbox: defaultIsActiveElementInListbox\n  }));\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    onClick: handleRootOnClick\n  } = getRootProps();\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = _extends({}, props, {\n    value,\n    disabled,\n    focused,\n    getOptionLabel,\n    hasOptions: !!groupedOptions.length,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size,\n    color,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  let selectedOptions;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => {\n      const _getTagProps = getTagProps(params),\n        {\n          onDelete\n        } = _getTagProps,\n        tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded3);\n      return _extends({\n        disabled,\n        size,\n        onClick: onDelete\n      }, tagProps);\n    };\n    if (renderTags) {\n      selectedOptions = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      selectedOptions = value.map((option, index) => {\n        return /*#__PURE__*/_jsx(Chip, {\n          size: size,\n          variant: \"soft\",\n          color: color === 'context' ? undefined : 'neutral',\n          endDecorator: /*#__PURE__*/_jsx(ChipDelete, _extends({}, getCustomizedTagProps({\n            index\n          }))),\n          children: getOptionLabel(option)\n        }, index);\n      });\n    }\n  }\n  const rootRef = useForkRef(ref, setAnchorEl);\n  const rootStateClasses = {\n    [autocompleteClasses.disabled]: disabled,\n    [autocompleteClasses.error]: error,\n    [autocompleteClasses.focused]: focused,\n    [autocompleteClasses.formControl]: Boolean(formControl)\n  };\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref: rootRef,\n    className: [classes.root, rootStateClasses],\n    elementType: AutocompleteRoot,\n    externalForwardedProps,\n    ownerState,\n    getSlotProps: getRootProps,\n    additionalProps: {\n      onClick: event => {\n        if (handleRootOnClick) {\n          handleRootOnClick(event);\n        }\n        if (event.currentTarget === event.target && handleInputMouseDown) {\n          handleInputMouseDown(event);\n        }\n      }\n    }\n  });\n  const [SlotWrapper, wrapperProps] = useSlot('wrapper', {\n    className: classes.wrapper,\n    elementType: AutocompleteWrapper,\n    externalForwardedProps,\n    ownerState\n  });\n  const inputStateClasses = {\n    [autocompleteClasses.disabled]: disabled\n  };\n  const [SlotInput, inputProps] = useSlot('input', {\n    className: [classes.input, inputStateClasses],\n    elementType: AutocompleteInput,\n    getSlotProps: handlers => {\n      const _getInputProps = getInputProps(),\n        {\n          onBlur,\n          onFocus,\n          onMouseDown\n        } = _getInputProps,\n        inputSlotProps = _objectWithoutPropertiesLoose(_getInputProps, _excluded4);\n      return _extends({}, inputSlotProps, {\n        onBlur: event => {\n          var _handlers$onBlur;\n          onBlur == null || onBlur(event);\n          (_handlers$onBlur = handlers.onBlur) == null || _handlers$onBlur.call(handlers, event);\n        },\n        onFocus: event => {\n          var _handlers$onFocus;\n          onFocus == null || onFocus(event);\n          (_handlers$onFocus = handlers.onFocus) == null || _handlers$onFocus.call(handlers, event);\n        },\n        onMouseDown: event => {\n          var _handlers$onMouseDown;\n          onMouseDown == null || onMouseDown(event);\n          (_handlers$onMouseDown = handlers.onMouseDown) == null || _handlers$onMouseDown.call(handlers, event);\n        }\n      });\n    },\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      autoFocus,\n      placeholder,\n      name,\n      readOnly,\n      disabled,\n      required: required != null ? required : formControl == null ? void 0 : formControl.required,\n      type,\n      'aria-invalid': error || undefined,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-describedby': ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl['aria-describedby']\n    }\n  });\n  const [SlotStartDecorator, startDecoratorProps] = useSlot('startDecorator', {\n    className: classes.startDecorator,\n    elementType: AutocompleteStartDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotEndDecorator, endDecoratorProps] = useSlot('endDecorator', {\n    className: classes.endDecorator,\n    elementType: AutocompleteEndDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotClearIndicator, clearIndicatorProps] = useSlot('clearIndicator', {\n    className: classes.clearIndicator,\n    elementType: AutocompleteClearIndicator,\n    getSlotProps: getClearProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n      disableColorInversion: !!inProps.color\n    }),\n    additionalProps: {\n      'aria-label': clearText,\n      title: clearText\n    }\n  });\n  const [SlotPopupIndicator, popupIndicatorProps] = useSlot('popupIndicator', {\n    className: classes.popupIndicator,\n    elementType: AutocompletePopupIndicator,\n    getSlotProps: getPopupIndicatorProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n      disableColorInversion: !!inProps.color\n    }),\n    additionalProps: {\n      disabled,\n      'aria-label': popupOpen ? closeText : openText,\n      title: popupOpen ? closeText : openText,\n      type: 'button'\n    }\n  });\n  const [SlotListbox, listboxProps] = useSlot('listbox', {\n    className: classes.listbox,\n    elementType: AutocompleteListbox,\n    getSlotProps: getListboxProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || variant,\n      color: mergedProps.color || (!mergedProps.disablePortal ? rootColor : color),\n      disableColorInversion: !mergedProps.disablePortal\n    }),\n    additionalProps: {\n      anchorEl,\n      open: popupOpen,\n      style: anchorEl ? {\n        width: anchorEl.clientWidth\n      } : {}\n    }\n  });\n  const [SlotLoading, loadingProps] = useSlot('loading', {\n    className: classes.loading,\n    elementType: AutocompleteLoading,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotNoOptions, noOptionsProps] = useSlot('noOptions', {\n    className: classes.noOptions,\n    elementType: AutocompleteNoOptions,\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      role: 'presentation',\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      }\n    }\n  });\n  const [SlotLimitTag, limitTagProps] = useSlot('limitTag', {\n    className: classes.limitTag,\n    elementType: AutocompleteLimitTag,\n    externalForwardedProps,\n    ownerState\n  });\n  if (limitTags > -1 && Array.isArray(selectedOptions)) {\n    const more = selectedOptions.length - limitTags;\n    if (!focused && more > 0) {\n      selectedOptions = selectedOptions.splice(0, limitTags);\n      selectedOptions.push( /*#__PURE__*/_jsx(SlotLimitTag, _extends({}, limitTagProps, {\n        children: getLimitTagsText(more)\n      }), selectedOptions.length));\n    }\n  }\n  const [SlotOption, baseOptionProps] = useSlot('option', {\n    className: classes.option,\n    elementType: AutocompleteOption,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      variant: mergedProps.variant || getChildVariantAndColor(variant, rootColor).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, rootColor).color || 'neutral',\n      disableColorInversion: !listboxProps.disablePortal\n    }),\n    additionalProps: {\n      as: 'li'\n    }\n  });\n  const defaultRenderOption = (optionProps, option) => /*#__PURE__*/_jsx(SlotOption, _extends({}, optionProps, {\n    children: getOptionLabel(option)\n  }));\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, baseOptionProps, optionProps), option, {\n      // `aria-selected` prop will always by boolean, see useAutocomplete hook.\n      selected: !!optionProps['aria-selected'],\n      inputValue,\n      ownerState\n    });\n  };\n\n  // Wait for `listboxProps` because `slotProps.listbox` could be a function.\n  const modifiers = React.useMemo(() => [{\n    name: 'offset',\n    options: {\n      offset: [0, 4]\n    }\n  }, ...(listboxProps.modifiers || [])], [listboxProps.modifiers]);\n  let popup = null;\n  if (anchorEl) {\n    var _listboxProps$ownerSt, _props$slots;\n    popup = /*#__PURE__*/_jsx(VariantColorProvider, {\n      variant: variant,\n      color: rootColor,\n      children: /*#__PURE__*/_jsx(ListProvider, {\n        nested: true,\n        children: /*#__PURE__*/_jsxs(SlotListbox, _extends({}, listboxProps, {\n          className: clsx(listboxProps.className, ((_listboxProps$ownerSt = listboxProps.ownerState) == null ? void 0 : _listboxProps$ownerSt.color) === 'context' && autocompleteClasses.colorContext)\n          // @ts-ignore internal logic (too complex to typed PopperOwnProps to SlotListbox but this should be removed when we have `usePopper`)\n          ,\n\n          modifiers: modifiers\n        }, !((_props$slots = props.slots) != null && _props$slots.listbox) && {\n          as: Popper,\n          slots: {\n            root: listboxProps.as || 'ul'\n          }\n        }, {\n          children: [groupedOptions.map((option, index) => {\n            if (groupBy) {\n              const typedOption = option;\n              return renderGroup({\n                key: String(typedOption.key),\n                group: typedOption.group,\n                children: typedOption.options.map((option2, index2) => renderListOption(option2, typedOption.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          }), loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(SlotLoading, _extends({}, loadingProps, {\n            children: loadingText\n          })) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(SlotNoOptions, _extends({}, noOptionsProps, {\n            children: noOptionsText\n          })) : null]\n        }))\n      })\n    });\n    if (!listboxProps.disablePortal) {\n      // For portal popup, the children should not inherit color inversion from the upper parent.\n      popup = /*#__PURE__*/_jsx(ColorInversion.Provider, {\n        value: undefined,\n        children: popup\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n      children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {\n        children: startDecorator\n      })), /*#__PURE__*/_jsxs(SlotWrapper, _extends({}, wrapperProps, {\n        children: [selectedOptions, /*#__PURE__*/_jsx(SlotInput, _extends({}, inputProps))]\n      })), endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {\n        children: endDecorator\n      })), hasClearIcon ? /*#__PURE__*/_jsx(SlotClearIndicator, _extends({}, clearIndicatorProps, {\n        children: clearIcon\n      })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(SlotPopupIndicator, _extends({}, popupIndicatorProps, {\n        children: popupIcon\n      })) : null]\n    })), popup]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * Identifies the element (or elements) that describes the object.\r\n   * @see aria-labelledby\r\n   */\n  'aria-describedby': PropTypes.string,\n  /**\r\n   * Defines a string value that labels the current element.\r\n   * @see aria-labelledby.\r\n   */\n  'aria-label': PropTypes.string,\n  /**\r\n   * Identifies the element (or elements) that labels the current element.\r\n   * @see aria-describedby.\r\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\r\n   * If `true`, the `input` element is focused during the first mount.\r\n   */\n  autoFocus: PropTypes.bool,\n  /**\r\n   * The icon to display in place of the default clear icon.\r\n   * @default <ClearIcon fontSize=\"md\" />\r\n   */\n  clearIcon: PropTypes.node,\n  /**\r\n   * Override the default text for the *clear* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Clear'\r\n   */\n  clearText: PropTypes.string,\n  /**\r\n   * Override the default text for the *close popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Close'\r\n   */\n  closeText: PropTypes.string,\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   * @default 'neutral'\r\n   */\n  color: PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']),\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   * @default props.multiple ? [] : null\r\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\r\n   * If `true`, the input can't be cleared.\r\n   * @default false\r\n   */\n  disableClearable: PropTypes.bool,\n  /**\r\n   * If `true`, the component is disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * Trailing adornment for this input.\r\n   */\n  endDecorator: PropTypes.node,\n  /**\r\n   * If `true`, the `input` will indicate an error.\r\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\r\n   * @default false\r\n   */\n  error: PropTypes.bool,\n  /**\r\n   * A function that determines the filtered options to be rendered on search.\r\n   *\r\n   * @default createFilterOptions()\r\n   * @param {Value[]} options The options to render.\r\n   * @param {object} state The state of the component.\r\n   * @returns {Value[]}\r\n   */\n  filterOptions: PropTypes.func,\n  /**\r\n   * Force the visibility display of the popup icon.\r\n   * @default 'auto'\r\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\r\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\r\n   * @default false\r\n   */\n  freeSolo: PropTypes.bool,\n  /**\r\n   * The label to display when the tags are truncated (`limitTags`).\r\n   *\r\n   * @param {string | number} more The number of truncated tags.\r\n   * @returns {ReactNode}\r\n   * @default (more: string | number) => `+${more}`\r\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\r\n   * Used to determine the disabled state for a given option.\r\n   *\r\n   * @param {Value} option The option to test.\r\n   * @returns {boolean}\r\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\r\n   * Used to determine the string value for a given option.\r\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\r\n   *\r\n   * If used in free solo mode, it must accept both the type of the options and a string.\r\n   *\r\n   * @param {Value} option\r\n   * @returns {string}\r\n   * @default (option) => option.label ?? option\r\n   */\n  getOptionLabel: PropTypes.func,\n  /**\r\n   * If provided, the options will be grouped under the returned string.\r\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\r\n   *\r\n   * @param {Value} options The options to group.\r\n   * @returns {string}\r\n   */\n  groupBy: PropTypes.func,\n  /**\r\n   * This prop is used to help implement the accessibility logic.\r\n   * If you don't provide an id it will fall back to a randomly generated one.\r\n   */\n  id: PropTypes.string,\n  /**\r\n   * The input value.\r\n   */\n  inputValue: PropTypes.string,\n  /**\r\n   * Used to determine if the option represents the given value.\r\n   * Uses strict equality by default.\r\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\r\n   *\r\n   * @param {Value} option The option to test.\r\n   * @param {Value} value The value to test against.\r\n   * @returns {boolean}\r\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\r\n   * The maximum number of tags that will be visible when not focused.\r\n   * Set `-1` to disable the limit.\r\n   * @default -1\r\n   */\n  limitTags: integerPropType,\n  /**\r\n   * If `true`, the component is in a loading state.\r\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\r\n   * @default false\r\n   */\n  loading: PropTypes.bool,\n  /**\r\n   * Text to display when in a loading state.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Loading…'\r\n   */\n  loadingText: PropTypes.node,\n  /**\r\n   * If `true`, `value` must be an array and the menu will support multiple selections.\r\n   * @default false\r\n   */\n  multiple: PropTypes.bool,\n  /**\r\n   * Name attribute of the `input` element.\r\n   */\n  name: PropTypes.string,\n  /**\r\n   * Text to display when there are no options.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'No options'\r\n   */\n  noOptionsText: PropTypes.node,\n  /**\r\n   * Callback fired when the value changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {Value|Value[]} value The new value of the component.\r\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\r\n   * @param {string} [details]\r\n   */\n  onChange: PropTypes.func,\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\r\n   */\n  onClose: PropTypes.func,\n  /**\r\n   * Callback fired when the highlight option changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {Value} option The highlighted option.\r\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\r\n   */\n  onHighlightChange: PropTypes.func,\n  /**\r\n   * Callback fired when the input value changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {string} value The new value of the text input.\r\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\r\n   */\n  onInputChange: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onKeyDown: PropTypes.func,\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   */\n  onOpen: PropTypes.func,\n  /**\r\n   * If `true`, the component is shown.\r\n   */\n  open: PropTypes.bool,\n  /**\r\n   * Override the default text for the *open popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Open'\r\n   */\n  openText: PropTypes.string,\n  /**\r\n   * Array of options.\r\n   */\n  options: PropTypes.array.isRequired,\n  /**\r\n   * The input placeholder\r\n   */\n  placeholder: PropTypes.string,\n  /**\r\n   * The icon to display in place of the default popup icon.\r\n   * @default <ArrowDropDownIcon />\r\n   */\n  popupIcon: PropTypes.node,\n  /**\r\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\r\n   * @default false\r\n   */\n  readOnly: PropTypes.bool,\n  /**\r\n   * Render the group.\r\n   *\r\n   * @param {AutocompleteRenderGroupParams} params The group to render.\r\n   * @returns {ReactNode}\r\n   */\n  renderGroup: PropTypes.func,\n  /**\r\n   * Render the option, use `getOptionLabel` by default.\r\n   *\r\n   * @param {object} props The props to apply on the li element.\r\n   * @param {T} option The option to render.\r\n   * @param {object} state The state of the component.\r\n   * @returns {ReactNode}\r\n   */\n  renderOption: PropTypes.func,\n  /**\r\n   * Render the selected value.\r\n   *\r\n   * @param {T[]} value The `value` provided to the component.\r\n   * @param {function} getTagProps A tag props getter.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\n  renderTags: PropTypes.func,\n  /**\r\n   * If `true`, the `input` element is required.\r\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\r\n   */\n  required: PropTypes.bool,\n  /**\r\n   * The size of the component.\r\n   * @default 'md'\r\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    endDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    limitTag: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    loading: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    noOptions: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    option: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    wrapper: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    clearIndicator: PropTypes.elementType,\n    endDecorator: PropTypes.elementType,\n    input: PropTypes.elementType,\n    limitTag: PropTypes.elementType,\n    listbox: PropTypes.elementType,\n    loading: PropTypes.elementType,\n    noOptions: PropTypes.elementType,\n    option: PropTypes.elementType,\n    popupIndicator: PropTypes.elementType,\n    root: PropTypes.elementType,\n    startDecorator: PropTypes.elementType,\n    wrapper: PropTypes.elementType\n  }),\n  /**\r\n   * Leading adornment for this input.\r\n   */\n  startDecorator: PropTypes.node,\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\r\n   */\n  type: PropTypes.string,\n  /**\r\n   * The value of the autocomplete.\r\n   *\r\n   * The value must have reference equality with the option in order to be selected.\r\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\r\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\r\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\r\n   * @default 'outlined'\r\n   */\n  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])\n} : void 0;\nexport default Autocomplete;","map":null,"metadata":{},"sourceType":"module"}