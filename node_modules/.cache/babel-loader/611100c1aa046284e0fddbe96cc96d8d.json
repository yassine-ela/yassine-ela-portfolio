{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"propsToForward\", \"rootStateClasses\", \"inputStateClasses\", \"getRootProps\", \"getInputProps\", \"formControl\", \"focused\", \"error\", \"disabled\", \"size\", \"color\", \"variant\", \"startDecorator\", \"endDecorator\", \"minRows\", \"maxRows\", \"component\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { TextareaAutosize } from '@mui/base/TextareaAutosize';\nimport { styled, useThemeProps } from '../styles';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport useSlot from '../utils/useSlot';\nimport textareaClasses, { getTextareaUtilityClass } from './textareaClasses';\nimport useForwardedInput from '../Input/useForwardedInput';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var disabled = ownerState.disabled,\n    variant = ownerState.variant,\n    color = ownerState.color,\n    size = ownerState.size;\n  var slots = {\n    root: ['root', disabled && 'disabled', variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color)), size && \"size\".concat(capitalize(size))],\n    textarea: ['textarea'],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator']\n  };\n  return composeClasses(slots, getTextareaUtilityClass, {});\n};\nvar TextareaRoot = styled('div', {\n  name: 'JoyTextarea',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref4) {\n  var _ref5;\n  var theme = _ref4.theme,\n    ownerState = _ref4.ownerState;\n  var _theme$variants, _theme$vars$palette, _variantStyle$backgro, _theme$variants2, _theme$variants3;\n  var variantStyle = (_theme$variants = theme.variants[\"\".concat(ownerState.variant)]) == null ? void 0 : _theme$variants[ownerState.color];\n  return [_extends({\n    '--Textarea-radius': theme.vars.radius.sm,\n    '--Textarea-gap': '0.5rem',\n    '--Textarea-placeholderColor': 'inherit',\n    '--Textarea-placeholderOpacity': 0.64,\n    '--Textarea-decoratorColor': theme.vars.palette.text.icon,\n    '--Textarea-focused': '0',\n    '--Textarea-focusedThickness': theme.vars.focus.thickness\n  }, ownerState.color === 'context' ? {\n    '--Textarea-focusedHighlight': theme.vars.palette.focusVisible\n  } : {\n    '--Textarea-focusedHighlight': (_theme$vars$palette = theme.vars.palette[ownerState.color === 'neutral' ? 'primary' : ownerState.color]) == null ? void 0 : _theme$vars$palette[500]\n  }, ownerState.size === 'sm' && {\n    '--Textarea-minHeight': '2rem',\n    '--Textarea-paddingBlock': 'calc(0.375rem - 0.5px - var(--variant-borderWidth, 0px))',\n    // to match Input because <textarea> does not center the text at the middle like <input>\n    '--Textarea-paddingInline': '0.5rem',\n    '--Textarea-decoratorChildHeight': 'min(1.5rem, var(--Textarea-minHeight))',\n    '--Icon-fontSize': theme.vars.fontSize.xl\n  }, ownerState.size === 'md' && {\n    '--Textarea-minHeight': '2.25rem',\n    '--Textarea-paddingBlock': 'calc(0.375rem - var(--variant-borderWidth, 0px))',\n    '--Textarea-paddingInline': '0.75rem',\n    '--Textarea-decoratorChildHeight': 'min(1.75rem, var(--Textarea-minHeight))',\n    '--Icon-fontSize': theme.vars.fontSize.xl2\n  }, ownerState.size === 'lg' && {\n    '--Textarea-minHeight': '3rem',\n    '--Textarea-paddingBlock': 'calc(0.75rem - var(--variant-borderWidth, 0px))',\n    '--Textarea-paddingInline': '1rem',\n    '--Textarea-gap': '0.75rem',\n    '--Textarea-decoratorChildHeight': 'min(2.375rem, var(--Textarea-minHeight))',\n    '--Icon-fontSize': theme.vars.fontSize.xl2\n  }, {\n    // variables for controlling child components\n    '--_Textarea-paddingBlock': 'max((var(--Textarea-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Textarea-decoratorChildHeight)) / 2, 0px)',\n    '--Textarea-decoratorChildRadius': 'max(var(--Textarea-radius) - var(--variant-borderWidth, 0px) - var(--_Textarea-paddingBlock), min(var(--_Textarea-paddingBlock) + var(--variant-borderWidth, 0px), var(--Textarea-radius) / 2))',\n    '--Button-minHeight': 'var(--Textarea-decoratorChildHeight)',\n    '--IconButton-size': 'var(--Textarea-decoratorChildHeight)',\n    '--Button-radius': 'var(--Textarea-decoratorChildRadius)',\n    '--IconButton-radius': 'var(--Textarea-decoratorChildRadius)',\n    boxSizing: 'border-box'\n  }, ownerState.variant !== 'plain' && {\n    boxShadow: theme.shadow.xs\n  }, {\n    minWidth: 0,\n    minHeight: 'var(--Textarea-minHeight)',\n    cursor: 'text',\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    paddingInlineStart: \"var(--Textarea-paddingInline)\",\n    // the paddingInlineEnd is added to the textarea. It looks better when the scrollbar appears.\n    paddingBlock: 'var(--Textarea-paddingBlock)',\n    borderRadius: 'var(--Textarea-radius)'\n  }, theme.typography[\"body-\".concat(ownerState.size)], variantStyle, {\n    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,\n    '&:before': {\n      boxSizing: 'border-box',\n      content: '\"\"',\n      display: 'block',\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      zIndex: 1,\n      borderRadius: 'inherit',\n      margin: 'calc(var(--variant-borderWidth, 0px) * -1)',\n      // for outlined variant\n      boxShadow: \"var(--Textarea-focusedInset, inset) 0 0 0 calc(var(--Textarea-focused) * var(--Textarea-focusedThickness)) var(--Textarea-focusedHighlight)\"\n    }\n  }), (_ref5 = {\n    '&:hover': _extends({}, (_theme$variants2 = theme.variants[\"\".concat(ownerState.variant, \"Hover\")]) == null ? void 0 : _theme$variants2[ownerState.color], {\n      backgroundColor: null,\n      // it is not common to change background on hover for Textarea\n      cursor: 'text'\n    })\n  }, _defineProperty(_ref5, \"&.\".concat(textareaClasses.disabled), (_theme$variants3 = theme.variants[\"\".concat(ownerState.variant, \"Disabled\")]) == null ? void 0 : _theme$variants3[ownerState.color]), _defineProperty(_ref5, '&:focus-within::before', {\n    '--Textarea-focused': '1'\n  }), _ref5)];\n});\nvar TextareaInput = styled(TextareaAutosize, {\n  name: 'JoyTextarea',\n  slot: 'Textarea',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.textarea;\n  }\n})({\n  resize: 'none',\n  border: 'none',\n  // remove the native textarea width\n  minWidth: 0,\n  // remove the native textarea width\n  outline: 0,\n  // remove the native textarea outline\n  padding: 0,\n  // remove the native textarea padding\n  paddingInlineEnd: \"var(--Textarea-paddingInline)\",\n  flex: 'auto',\n  alignSelf: 'stretch',\n  color: 'inherit',\n  backgroundColor: 'transparent',\n  fontFamily: 'inherit',\n  fontSize: 'inherit',\n  fontStyle: 'inherit',\n  fontWeight: 'inherit',\n  lineHeight: 'inherit',\n  '&::-webkit-input-placeholder': {\n    color: 'var(--Textarea-placeholderColor)',\n    opacity: 'var(--Textarea-placeholderOpacity)'\n  },\n  '&::-moz-placeholder': {\n    // Firefox 19+\n    color: 'var(--Textarea-placeholderColor)',\n    opacity: 'var(--Textarea-placeholderOpacity)'\n  },\n  '&:-ms-input-placeholder': {\n    // IE11\n    color: 'var(--Textarea-placeholderColor)',\n    opacity: 'var(--Textarea-placeholderOpacity)'\n  },\n  '&::-ms-input-placeholder': {\n    // Edge\n    color: 'var(--Textarea-placeholderColor)',\n    opacity: 'var(--Textarea-placeholderOpacity)'\n  }\n});\nvar TextareaStartDecorator = styled('div', {\n  name: 'JoyTextarea',\n  slot: 'StartDecorator',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.startDecorator;\n  }\n})({\n  display: 'flex',\n  marginInlineStart: 'calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))',\n  marginInlineEnd: 'var(--Textarea-paddingBlock)',\n  marginBlockEnd: 'var(--Textarea-gap)',\n  color: 'var(--Textarea-decoratorColor)',\n  cursor: 'initial'\n});\nvar TextareaEndDecorator = styled('div', {\n  name: 'JoyTextarea',\n  slot: 'EndDecorator',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.endDecorator;\n  }\n})({\n  display: 'flex',\n  marginInlineStart: 'calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))',\n  marginInlineEnd: 'var(--Textarea-paddingBlock)',\n  marginBlockStart: 'var(--Textarea-gap)',\n  color: 'var(--Textarea-decoratorColor)',\n  cursor: 'initial'\n});\n/**\n *\n * Demos:\n *\n * - [Textarea](https://mui.com/joy-ui/react-textarea/)\n *\n * API:\n *\n * - [Textarea API](https://mui.com/joy-ui/api/textarea/)\n */\nvar Textarea = /*#__PURE__*/React.forwardRef(function Textarea(inProps, ref) {\n  var _ref, _inProps$disabled, _ref2, _inProps$error, _ref3, _inProps$size, _formControl$color;\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyTextarea'\n  });\n  var _useForwardedInput = useForwardedInput(props, textareaClasses),\n    propsToForward = _useForwardedInput.propsToForward,\n    rootStateClasses = _useForwardedInput.rootStateClasses,\n    inputStateClasses = _useForwardedInput.inputStateClasses,\n    getRootProps = _useForwardedInput.getRootProps,\n    getInputProps = _useForwardedInput.getInputProps,\n    formControl = _useForwardedInput.formControl,\n    focused = _useForwardedInput.focused,\n    _useForwardedInput$er = _useForwardedInput.error,\n    errorProp = _useForwardedInput$er === void 0 ? false : _useForwardedInput$er,\n    _useForwardedInput$di = _useForwardedInput.disabled,\n    disabledProp = _useForwardedInput$di === void 0 ? false : _useForwardedInput$di,\n    _useForwardedInput$si = _useForwardedInput.size,\n    sizeProp = _useForwardedInput$si === void 0 ? 'md' : _useForwardedInput$si,\n    _useForwardedInput$co = _useForwardedInput.color,\n    colorProp = _useForwardedInput$co === void 0 ? 'neutral' : _useForwardedInput$co,\n    _useForwardedInput$va = _useForwardedInput.variant,\n    variant = _useForwardedInput$va === void 0 ? 'outlined' : _useForwardedInput$va,\n    startDecorator = _useForwardedInput.startDecorator,\n    endDecorator = _useForwardedInput.endDecorator,\n    minRows = _useForwardedInput.minRows,\n    maxRows = _useForwardedInput.maxRows,\n    component = _useForwardedInput.component,\n    _useForwardedInput$sl = _useForwardedInput.slots,\n    slots = _useForwardedInput$sl === void 0 ? {} : _useForwardedInput$sl,\n    _useForwardedInput$sl2 = _useForwardedInput.slotProps,\n    slotProps = _useForwardedInput$sl2 === void 0 ? {} : _useForwardedInput$sl2,\n    other = _objectWithoutPropertiesLoose(_useForwardedInput, _excluded);\n  if (process.env.NODE_ENV !== 'production') {\n    var registerEffect = formControl == null ? void 0 : formControl.registerEffect;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (registerEffect) {\n        return registerEffect();\n      }\n      return undefined;\n    }, [registerEffect]);\n  }\n  var disabled = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledProp;\n  var error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;\n  var size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, error ? 'danger' : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);\n  var ownerState = _extends({}, props, {\n    color: color,\n    disabled: disabled,\n    error: error,\n    focused: focused,\n    size: size,\n    variant: variant\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      className: [classes.root, rootStateClasses],\n      elementType: TextareaRoot,\n      externalForwardedProps: externalForwardedProps,\n      getSlotProps: getRootProps,\n      ownerState: ownerState\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  var _useSlot3 = useSlot('textarea', {\n      additionalProps: {\n        id: formControl == null ? void 0 : formControl.htmlFor,\n        'aria-describedby': formControl == null ? void 0 : formControl['aria-describedby']\n      },\n      className: [classes.textarea, inputStateClasses],\n      elementType: TextareaInput,\n      internalForwardedProps: _extends({}, propsToForward, {\n        minRows: minRows,\n        maxRows: maxRows\n      }),\n      externalForwardedProps: externalForwardedProps,\n      getSlotProps: getInputProps,\n      ownerState: ownerState\n    }),\n    _useSlot4 = _slicedToArray(_useSlot3, 2),\n    SlotTextarea = _useSlot4[0],\n    textareaProps = _useSlot4[1];\n  var _useSlot5 = useSlot('startDecorator', {\n      className: classes.startDecorator,\n      elementType: TextareaStartDecorator,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot6 = _slicedToArray(_useSlot5, 2),\n    SlotStartDecorator = _useSlot6[0],\n    startDecoratorProps = _useSlot6[1];\n  var _useSlot7 = useSlot('endDecorator', {\n      className: classes.endDecorator,\n      elementType: TextareaEndDecorator,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot8 = _slicedToArray(_useSlot7, 2),\n    SlotEndDecorator = _useSlot8[0],\n    endDecoratorProps = _useSlot8[1];\n  return /*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n    children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {\n      children: startDecorator\n    })), /*#__PURE__*/_jsx(SlotTextarea, _extends({}, textareaProps)), endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {\n      children: endDecorator\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Textarea.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endDecorator: PropTypes.node,\n  /**\n   * If `true`, the `input` will indicate an error.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * Leading adornment for this input.\n   */\n  startDecorator: PropTypes.node,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default Textarea;","map":null,"metadata":{},"sourceType":"module"}