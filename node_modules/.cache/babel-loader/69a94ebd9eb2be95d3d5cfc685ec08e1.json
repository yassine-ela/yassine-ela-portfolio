{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"action\", \"color\", \"variant\", \"size\", \"fullWidth\", \"startDecorator\", \"endDecorator\", \"loading\", \"loadingPosition\", \"loadingIndicator\", \"disabled\", \"component\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useButton } from '@mui/base/useButton';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { unstable_capitalize as capitalize, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { styled, useThemeProps } from '../styles';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport useSlot from '../utils/useSlot';\nimport CircularProgress from '../CircularProgress';\nimport buttonClasses, { getButtonUtilityClass } from './buttonClasses';\nimport ButtonGroupContext from '../ButtonGroup/ButtonGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    color,\n    disabled,\n    focusVisible,\n    focusVisibleClassName,\n    fullWidth,\n    size,\n    variant,\n    loading\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', fullWidth && 'fullWidth', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`, loading && 'loading'],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator'],\n    loadingIndicatorCenter: ['loadingIndicatorCenter']\n  };\n  const composedClasses = composeClasses(slots, getButtonUtilityClass, {});\n  if (focusVisible && focusVisibleClassName) {\n    composedClasses.root += ` ${focusVisibleClassName}`;\n  }\n  return composedClasses;\n};\nconst ButtonStartDecorator = styled('span', {\n  name: 'JoyButton',\n  slot: 'StartDecorator',\n  overridesResolver: (props, styles) => styles.startDecorator\n})({\n  '--Icon-margin': '0 0 0 calc(var(--Button-gap) / -2)',\n  '--CircularProgress-margin': '0 0 0 calc(var(--Button-gap) / -2)',\n  display: 'inherit',\n  marginRight: 'var(--Button-gap)'\n});\nconst ButtonEndDecorator = styled('span', {\n  name: 'JoyButton',\n  slot: 'EndDecorator',\n  overridesResolver: (props, styles) => styles.endDecorator\n})({\n  '--Icon-margin': '0 calc(var(--Button-gap) / -2) 0 0',\n  '--CircularProgress-margin': '0 calc(var(--Button-gap) / -2) 0 0',\n  display: 'inherit',\n  marginLeft: 'var(--Button-gap)'\n});\nconst ButtonLoadingCenter = styled('span', {\n  name: 'JoyButton',\n  slot: 'LoadingCenter',\n  overridesResolver: (props, styles) => styles.loadingIndicatorCenter\n})(({\n  theme,\n  ownerState\n}) => {\n  var _theme$variants, _theme$variants2;\n  return _extends({\n    display: 'inherit',\n    position: 'absolute',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    color: (_theme$variants = theme.variants[ownerState.variant]) == null || (_theme$variants = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants.color\n  }, ownerState.disabled && {\n    color: (_theme$variants2 = theme.variants[`${ownerState.variant}Disabled`]) == null || (_theme$variants2 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants2.color\n  });\n});\nexport const getButtonStyles = ({\n  theme,\n  ownerState\n}) => {\n  var _theme$variants3, _theme$variants4, _theme$variants5, _theme$variants6;\n  return [_extends({\n    '--Icon-margin': 'initial',\n    // reset the icon's margin.\n    '--Icon-color': ownerState.color !== 'neutral' || ownerState.variant === 'solid' ? 'currentColor' : theme.vars.palette.text.icon\n  }, ownerState.size === 'sm' && {\n    '--Icon-fontSize': theme.vars.fontSize.lg,\n    '--CircularProgress-size': '20px',\n    // must be `px` unit, otherwise the CircularProgress is broken in Safari\n    '--CircularProgress-thickness': '2px',\n    '--Button-gap': '0.375rem',\n    minHeight: 'var(--Button-minHeight, 2rem)',\n    fontSize: theme.vars.fontSize.sm,\n    paddingBlock: '2px',\n    paddingInline: '0.75rem'\n  }, ownerState.size === 'md' && {\n    '--Icon-fontSize': theme.vars.fontSize.xl,\n    '--CircularProgress-size': '20px',\n    // must be `px` unit, otherwise the CircularProgress is broken in Safari\n    '--CircularProgress-thickness': '2px',\n    '--Button-gap': '0.5rem',\n    minHeight: 'var(--Button-minHeight, 2.25rem)',\n    // use min-height instead of height to make the button resilient to its content\n    fontSize: theme.vars.fontSize.sm,\n    paddingBlock: '0.25rem',\n    // the padding-block act as a minimum spacing between content and root element\n    paddingInline: '1rem'\n  }, ownerState.size === 'lg' && {\n    '--Icon-fontSize': theme.vars.fontSize.xl2,\n    '--CircularProgress-size': '28px',\n    // must be `px` unit, otherwise the CircularProgress is broken in Safari\n    '--CircularProgress-thickness': '4px',\n    '--Button-gap': '0.75rem',\n    minHeight: 'var(--Button-minHeight, 2.75rem)',\n    fontSize: theme.vars.fontSize.md,\n    paddingBlock: '0.375rem',\n    paddingInline: '1.5rem'\n  }, {\n    WebkitTapHighlightColor: 'transparent',\n    borderRadius: `var(--Button-radius, ${theme.vars.radius.sm})`,\n    // to be controlled by other components, e.g. Input\n    margin: `var(--Button-margin)`,\n    // to be controlled by other components, e.g. Input\n    border: 'none',\n    backgroundColor: 'transparent',\n    cursor: 'pointer',\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'relative',\n    textDecoration: 'none',\n    // prevent user agent underline when used as anchor\n    fontFamily: theme.vars.fontFamily.body,\n    fontWeight: theme.vars.fontWeight.lg,\n    lineHeight: 1\n  }, ownerState.fullWidth && {\n    width: '100%'\n  }, {\n    [theme.focus.selector]: theme.focus.default\n  }), _extends({}, (_theme$variants3 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants3[ownerState.color], {\n    '&:hover': {\n      '@media (hover: hover)': (_theme$variants4 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants4[ownerState.color]\n    },\n    '&:active, &[aria-pressed=\"true\"]': (_theme$variants5 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants5[ownerState.color],\n    '&:disabled': (_theme$variants6 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants6[ownerState.color]\n  }, ownerState.loadingPosition === 'center' && {\n    // this has to come after the variant styles to take effect.\n    [`&.${buttonClasses.loading}`]: {\n      color: 'transparent'\n    }\n  })];\n};\nconst ButtonRoot = styled('button', {\n  name: 'JoyButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(getButtonStyles);\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Button](https://mui.com/joy-ui/react-button/)\r\n * - [Button Group](https://mui.com/joy-ui/react-button-group/)\r\n * - [Toggle Button Group](https://mui.com/joy-ui/react-toggle-button-group/)\r\n *\r\n * API:\r\n *\r\n * - [Button API](https://mui.com/joy-ui/api/button/)\r\n */\nconst Button = /*#__PURE__*/React.forwardRef(function Button(inProps, ref) {\n  var _ref;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyButton'\n  });\n  const {\n      children,\n      action,\n      color: colorProp = 'primary',\n      variant: variantProp = 'solid',\n      size: sizeProp = 'md',\n      fullWidth = false,\n      startDecorator,\n      endDecorator,\n      loading = false,\n      loadingPosition = 'center',\n      loadingIndicator: loadingIndicatorProp,\n      disabled: disabledProp,\n      component,\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const buttonGroup = React.useContext(ButtonGroupContext);\n  const variant = inProps.variant || buttonGroup.variant || variantProp;\n  const size = inProps.size || buttonGroup.size || sizeProp;\n  const {\n    getColor\n  } = useColorInversion(variant);\n  const color = getColor(inProps.color, buttonGroup.color || colorProp);\n  const disabled = (_ref = inProps.disabled || inProps.loading) != null ? _ref : buttonGroup.disabled || disabledProp || loading;\n  const buttonRef = React.useRef(null);\n  const handleRef = useForkRef(buttonRef, ref);\n  const {\n    focusVisible,\n    setFocusVisible,\n    getRootProps\n  } = useButton(_extends({}, props, {\n    disabled,\n    rootRef: handleRef\n  }));\n  const loadingIndicator = loadingIndicatorProp != null ? loadingIndicatorProp : /*#__PURE__*/_jsx(CircularProgress, _extends({}, color !== 'context' && {\n    color\n  }, {\n    thickness: {\n      sm: 2,\n      md: 3,\n      lg: 4\n    }[size] || 3\n  }));\n  React.useImperativeHandle(action, () => ({\n    focusVisible: () => {\n      var _buttonRef$current;\n      setFocusVisible(true);\n      (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n    }\n  }), [setFocusVisible]);\n  const ownerState = _extends({}, props, {\n    color,\n    fullWidth,\n    variant,\n    size,\n    focusVisible,\n    loading,\n    loadingPosition,\n    disabled\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref,\n    className: classes.root,\n    elementType: ButtonRoot,\n    externalForwardedProps,\n    getSlotProps: getRootProps,\n    ownerState\n  });\n  const [SlotStartDecorator, startDecoratorProps] = useSlot('startDecorator', {\n    className: classes.startDecorator,\n    elementType: ButtonStartDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotEndDecorator, endDecoratorProps] = useSlot('endDecorator', {\n    className: classes.endDecorator,\n    elementType: ButtonEndDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotLoadingIndicatorCenter, loadingIndicatorCenterProps] = useSlot('loadingIndicatorCenter', {\n    className: classes.loadingIndicatorCenter,\n    elementType: ButtonLoadingCenter,\n    externalForwardedProps,\n    ownerState\n  });\n  return /*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n    children: [(startDecorator || loading && loadingPosition === 'start') && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {\n      children: loading && loadingPosition === 'start' ? loadingIndicator : startDecorator\n    })), children, loading && loadingPosition === 'center' && /*#__PURE__*/_jsx(SlotLoadingIndicatorCenter, _extends({}, loadingIndicatorCenterProps, {\n      children: loadingIndicator\n    })), (endDecorator || loading && loadingPosition === 'end') && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {\n      children: loading && loadingPosition === 'end' ? loadingIndicator : endDecorator\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\r\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   * @default 'primary'\r\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * If `true`, the component is disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * Element placed after the children.\r\n   */\n  endDecorator: PropTypes.node,\n  /**\r\n   * @ignore\r\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\r\n   * If `true`, the button will take up the full width of its container.\r\n   * @default false\r\n   */\n  fullWidth: PropTypes.bool,\n  /**\r\n   * If `true`, the loading indicator is shown and the button becomes disabled.\r\n   * @default false\r\n   */\n  loading: PropTypes.bool,\n  /**\r\n   * The node should contain an element with `role=\"progressbar\"` with an accessible name.\r\n   * By default we render a `CircularProgress` that is labelled by the button itself.\r\n   * @default <CircularProgress />\r\n   */\n  loadingIndicator: PropTypes.node,\n  /**\r\n   * The loading indicator can be positioned on the start, end, or the center of the button.\r\n   * @default 'center'\r\n   */\n  loadingPosition: PropTypes.oneOf(['center', 'end', 'start']),\n  /**\r\n   * The size of the component.\r\n   * @default 'md'\r\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    endDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    loadingIndicatorCenter: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    endDecorator: PropTypes.elementType,\n    loadingIndicatorCenter: PropTypes.elementType,\n    root: PropTypes.elementType,\n    startDecorator: PropTypes.elementType\n  }),\n  /**\r\n   * Element placed before the children.\r\n   */\n  startDecorator: PropTypes.node,\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * @default 0\r\n   */\n  tabIndex: PropTypes.number,\n  /**\r\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\r\n   * @default 'solid'\r\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\n\n// @ts-ignore internal logic for ToggleButtonGroup\nButton.muiName = 'Button';\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}