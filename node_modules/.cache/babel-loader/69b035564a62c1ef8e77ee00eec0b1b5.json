{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"component\", \"role\", \"className\", \"children\", \"inset\", \"orientation\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { styled, useThemeProps } from '../styles';\nimport { DividerRoot } from '../Divider/Divider';\nimport { getListDividerUtilityClass } from './listDividerClasses';\nimport RowListContext from '../List/RowListContext';\nimport ComponentListContext from '../List/ComponentListContext';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var orientation = ownerState.orientation,\n    inset = ownerState.inset;\n  var slots = {\n    root: ['root', orientation,\n    // `insetContext` class is already produced by Divider\n    inset && inset !== 'context' && \"inset\".concat(capitalize(inset))]\n  };\n  return composeClasses(slots, getListDividerUtilityClass, {});\n};\nvar ListDividerRoot = styled(DividerRoot, {\n  name: 'JoyListDivider',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref) {\n  var ownerState = _ref.ownerState;\n  return _extends({}, ownerState.inset === 'context' && {\n    '--Divider-inset': 'calc(-1 * var(--List-padding))'\n  }, ownerState.row && _extends({\n    marginInline: 'var(--ListDivider-gap)'\n  }, ownerState.inset === 'gutter' && {\n    marginBlock: 'var(--ListItem-paddingY)'\n  }, ownerState['data-first-child'] === undefined && {\n    // combine --List-gap and --ListDivider-gap to replicate flexbox gap behavior\n    marginInlineStart: 'calc(var(--List-gap) + var(--ListDivider-gap))'\n  }), !ownerState.row && _extends({}, ownerState['data-first-child'] === undefined && {\n    // combine --List-gap and --ListDivider-gap to replicate flexbox gap behavior\n    marginBlockStart: 'calc(var(--List-gap) + var(--ListDivider-gap))'\n  }, {\n    marginBlockEnd: 'var(--ListDivider-gap)'\n  }, ownerState.inset === 'gutter' && {\n    marginInlineStart: 'var(--ListItem-paddingLeft)',\n    marginInlineEnd: 'var(--ListItem-paddingRight)'\n  }, ownerState.inset === 'startDecorator' && {\n    marginInlineStart: 'var(--ListItem-paddingLeft)'\n  }, ownerState.inset === 'startContent' && {\n    marginInlineStart: 'calc(var(--ListItem-paddingLeft) + var(--ListItemDecorator-size))'\n  }));\n});\n/**\n *\n * Demos:\n *\n * - [Lists](https://mui.com/joy-ui/react-list/)\n *\n * API:\n *\n * - [ListDivider API](https://mui.com/joy-ui/api/list-divider/)\n */\nvar ListDivider = /*#__PURE__*/React.forwardRef(function ListDivider(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyListDivider'\n  });\n  var row = React.useContext(RowListContext);\n  var listComponent = React.useContext(ComponentListContext);\n  var componentProp = props.component,\n    roleProp = props.role,\n    className = props.className,\n    children = props.children,\n    _props$inset = props.inset,\n    inset = _props$inset === void 0 ? 'context' : _props$inset,\n    orientationProp = props.orientation,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var _ref2 = (listComponent == null ? void 0 : listComponent.split(':')) || ['', ''],\n    _ref3 = _slicedToArray(_ref2, 1),\n    listElement = _ref3[0];\n  var component = componentProp || (listElement && !listElement.match(/^(ul|ol|menu)$/) ? 'div' : 'li');\n  var role = roleProp || (component === 'li' ? 'separator' : undefined);\n  var orientation = orientationProp || (row ? 'vertical' : 'horizontal');\n  var ownerState = _extends({}, props, {\n    inset: inset,\n    row: row,\n    orientation: orientation,\n    component: component,\n    role: role\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      className: clsx(classes.root, className),\n      elementType: ListDividerRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      additionalProps: _extends({\n        as: component,\n        role: role\n      }, role === 'separator' && orientation === 'vertical' && {\n        // The implicit aria-orientation of separator is 'horizontal'\n        // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role\n        'aria-orientation': 'vertical'\n      })\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListDivider.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The empty space on the side(s) of the divider in a vertical list.\n   *\n   * For horizontal list (the nearest parent List has `row` prop set to `true`), only `inset=\"gutter\"` affects the list divider.\n   * @default 'context'\n   */\n  inset: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['context', 'gutter', 'startDecorator', 'startContent']), PropTypes.string]),\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: PropTypes /* @typescript-to-proptypes-ignore */.oneOf(['horizontal', 'vertical']),\n  /**\n   * @ignore\n   */\n  role: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListDivider;","map":null,"metadata":{},"sourceType":"module"}