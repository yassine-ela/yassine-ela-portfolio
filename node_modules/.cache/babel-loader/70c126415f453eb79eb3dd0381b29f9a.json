{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"component\", \"role\", \"className\", \"children\", \"inset\", \"orientation\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { styled, useThemeProps } from '../styles';\nimport { DividerRoot } from '../Divider/Divider';\nimport { getListDividerUtilityClass } from './listDividerClasses';\nimport RowListContext from '../List/RowListContext';\nimport ComponentListContext from '../List/ComponentListContext';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    orientation,\n    inset\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation,\n    // `insetContext` class is already produced by Divider\n    inset && inset !== 'context' && `inset${capitalize(inset)}`]\n  };\n  return composeClasses(slots, getListDividerUtilityClass, {});\n};\nconst ListDividerRoot = styled(DividerRoot, {\n  name: 'JoyListDivider',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  ownerState\n}) => _extends({}, ownerState.inset === 'context' && {\n  '--Divider-inset': 'calc(-1 * var(--List-padding))'\n}, ownerState.row && _extends({\n  marginInline: 'var(--ListDivider-gap)'\n}, ownerState.inset === 'gutter' && {\n  marginBlock: 'var(--ListItem-paddingY)'\n}, ownerState['data-first-child'] === undefined && {\n  // combine --List-gap and --ListDivider-gap to replicate flexbox gap behavior\n  marginInlineStart: 'calc(var(--List-gap) + var(--ListDivider-gap))'\n}), !ownerState.row && _extends({}, ownerState['data-first-child'] === undefined && {\n  // combine --List-gap and --ListDivider-gap to replicate flexbox gap behavior\n  marginBlockStart: 'calc(var(--List-gap) + var(--ListDivider-gap))'\n}, {\n  marginBlockEnd: 'var(--ListDivider-gap)'\n}, ownerState.inset === 'gutter' && {\n  marginInlineStart: 'var(--ListItem-paddingLeft)',\n  marginInlineEnd: 'var(--ListItem-paddingRight)'\n}, ownerState.inset === 'startDecorator' && {\n  marginInlineStart: 'var(--ListItem-paddingLeft)'\n}, ownerState.inset === 'startContent' && {\n  marginInlineStart: 'calc(var(--ListItem-paddingLeft) + var(--ListItemDecorator-size))'\n})));\n/**\n *\n * Demos:\n *\n * - [Lists](https://mui.com/joy-ui/react-list/)\n *\n * API:\n *\n * - [ListDivider API](https://mui.com/joy-ui/api/list-divider/)\n */\nconst ListDivider = /*#__PURE__*/React.forwardRef(function ListDivider(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyListDivider'\n  });\n  const row = React.useContext(RowListContext);\n  const listComponent = React.useContext(ComponentListContext);\n  const {\n      component: componentProp,\n      role: roleProp,\n      className,\n      children,\n      inset = 'context',\n      orientation: orientationProp,\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const [listElement] = (listComponent == null ? void 0 : listComponent.split(':')) || ['', ''];\n  const component = componentProp || (listElement && !listElement.match(/^(ul|ol|menu)$/) ? 'div' : 'li');\n  const role = roleProp || (component === 'li' ? 'separator' : undefined);\n  const orientation = orientationProp || (row ? 'vertical' : 'horizontal');\n  const ownerState = _extends({}, props, {\n    inset,\n    row,\n    orientation,\n    component,\n    role\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref,\n    className: clsx(classes.root, className),\n    elementType: ListDividerRoot,\n    externalForwardedProps,\n    ownerState,\n    additionalProps: _extends({\n      as: component,\n      role\n    }, role === 'separator' && orientation === 'vertical' && {\n      // The implicit aria-orientation of separator is 'horizontal'\n      // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role\n      'aria-orientation': 'vertical'\n    })\n  });\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListDivider.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The empty space on the side(s) of the divider in a vertical list.\n   *\n   * For horizontal list (the nearest parent List has `row` prop set to `true`), only `inset=\"gutter\"` affects the list divider.\n   * @default 'context'\n   */\n  inset: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['context', 'gutter', 'startDecorator', 'startContent']), PropTypes.string]),\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: PropTypes /* @typescript-to-proptypes-ignore */.oneOf(['horizontal', 'vertical']),\n  /**\n   * @ignore\n   */\n  role: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListDivider;","map":null,"metadata":{},"sourceType":"module"}