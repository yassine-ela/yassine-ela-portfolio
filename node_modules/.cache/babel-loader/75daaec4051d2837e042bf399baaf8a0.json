{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"children\", \"component\", \"color\", \"variant\", \"className\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { StyledListItemButton } from '../ListItemButton/ListItemButton';\nimport { styled, useThemeProps } from '../styles';\nimport { useVariantColor } from '../styles/variantColorInheritance';\nimport { getAutocompleteOptionUtilityClass } from './autocompleteOptionClasses';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var color = ownerState.color,\n    variant = ownerState.variant;\n  var slots = {\n    root: ['root', color && \"color\".concat(capitalize(color)), variant && \"variant\".concat(capitalize(variant))]\n  };\n  return composeClasses(slots, getAutocompleteOptionUtilityClass, {});\n};\nexport var StyledAutocompleteOption = styled(StyledListItemButton)(function (_ref) {\n  var theme = _ref.theme,\n    ownerState = _ref.ownerState;\n  var _theme$variants, _theme$variants2;\n  return {\n    '&[aria-disabled=\"true\"]': (_theme$variants = theme.variants[\"\".concat(ownerState.variant, \"Disabled\")]) == null ? void 0 : _theme$variants[ownerState.color],\n    '&[aria-selected=\"true\"]': _extends({}, (_theme$variants2 = theme.variants[\"\".concat(ownerState.variant, \"Active\")]) == null ? void 0 : _theme$variants2[ownerState.color], {\n      fontWeight: theme.vars.fontWeight.md\n    })\n  };\n});\nvar AutocompleteOptionRoot = styled(StyledAutocompleteOption, {\n  name: 'JoyAutocompleteOption',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({});\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/joy-ui/react-autocomplete/)\n *\n * API:\n *\n * - [AutocompleteOption API](https://mui.com/joy-ui/api/autocomplete-option/)\n */\nvar AutocompleteOption = /*#__PURE__*/React.forwardRef(function AutocompleteOption(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyAutocompleteOption'\n  });\n  var children = props.children,\n    _props$component = props.component,\n    component = _props$component === void 0 ? 'li' : _props$component,\n    _props$color = props.color,\n    colorProp = _props$color === void 0 ? 'neutral' : _props$color,\n    _props$variant = props.variant,\n    variantProp = _props$variant === void 0 ? 'plain' : _props$variant,\n    className = props.className,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useVariantColor = useVariantColor(inProps.variant, inProps.color),\n    _useVariantColor$vari = _useVariantColor.variant,\n    variant = _useVariantColor$vari === void 0 ? variantProp : _useVariantColor$vari,\n    _useVariantColor$colo = _useVariantColor.color,\n    inheritedColor = _useVariantColor$colo === void 0 ? colorProp : _useVariantColor$colo;\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, inheritedColor);\n  var ownerState = _extends({}, props, {\n    component: component,\n    color: color,\n    variant: variant\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      className: clsx(classes.root, className),\n      elementType: AutocompleteOptionRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      additionalProps: {\n        as: component,\n        role: 'option'\n      }\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? AutocompleteOption.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'plain'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['contained', 'light', 'outlined', 'text']), PropTypes.string])\n} : void 0;\nexport default AutocompleteOption;","map":null,"metadata":{},"sourceType":"module"}