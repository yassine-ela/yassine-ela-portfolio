{"ast":null,"code":"'use client';\n\nimport _toConsumableArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"children\", \"className\", \"component\", \"arrow\", \"describeChild\", \"disableFocusListener\", \"disableHoverListener\", \"disableInteractive\", \"disableTouchListener\", \"enterDelay\", \"enterNextDelay\", \"enterTouchDelay\", \"followCursor\", \"id\", \"leaveDelay\", \"leaveTouchDelay\", \"onClose\", \"onOpen\", \"open\", \"disablePortal\", \"direction\", \"keepMounted\", \"modifiers\", \"placement\", \"title\", \"color\", \"variant\", \"size\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize, unstable_useControlled as useControlled, unstable_useEventCallback as useEventCallback, unstable_useForkRef as useForkRef, unstable_useIsFocusVisible as useIsFocusVisible, unstable_useId as useId } from '@mui/utils';\nimport { Popper, unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useSlot from '../utils/useSlot';\nimport ColorInversion, { useColorInversion } from '../styles/ColorInversion';\nimport { getTooltipUtilityClass } from './tooltipClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var arrow = ownerState.arrow,\n    variant = ownerState.variant,\n    color = ownerState.color,\n    size = ownerState.size,\n    placement = ownerState.placement,\n    touch = ownerState.touch;\n  var slots = {\n    root: ['root', arrow && 'tooltipArrow', touch && 'touch', size && \"size\".concat(capitalize(size)), color && \"color\".concat(capitalize(color)), variant && \"variant\".concat(capitalize(variant)), \"tooltipPlacement\".concat(capitalize(placement.split('-')[0]))],\n    arrow: ['arrow']\n  };\n  return composeClasses(slots, getTooltipUtilityClass, {});\n};\nvar TooltipRoot = styled('div', {\n  name: 'JoyTooltip',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref) {\n  var ownerState = _ref.ownerState,\n    theme = _ref.theme;\n  var _theme$variants, _ownerState$placement, _ownerState$placement2;\n  var variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];\n  return _extends({}, ownerState.size === 'sm' && {\n    '--Icon-fontSize': theme.vars.fontSize.md,\n    '--Tooltip-arrowSize': '8px',\n    padding: theme.spacing(0.25, 0.625)\n  }, ownerState.size === 'md' && {\n    '--Icon-fontSize': theme.vars.fontSize.lg,\n    '--Tooltip-arrowSize': '10px',\n    padding: theme.spacing(0.5, 0.75)\n  }, ownerState.size === 'lg' && {\n    '--Icon-fontSize': theme.vars.fontSize.xl,\n    '--Tooltip-arrowSize': '12px',\n    padding: theme.spacing(0.75, 1)\n  }, {\n    zIndex: theme.vars.zIndex.tooltip,\n    borderRadius: theme.vars.radius.sm,\n    boxShadow: theme.shadow.sm,\n    wordWrap: 'break-word',\n    position: 'relative'\n  }, ownerState.disableInteractive && {\n    pointerEvents: 'none'\n  }, theme.typography[\"body-\".concat({\n    sm: 'xs',\n    md: 'sm',\n    lg: 'md'\n  }[ownerState.size])], variantStyle, !variantStyle.backgroundColor && {\n    backgroundColor: theme.vars.palette.background.surface\n  }, {\n    '&::before': {\n      // acts as a invisible connector between the element and the tooltip\n      // so that the cursor can move to the tooltip without losing focus.\n      content: '\"\"',\n      display: 'block',\n      position: 'absolute',\n      width: (_ownerState$placement = ownerState.placement) != null && _ownerState$placement.match(/(top|bottom)/) ? '100%' :\n      // 10px equals the default offset popper config\n      'calc(10px + var(--variant-borderWidth, 0px))',\n      height: (_ownerState$placement2 = ownerState.placement) != null && _ownerState$placement2.match(/(top|bottom)/) ? 'calc(10px + var(--variant-borderWidth, 0px))' : '100%'\n    },\n    '&[data-popper-placement*=\"bottom\"]::before': {\n      top: 0,\n      left: 0,\n      transform: 'translateY(-100%)'\n    },\n    '&[data-popper-placement*=\"left\"]::before': {\n      top: 0,\n      right: 0,\n      transform: 'translateX(100%)'\n    },\n    '&[data-popper-placement*=\"right\"]::before': {\n      top: 0,\n      left: 0,\n      transform: 'translateX(-100%)'\n    },\n    '&[data-popper-placement*=\"top\"]::before': {\n      bottom: 0,\n      left: 0,\n      transform: 'translateY(100%)'\n    }\n  });\n});\nvar TooltipArrow = styled('span', {\n  name: 'JoyTooltip',\n  slot: 'Arrow',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.arrow;\n  }\n})(function (_ref2) {\n  var theme = _ref2.theme,\n    ownerState = _ref2.ownerState;\n  var _theme$variants2, _variantStyle$backgro, _variantStyle$backgro2;\n  var variantStyle = (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color];\n  return {\n    '--unstable_Tooltip-arrowRotation': 0,\n    width: 'var(--Tooltip-arrowSize)',\n    height: 'var(--Tooltip-arrowSize)',\n    boxSizing: 'border-box',\n    // use pseudo element because Popper controls the `transform` property of the arrow.\n    '&:before': {\n      content: '\"\"',\n      display: 'block',\n      position: 'absolute',\n      width: 0,\n      height: 0,\n      border: 'calc(var(--Tooltip-arrowSize) / 2) solid',\n      borderLeftColor: 'transparent',\n      borderBottomColor: 'transparent',\n      borderTopColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,\n      borderRightColor: (_variantStyle$backgro2 = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro2 : theme.vars.palette.background.surface,\n      borderRadius: \"0px 2px 0px 0px\",\n      boxShadow: \"var(--variant-borderWidth, 0px) calc(-1 * var(--variant-borderWidth, 0px)) 0px 0px \".concat(variantStyle.borderColor),\n      transformOrigin: 'center center',\n      transform: 'rotate(calc(-45deg + 90deg * var(--unstable_Tooltip-arrowRotation)))'\n    },\n    '[data-popper-placement*=\"bottom\"] &': {\n      top: 'calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)' // 0.5px is for perfect overlap with the Tooltip\n    },\n\n    '[data-popper-placement*=\"top\"] &': {\n      '--unstable_Tooltip-arrowRotation': 2,\n      bottom: 'calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)'\n    },\n    '[data-popper-placement*=\"left\"] &': {\n      '--unstable_Tooltip-arrowRotation': 1,\n      right: 'calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)'\n    },\n    '[data-popper-placement*=\"right\"] &': {\n      '--unstable_Tooltip-arrowRotation': 3,\n      left: 'calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)'\n    }\n  };\n});\nvar hystersisOpen = false;\nvar hystersisTimer = null;\nvar cursorPosition = {\n  x: 0,\n  y: 0\n};\nexport function testReset() {\n  hystersisOpen = false;\n  if (hystersisTimer) {\n    clearTimeout(hystersisTimer);\n  }\n}\nfunction composeMouseEventHandler(handler, eventHandler) {\n  return function (event) {\n    if (eventHandler) {\n      eventHandler(event);\n    }\n    handler(event);\n  };\n}\nfunction composeFocusEventHandler(handler, eventHandler) {\n  return function (event) {\n    if (eventHandler) {\n      eventHandler(event);\n    }\n    handler(event);\n  };\n}\n/**\n *\n * Demos:\n *\n * - [Tooltip](https://mui.com/joy-ui/react-tooltip/)\n *\n * API:\n *\n * - [Tooltip API](https://mui.com/joy-ui/api/tooltip/)\n */\nvar Tooltip = /*#__PURE__*/React.forwardRef(function Tooltip(inProps, ref) {\n  var _props$slots;\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyTooltip'\n  });\n  var children = props.children,\n    className = props.className,\n    component = props.component,\n    _props$arrow = props.arrow,\n    arrow = _props$arrow === void 0 ? false : _props$arrow,\n    _props$describeChild = props.describeChild,\n    describeChild = _props$describeChild === void 0 ? false : _props$describeChild,\n    _props$disableFocusLi = props.disableFocusListener,\n    disableFocusListener = _props$disableFocusLi === void 0 ? false : _props$disableFocusLi,\n    _props$disableHoverLi = props.disableHoverListener,\n    disableHoverListener = _props$disableHoverLi === void 0 ? false : _props$disableHoverLi,\n    _props$disableInterac = props.disableInteractive,\n    disableInteractiveProp = _props$disableInterac === void 0 ? false : _props$disableInterac,\n    _props$disableTouchLi = props.disableTouchListener,\n    disableTouchListener = _props$disableTouchLi === void 0 ? false : _props$disableTouchLi,\n    _props$enterDelay = props.enterDelay,\n    enterDelay = _props$enterDelay === void 0 ? 100 : _props$enterDelay,\n    _props$enterNextDelay = props.enterNextDelay,\n    enterNextDelay = _props$enterNextDelay === void 0 ? 0 : _props$enterNextDelay,\n    _props$enterTouchDela = props.enterTouchDelay,\n    enterTouchDelay = _props$enterTouchDela === void 0 ? 700 : _props$enterTouchDela,\n    _props$followCursor = props.followCursor,\n    followCursor = _props$followCursor === void 0 ? false : _props$followCursor,\n    idProp = props.id,\n    _props$leaveDelay = props.leaveDelay,\n    leaveDelay = _props$leaveDelay === void 0 ? 0 : _props$leaveDelay,\n    _props$leaveTouchDela = props.leaveTouchDelay,\n    leaveTouchDelay = _props$leaveTouchDela === void 0 ? 1500 : _props$leaveTouchDela,\n    onClose = props.onClose,\n    onOpen = props.onOpen,\n    openProp = props.open,\n    disablePortal = props.disablePortal,\n    direction = props.direction,\n    keepMounted = props.keepMounted,\n    modifiersProp = props.modifiers,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottom' : _props$placement,\n    title = props.title,\n    _props$color = props.color,\n    colorProp = _props$color === void 0 ? 'neutral' : _props$color,\n    _props$variant = props.variant,\n    variant = _props$variant === void 0 ? 'solid' : _props$variant,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 'md' : _props$size,\n    _props$slots2 = props.slots,\n    slots = _props$slots2 === void 0 ? {} : _props$slots2,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = disablePortal ? getColor(inProps.color, colorProp) : colorProp;\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    childNode = _React$useState2[0],\n    setChildNode = _React$useState2[1];\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    arrowRef = _React$useState4[0],\n    setArrowRef = _React$useState4[1];\n  var ignoreNonTouchEvents = React.useRef(false);\n  var disableInteractive = disableInteractiveProp || followCursor;\n  var closeTimer = React.useRef();\n  var enterTimer = React.useRef();\n  var leaveTimer = React.useRef();\n  var touchTimer = React.useRef();\n  var _useControlled = useControlled({\n      controlled: openProp,\n      default: false,\n      name: 'Tooltip',\n      state: 'open'\n    }),\n    _useControlled2 = _slicedToArray(_useControlled, 2),\n    openState = _useControlled2[0],\n    setOpenState = _useControlled2[1];\n  var open = openState;\n  var id = useId(idProp);\n  var prevUserSelect = React.useRef();\n  var stopTouchInteraction = React.useCallback(function () {\n    if (prevUserSelect.current !== undefined) {\n      document.body.style.WebkitUserSelect = prevUserSelect.current;\n      prevUserSelect.current = undefined;\n    }\n    clearTimeout(touchTimer.current);\n  }, []);\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(closeTimer.current);\n      clearTimeout(enterTimer.current);\n      clearTimeout(leaveTimer.current);\n      stopTouchInteraction();\n    };\n  }, [stopTouchInteraction]);\n  var handleOpen = function handleOpen(event) {\n    if (hystersisTimer) {\n      clearTimeout(hystersisTimer);\n    }\n    hystersisOpen = true;\n\n    // The mouseover event will trigger for every nested element in the tooltip.\n    // We can skip rerendering when the tooltip is already open.\n    // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.\n    setOpenState(true);\n    if (onOpen && !open) {\n      onOpen(event);\n    }\n  };\n  var handleClose = useEventCallback(function (event) {\n    if (hystersisTimer) {\n      clearTimeout(hystersisTimer);\n    }\n    hystersisTimer = setTimeout(function () {\n      hystersisOpen = false;\n    }, 800 + leaveDelay);\n    setOpenState(false);\n    if (onClose && open) {\n      onClose(event);\n    }\n    clearTimeout(closeTimer.current);\n    closeTimer.current = setTimeout(function () {\n      ignoreNonTouchEvents.current = false;\n    }, 150);\n  });\n  var handleEnter = function handleEnter(event) {\n    if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {\n      return;\n    }\n\n    // Remove the title ahead of time.\n    // We don't want to wait for the next render commit.\n    // We would risk displaying two tooltips at the same time (native + this one).\n    if (childNode) {\n      childNode.removeAttribute('title');\n    }\n    clearTimeout(enterTimer.current);\n    clearTimeout(leaveTimer.current);\n    if (enterDelay || hystersisOpen && enterNextDelay) {\n      enterTimer.current = setTimeout(function () {\n        handleOpen(event);\n      }, hystersisOpen ? enterNextDelay : enterDelay);\n    } else {\n      handleOpen(event);\n    }\n  };\n  var handleLeave = function handleLeave(event) {\n    clearTimeout(enterTimer.current);\n    clearTimeout(leaveTimer.current);\n    leaveTimer.current = setTimeout(function () {\n      handleClose(event);\n    }, leaveDelay);\n  };\n  var _useIsFocusVisible = useIsFocusVisible(),\n    isFocusVisibleRef = _useIsFocusVisible.isFocusVisibleRef,\n    handleBlurVisible = _useIsFocusVisible.onBlur,\n    handleFocusVisible = _useIsFocusVisible.onFocus,\n    focusVisibleRef = _useIsFocusVisible.ref;\n  // We don't necessarily care about the focusVisible state (which is safe to access via ref anyway).\n  // We just need to re-render the Tooltip if the focus-visible state changes.\n  var _React$useState5 = React.useState(false),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    setChildIsFocusVisible = _React$useState6[1];\n  var handleBlur = function handleBlur(event) {\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setChildIsFocusVisible(false);\n      handleLeave(event);\n    }\n  };\n  var handleFocus = function handleFocus(event) {\n    // Workaround for https://github.com/facebook/react/issues/7769\n    // The autoFocus of React might trigger the event before the componentDidMount.\n    // We need to account for this eventuality.\n    if (!childNode) {\n      setChildNode(event.currentTarget);\n    }\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setChildIsFocusVisible(true);\n      handleEnter(event);\n    }\n  };\n  var detectTouchStart = function detectTouchStart(event) {\n    ignoreNonTouchEvents.current = true;\n    var childrenProps = children.props;\n    if (childrenProps.onTouchStart) {\n      childrenProps.onTouchStart(event);\n    }\n  };\n  var handleMouseOver = handleEnter;\n  var handleMouseLeave = handleLeave;\n  var handleTouchStart = function handleTouchStart(event) {\n    detectTouchStart(event);\n    clearTimeout(leaveTimer.current);\n    clearTimeout(closeTimer.current);\n    stopTouchInteraction();\n    prevUserSelect.current = document.body.style.WebkitUserSelect;\n    // Prevent iOS text selection on long-tap.\n    document.body.style.WebkitUserSelect = 'none';\n    touchTimer.current = setTimeout(function () {\n      document.body.style.WebkitUserSelect = prevUserSelect.current;\n      handleEnter(event);\n    }, enterTouchDelay);\n  };\n  var handleTouchEnd = function handleTouchEnd(event) {\n    if (children.props.onTouchEnd) {\n      children.props.onTouchEnd(event);\n    }\n    stopTouchInteraction();\n    clearTimeout(leaveTimer.current);\n    leaveTimer.current = setTimeout(function () {\n      handleClose(event);\n    }, leaveTouchDelay);\n  };\n  React.useEffect(function () {\n    if (!open) {\n      return undefined;\n    }\n    function handleKeyDown(nativeEvent) {\n      // IE11, Edge (prior to using Bink?) use 'Esc'\n      if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n        handleClose(nativeEvent);\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return function () {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleClose, open]);\n  var handleUseRef = useForkRef(setChildNode, ref);\n  var handleFocusRef = useForkRef(focusVisibleRef, handleUseRef);\n  var handleRef = useForkRef(children.ref, handleFocusRef);\n\n  // There is no point in displaying an empty tooltip.\n  if (typeof title !== 'number' && !title) {\n    open = false;\n  }\n  var popperRef = React.useRef(null);\n  var handleMouseMove = function handleMouseMove(event) {\n    var childrenProps = children.props;\n    if (childrenProps.onMouseMove) {\n      childrenProps.onMouseMove(event);\n    }\n    cursorPosition = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    if (popperRef.current) {\n      popperRef.current.update();\n    }\n  };\n  var nameOrDescProps = {};\n  var titleIsString = typeof title === 'string';\n  if (describeChild) {\n    nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;\n    nameOrDescProps['aria-describedby'] = open ? id : null;\n  } else {\n    nameOrDescProps['aria-label'] = titleIsString ? title : null;\n    nameOrDescProps['aria-labelledby'] = open && !titleIsString ? id : null;\n  }\n  var childrenProps = _extends({}, nameOrDescProps, other, {\n    component: component\n  }, children.props, {\n    className: clsx(className, children.props.className),\n    onTouchStart: detectTouchStart,\n    ref: handleRef\n  }, followCursor ? {\n    onMouseMove: handleMouseMove\n  } : {});\n  var interactiveWrapperListeners = {};\n  if (!disableTouchListener) {\n    childrenProps.onTouchStart = handleTouchStart;\n    childrenProps.onTouchEnd = handleTouchEnd;\n  }\n  if (!disableHoverListener) {\n    childrenProps.onMouseOver = composeMouseEventHandler(handleMouseOver, childrenProps.onMouseOver);\n    childrenProps.onMouseLeave = composeMouseEventHandler(handleMouseLeave, childrenProps.onMouseLeave);\n    if (!disableInteractive) {\n      interactiveWrapperListeners.onMouseOver = handleMouseOver;\n      interactiveWrapperListeners.onMouseLeave = handleMouseLeave;\n    }\n  }\n  if (!disableFocusListener) {\n    childrenProps.onFocus = composeFocusEventHandler(handleFocus, childrenProps.onFocus);\n    childrenProps.onBlur = composeFocusEventHandler(handleBlur, childrenProps.onBlur);\n    if (!disableInteractive) {\n      interactiveWrapperListeners.onFocus = handleFocus;\n      interactiveWrapperListeners.onBlur = handleBlur;\n    }\n  }\n  var ownerState = _extends({}, props, {\n    arrow: arrow,\n    disableInteractive: disableInteractive,\n    placement: placement,\n    touch: ignoreNonTouchEvents.current,\n    color: color,\n    variant: variant,\n    size: size\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var modifiers = React.useMemo(function () {\n    return [{\n      name: 'arrow',\n      enabled: Boolean(arrowRef),\n      options: {\n        element: arrowRef,\n        // https://popper.js.org/docs/v2/modifiers/arrow/#padding\n        // make the arrow looks nice with the Tooltip's border radius\n        padding: 6\n      }\n    }, {\n      name: 'offset',\n      options: {\n        offset: [0, 10]\n      }\n    }].concat(_toConsumableArray(modifiersProp || []));\n  }, [arrowRef, modifiersProp]);\n  var _useSlot = useSlot('root', {\n      additionalProps: _extends({\n        id: id,\n        popperRef: popperRef,\n        placement: placement,\n        anchorEl: followCursor ? {\n          getBoundingClientRect: function getBoundingClientRect() {\n            return {\n              top: cursorPosition.y,\n              left: cursorPosition.x,\n              right: cursorPosition.x,\n              bottom: cursorPosition.y,\n              width: 0,\n              height: 0\n            };\n          }\n        } : childNode,\n        open: childNode ? open : false,\n        disablePortal: disablePortal,\n        keepMounted: keepMounted,\n        direction: direction,\n        modifiers: modifiers\n      }, interactiveWrapperListeners),\n      ref: null,\n      className: classes.root,\n      elementType: TooltipRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  var _useSlot3 = useSlot('arrow', {\n      ref: setArrowRef,\n      className: classes.arrow,\n      elementType: TooltipArrow,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot4 = _slicedToArray(_useSlot3, 2),\n    SlotArrow = _useSlot4[0],\n    arrowProps = _useSlot4[1];\n  var result = /*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, !((_props$slots = props.slots) != null && _props$slots.root) && {\n    as: Popper,\n    slots: {\n      root: component || 'div'\n    }\n  }, {\n    children: [title, arrow ? /*#__PURE__*/_jsx(SlotArrow, _extends({}, arrowProps)) : null]\n  }));\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/React.isValidElement(children) && /*#__PURE__*/React.cloneElement(children, childrenProps), disablePortal ? result : /*#__PURE__*/\n    // For portal popup, the children should not inherit color inversion from the upper parent.\n    _jsx(ColorInversion.Provider, {\n      value: undefined,\n      children: result\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Tooltip.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, adds an arrow to the tooltip.\n   * @default false\n   */\n  arrow: PropTypes.bool,\n  /**\n   * Tooltip reference element.\n   */\n  children: PropTypes.element.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Set to `true` if the `title` acts as an accessible description.\n   * By default the `title` acts as an accessible label for the child.\n   * @default false\n   */\n  describeChild: PropTypes.bool,\n  /**\n   * Direction of the text.\n   * @default 'ltr'\n   */\n  direction: PropTypes.oneOf(['ltr', 'rtl']),\n  /**\n   * Do not respond to focus-visible events.\n   * @default false\n   */\n  disableFocusListener: PropTypes.bool,\n  /**\n   * Do not respond to hover events.\n   * @default false\n   */\n  disableHoverListener: PropTypes.bool,\n  /**\n   * Makes a tooltip not interactive, i.e. it will close when the user\n   * hovers over the tooltip before the `leaveDelay` is expired.\n   * @default false\n   */\n  disableInteractive: PropTypes.bool,\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * Do not respond to long press touch events.\n   * @default false\n   */\n  disableTouchListener: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before showing the tooltip.\n   * This prop won't impact the enter touch delay (`enterTouchDelay`).\n   * @default 100\n   */\n  enterDelay: PropTypes.number,\n  /**\n   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.\n   * @default 0\n   */\n  enterNextDelay: PropTypes.number,\n  /**\n   * The number of milliseconds a user must touch the element before showing the tooltip.\n   * @default 700\n   */\n  enterTouchDelay: PropTypes.number,\n  /**\n   * If `true`, the tooltip follow the cursor over the wrapped element.\n   * @default false\n   */\n  followCursor: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Popper.\n   * @default false\n   */\n  keepMounted: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before hiding the tooltip.\n   * This prop won't impact the leave touch delay (`leaveTouchDelay`).\n   * @default 0\n   */\n  leaveDelay: PropTypes.number,\n  /**\n   * The number of milliseconds after the user stops touching an element before hiding the tooltip.\n   * @default 1500\n   */\n  leaveTouchDelay: PropTypes.number,\n  /**\n   * Popper.js is based on a \"plugin-like\" architecture,\n   * most of its features are fully encapsulated \"modifiers\".\n   *\n   * A modifier is a function that is called each time Popper.js needs to\n   * compute the position of the popper.\n   * For this reason, modifiers should be very performant to avoid bottlenecks.\n   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).\n   */\n  modifiers: PropTypes.arrayOf(PropTypes.shape({\n    data: PropTypes.object,\n    effect: PropTypes.func,\n    enabled: PropTypes.bool,\n    fn: PropTypes.func,\n    name: PropTypes.any,\n    options: PropTypes.object,\n    phase: PropTypes.oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),\n    requires: PropTypes.arrayOf(PropTypes.string),\n    requiresIfExists: PropTypes.arrayOf(PropTypes.string)\n  })),\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be open.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * Tooltip placement.\n   * @default 'bottom'\n   */\n  placement: PropTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg']),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    arrow: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    arrow: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.\n   */\n  title: PropTypes.node,\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'solid'\n   */\n  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])\n} : void 0;\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}