{"ast":null,"code":"import { useRef, useEffect } from 'react';\n\n/**\r\n * Track whether a component is current mounted. Generally less preferable than\r\n * properlly canceling effects so they don't run after a component is unmounted,\r\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\r\n *\r\n * @returns a function that returns the current isMounted state of the component\r\n *\r\n * ```ts\r\n * const [data, setData] = useState(null)\r\n * const isMounted = useMounted()\r\n *\r\n * useEffect(() => {\r\n *   fetchdata().then((newData) => {\r\n *      if (isMounted()) {\r\n *        setData(newData);\r\n *      }\r\n *   })\r\n * })\r\n * ```\r\n */\nexport default function useMounted() {\n  const mounted = useRef(true);\n  const isMounted = useRef(() => mounted.current);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","map":null,"metadata":{},"sourceType":"module"}