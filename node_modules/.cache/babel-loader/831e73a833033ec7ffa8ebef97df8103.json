{"ast":null,"code":"import _objectSpread from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nvar _excluded = [\"class\"];\nimport SequentialIDGenerator from \"../sequential-id-generator\";\nimport { Cache, MultiCache } from \"../cache\";\nimport injectStylePrefixed from \"../inject-style-prefixed\";\nimport { styleBlockToRule, atomicSelector, keyframesBlockToRule, declarationsToBlock, keyframesToBlock, fontFaceBlockToRule } from \"../css\";\nvar StyletronServer = /*#__PURE__*/function () {\n  function StyletronServer() {\n    var _this = this;\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, StyletronServer);\n    this.styleRules = {\n      \"\": \"\"\n    };\n    this.styleCache = new MultiCache(new SequentialIDGenerator(opts.prefix), function (media) {\n      _this.styleRules[media] = \"\";\n    }, function (cache, id, value) {\n      var pseudo = value.pseudo,\n        block = value.block;\n      _this.styleRules[cache.key] += styleBlockToRule(atomicSelector(id, pseudo), block);\n    });\n    this.fontFaceRules = \"\";\n    this.fontFaceCache = new Cache(new SequentialIDGenerator(opts.prefix), function (cache, id, value) {\n      _this.fontFaceRules += fontFaceBlockToRule(id, declarationsToBlock(value));\n    });\n    this.keyframesRules = \"\";\n    this.keyframesCache = new Cache(new SequentialIDGenerator(opts.prefix), function (cache, id, value) {\n      _this.keyframesRules += keyframesBlockToRule(id, keyframesToBlock(value));\n    });\n  }\n  _createClass(StyletronServer, [{\n    key: \"renderStyle\",\n    value: function renderStyle(style) {\n      return injectStylePrefixed(this.styleCache, style, \"\", \"\");\n    }\n  }, {\n    key: \"renderFontFace\",\n    value: function renderFontFace(fontFace) {\n      var key = JSON.stringify(fontFace);\n      return this.fontFaceCache.addValue(key, fontFace);\n    }\n  }, {\n    key: \"renderKeyframes\",\n    value: function renderKeyframes(keyframes) {\n      var key = JSON.stringify(keyframes);\n      return this.keyframesCache.addValue(key, keyframes);\n    }\n  }, {\n    key: \"getStylesheets\",\n    value: function getStylesheets() {\n      return [].concat(_toConsumableArray(this.keyframesRules.length ? [{\n        css: this.keyframesRules,\n        attrs: {\n          \"data-hydrate\": \"keyframes\"\n        }\n      }] : []), _toConsumableArray(this.fontFaceRules.length ? [{\n        css: this.fontFaceRules,\n        attrs: {\n          \"data-hydrate\": \"font-face\"\n        }\n      }] : []), _toConsumableArray(sheetify(this.styleRules, this.styleCache.getSortedCacheKeys())));\n    }\n  }, {\n    key: \"getStylesheetsHtml\",\n    value: function getStylesheetsHtml() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"_styletron_hydrate_\";\n      return generateHtmlString(this.getStylesheets(), className);\n    }\n  }, {\n    key: \"getCss\",\n    value: function getCss() {\n      return this.keyframesRules + this.fontFaceRules + stringify(this.styleRules, this.styleCache.getSortedCacheKeys());\n    }\n  }]);\n  return StyletronServer;\n}();\nexport function generateHtmlString(sheets, className) {\n  var html = \"\";\n  for (var i = 0; i < sheets.length; i++) {\n    var sheet = sheets[i];\n    var _sheet$attrs = sheet.attrs,\n      originalClassName = _sheet$attrs.class,\n      rest = _objectWithoutProperties(_sheet$attrs, _excluded);\n    var attrs = _objectSpread({\n      class: originalClassName ? \"\".concat(className, \" \").concat(originalClassName) : className\n    }, rest);\n    html += \"<style\".concat(attrsToString(attrs), \">\").concat(sheet.css, \"</style>\");\n  }\n  return html;\n}\nfunction attrsToString(attrs) {\n  var result = \"\";\n  for (var attr in attrs) {\n    var value = attrs[attr];\n    if (value === true) {\n      result += \" \" + attr;\n    } else if (value !== false) {\n      result += \" \".concat(attr, \"=\\\"\").concat(value, \"\\\"\");\n    }\n  }\n  return result;\n}\nfunction stringify(styleRules, sortedCacheKeys) {\n  var result = \"\";\n  sortedCacheKeys.forEach(function (cacheKey) {\n    var rules = styleRules[cacheKey];\n    if (cacheKey !== \"\") {\n      result += \"@media \".concat(cacheKey, \"{\").concat(rules, \"}\");\n    } else {\n      result += rules;\n    }\n  });\n  return result;\n}\nfunction sheetify(styleRules, sortedCacheKeys) {\n  if (sortedCacheKeys.length === 0) {\n    return [{\n      css: \"\",\n      attrs: {}\n    }];\n  }\n  var sheets = [];\n  sortedCacheKeys.forEach(function (cacheKey) {\n    // omit media (cacheKey) attribute if empty\n    var attrs = cacheKey === \"\" ? {} : {\n      media: cacheKey\n    };\n    sheets.push({\n      css: styleRules[cacheKey],\n      attrs: attrs\n    });\n  });\n  return sheets;\n}\nexport default StyletronServer;","map":null,"metadata":{},"sourceType":"module"}