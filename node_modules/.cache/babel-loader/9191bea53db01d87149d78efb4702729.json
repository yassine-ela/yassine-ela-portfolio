{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checked\", \"defaultChecked\", \"disabled\", \"onBlur\", \"onChange\", \"onFocus\", \"onFocusVisible\", \"readOnly\", \"required\", \"id\", \"color\", \"variant\", \"size\", \"startDecorator\", \"endDecorator\", \"component\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { useSwitch } from '@mui/base/useSwitch';\nimport { styled, useThemeProps } from '../styles';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport useSlot from '../utils/useSlot';\nimport switchClasses, { getSwitchUtilityClass } from './switchClasses';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    checked,\n    disabled,\n    focusVisible,\n    readOnly,\n    color,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readOnly', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`],\n    thumb: ['thumb', checked && 'checked'],\n    track: ['track', checked && 'checked'],\n    action: ['action', focusVisible && 'focusVisible'],\n    input: ['input'],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator']\n  };\n  return composeClasses(slots, getSwitchUtilityClass, {});\n};\nconst switchColorVariables = ({\n  theme,\n  ownerState\n}) => (data = {}) => {\n  var _theme$variants, _styles$backgroundCol, _styles$backgroundCol2;\n  const styles = ((_theme$variants = theme.variants[`${ownerState.variant}${data.state || ''}`]) == null ? void 0 : _theme$variants[ownerState.color]) || {};\n  return {\n    '--Switch-trackBackground': (_styles$backgroundCol = styles.backgroundColor) != null ? _styles$backgroundCol : theme.vars.palette.background.surface,\n    '--Switch-trackColor': styles.color,\n    '--Switch-trackBorderColor': ownerState.variant === 'outlined' ? styles.borderColor : 'currentColor',\n    '--Switch-thumbBackground': styles.color,\n    '--Switch-thumbColor': (_styles$backgroundCol2 = styles.backgroundColor) != null ? _styles$backgroundCol2 : theme.vars.palette.background.surface\n  };\n};\nconst SwitchRoot = styled('div', {\n  name: 'JoySwitch',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme,\n  ownerState\n}) => {\n  var _theme$variants2;\n  const getColorVariables = switchColorVariables({\n    theme,\n    ownerState\n  });\n  return _extends({\n    '--Icon-color': 'currentColor',\n    '--variant-borderWidth': (_theme$variants2 = theme.variants[ownerState.variant]) == null || (_theme$variants2 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants2['--variant-borderWidth'],\n    '--Switch-trackRadius': theme.vars.radius.xl,\n    '--Switch-thumbShadow': ownerState.variant === 'soft' ? 'none' : '0 0 0 1px var(--Switch-trackBackground)'\n  }, ownerState.size === 'sm' && {\n    '--Switch-trackWidth': '32px',\n    '--Switch-trackHeight': '16px',\n    '--Switch-thumbSize': '8px',\n    '--Switch-gap': '6px',\n    fontSize: theme.vars.fontSize.sm\n  }, ownerState.size === 'md' && {\n    '--Switch-trackWidth': '40px',\n    '--Switch-trackHeight': '20px',\n    '--Switch-thumbSize': '12px',\n    '--Switch-gap': '8px',\n    fontSize: theme.vars.fontSize.md\n  }, ownerState.size === 'lg' && {\n    '--Switch-trackWidth': '48px',\n    '--Switch-trackHeight': '24px',\n    '--Switch-thumbSize': '16px',\n    '--Switch-gap': '12px'\n  }, {\n    '--unstable_paddingBlock': `max((var(--Switch-trackHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Switch-thumbSize)) / 2, 0px)`,\n    '--Switch-thumbRadius': `max(var(--Switch-trackRadius) - var(--unstable_paddingBlock), min(var(--unstable_paddingBlock) / 2, var(--Switch-trackRadius) / 2))`,\n    '--Switch-thumbWidth': 'var(--Switch-thumbSize)',\n    '--Switch-thumbOffset': `max((var(--Switch-trackHeight) - var(--Switch-thumbSize)) / 2, 0px)`\n  }, getColorVariables(), {\n    '&:hover': _extends({}, getColorVariables({\n      state: 'Hover'\n    })),\n    [`&.${switchClasses.checked}`]: _extends({}, getColorVariables(), {\n      '&:hover': _extends({}, getColorVariables({\n        state: 'Hover'\n      }))\n    }),\n    [`&.${switchClasses.disabled}`]: _extends({\n      pointerEvents: 'none',\n      color: theme.vars.palette.text.tertiary\n    }, getColorVariables({\n      state: 'Disabled'\n    })),\n    display: 'inline-flex',\n    alignItems: 'center',\n    alignSelf: 'center',\n    fontFamily: theme.vars.fontFamily.body,\n    position: 'relative',\n    padding: 'calc((var(--Switch-thumbSize) / 2) - (var(--Switch-trackHeight) / 2)) calc(-1 * var(--Switch-thumbOffset))',\n    backgroundColor: 'initial',\n    // clear background in case `outlined` variant contain background.\n    border: 'none',\n    margin: 'var(--unstable_Switch-margin)'\n  });\n});\nconst SwitchAction = styled('div', {\n  name: 'JoySwitch',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})(({\n  theme\n}) => ({\n  borderRadius: 'var(--Switch-trackRadius)',\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n  [theme.focus.selector]: theme.focus.default\n}));\nconst SwitchInput = styled('input', {\n  name: 'JoySwitch',\n  slot: 'Input',\n  overridesResolver: (props, styles) => styles.input\n})({\n  margin: 0,\n  height: '100%',\n  width: '100%',\n  opacity: 0,\n  position: 'absolute',\n  cursor: 'pointer'\n});\nconst SwitchTrack = styled('span', {\n  name: 'JoySwitch',\n  slot: 'Track',\n  overridesResolver: (props, styles) => styles.track\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  position: 'relative',\n  color: 'var(--Switch-trackColor)',\n  height: 'var(--Switch-trackHeight)',\n  width: 'var(--Switch-trackWidth)',\n  display: 'flex',\n  flexShrink: 0,\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  boxSizing: 'border-box',\n  border: 'var(--variant-borderWidth, 0px) solid',\n  borderColor: 'var(--Switch-trackBorderColor)',\n  backgroundColor: 'var(--Switch-trackBackground)',\n  borderRadius: 'var(--Switch-trackRadius)',\n  fontFamily: theme.vars.fontFamily.body\n}, ownerState.size === 'sm' && {\n  fontSize: theme.vars.fontSize.xs\n}, ownerState.size === 'md' && {\n  fontSize: theme.vars.fontSize.sm\n}, ownerState.size === 'lg' && {\n  fontSize: theme.vars.fontSize.md\n}));\nconst SwitchThumb = styled('span', {\n  name: 'JoySwitch',\n  slot: 'Thumb',\n  overridesResolver: (props, styles) => styles.thumb\n})({\n  '--Icon-fontSize': 'calc(var(--Switch-thumbSize) * 0.75)',\n  display: 'inline-flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  position: 'absolute',\n  top: '50%',\n  left: 'calc(50% - var(--Switch-trackWidth) / 2 + var(--Switch-thumbWidth) / 2 + var(--Switch-thumbOffset))',\n  transform: 'translate(-50%, -50%)',\n  width: 'var(--Switch-thumbWidth)',\n  height: 'var(--Switch-thumbSize)',\n  borderRadius: 'var(--Switch-thumbRadius)',\n  boxShadow: 'var(--Switch-thumbShadow)',\n  color: 'var(--Switch-thumbColor)',\n  backgroundColor: 'var(--Switch-thumbBackground)',\n  [`&.${switchClasses.checked}`]: {\n    left: 'calc(50% + var(--Switch-trackWidth) / 2 - var(--Switch-thumbWidth) / 2 - var(--Switch-thumbOffset))'\n  }\n});\nconst SwitchStartDecorator = styled('span', {\n  name: 'JoySwitch',\n  slot: 'StartDecorator',\n  overridesResolver: (props, styles) => styles.startDecorator\n})({\n  display: 'inline-flex',\n  marginInlineEnd: 'var(--Switch-gap)'\n});\nconst SwitchEndDecorator = styled('span', {\n  name: 'JoySwitch',\n  slot: 'EndDecorator',\n  overridesResolver: (props, styles) => styles.endDecorator\n})({\n  display: 'inline-flex',\n  marginInlineStart: 'var(--Switch-gap)'\n});\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Switch](https://mui.com/joy-ui/react-switch/)\r\n *\r\n * API:\r\n *\r\n * - [Switch API](https://mui.com/joy-ui/api/switch/)\r\n */\nconst Switch = /*#__PURE__*/React.forwardRef(function Switch(inProps, ref) {\n  var _ref, _inProps$size, _formControl$color, _ref2, _inProps$disabled;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoySwitch'\n  });\n  const {\n      disabled: disabledExternalProp,\n      id,\n      color: colorProp,\n      variant = 'solid',\n      size: sizeProp = 'md',\n      startDecorator,\n      endDecorator,\n      component,\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const formControl = React.useContext(FormControlContext);\n  if (process.env.NODE_ENV !== 'production') {\n    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (registerEffect) {\n        return registerEffect();\n      }\n      return undefined;\n    }, [registerEffect]);\n  }\n  const size = (_ref = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref : sizeProp;\n  const {\n    getColor\n  } = useColorInversion(variant);\n  const color = getColor(inProps.color, formControl != null && formControl.error ? 'danger' : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);\n  const useSwitchProps = _extends({\n    disabled: (_ref2 = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref2 : disabledExternalProp\n  }, props);\n  const {\n    getInputProps,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = useSwitch(useSwitchProps);\n  const ownerState = _extends({}, props, {\n    id,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly,\n    color: checked ? color || 'primary' : color || 'neutral',\n    variant,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref,\n    className: classes.root,\n    elementType: SwitchRoot,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotStartDecorator, startDecoratorProps] = useSlot('startDecorator', {\n    additionalProps: {\n      'aria-hidden': true // hide the decorator from assistive technology\n    },\n    className: classes.startDecorator,\n    elementType: SwitchStartDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotEndDecorator, endDecoratorProps] = useSlot('endDecorator', {\n    additionalProps: {\n      'aria-hidden': true // hide the decorator from assistive technology\n    },\n    className: classes.endDecorator,\n    elementType: SwitchEndDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotTrack, trackProps] = useSlot('track', {\n    className: classes.track,\n    elementType: SwitchTrack,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotThumb, thumbProps] = useSlot('thumb', {\n    className: classes.thumb,\n    elementType: SwitchThumb,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotAction, actionProps] = useSlot('action', {\n    className: classes.action,\n    elementType: SwitchAction,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotInput, inputProps] = useSlot('input', {\n    additionalProps: {\n      id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,\n      'aria-describedby': formControl == null ? void 0 : formControl['aria-describedby']\n    },\n    className: classes.input,\n    elementType: SwitchInput,\n    externalForwardedProps,\n    getSlotProps: getInputProps,\n    ownerState\n  });\n  return /*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n    children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {\n      children: typeof startDecorator === 'function' ? startDecorator(ownerState) : startDecorator\n    })), /*#__PURE__*/_jsxs(SlotTrack, _extends({}, trackProps, {\n      children: [trackProps == null ? void 0 : trackProps.children, /*#__PURE__*/_jsx(SlotThumb, _extends({}, thumbProps))]\n    })), /*#__PURE__*/_jsx(SlotAction, _extends({}, actionProps, {\n      children: /*#__PURE__*/_jsx(SlotInput, _extends({}, inputProps))\n    })), endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {\n      children: typeof endDecorator === 'function' ? endDecorator(ownerState) : endDecorator\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * If `true`, the component is checked.\r\n   */\n  checked: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   * @default 'neutral'\r\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * The default checked state. Use when the component is not controlled.\r\n   */\n  defaultChecked: PropTypes.bool,\n  /**\r\n   * If `true`, the component is disabled.\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * The element that appears at the end of the switch.\r\n   */\n  endDecorator: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.node, PropTypes.func]),\n  /**\r\n   * @ignore\r\n   */\n  id: PropTypes.string,\n  /**\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n  /**\r\n   * Callback fired when the state is changed.\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value` (string).\r\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\r\n   */\n  onChange: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onFocusVisible: PropTypes.func,\n  /**\r\n   * If `true`, the component is read only.\r\n   */\n  readOnly: PropTypes.bool,\n  /**\r\n   * If `true`, the `input` element is required.\r\n   */\n  required: PropTypes.bool,\n  /**\r\n   * The size of the component.\r\n   * @default 'md'\r\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    action: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    endDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    track: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    action: PropTypes.elementType,\n    endDecorator: PropTypes.elementType,\n    input: PropTypes.elementType,\n    root: PropTypes.elementType,\n    startDecorator: PropTypes.elementType,\n    thumb: PropTypes.elementType,\n    track: PropTypes.elementType\n  }),\n  /**\r\n   * The element that appears at the end of the switch.\r\n   */\n  startDecorator: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.node, PropTypes.func]),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\r\n   * @default 'solid'\r\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}