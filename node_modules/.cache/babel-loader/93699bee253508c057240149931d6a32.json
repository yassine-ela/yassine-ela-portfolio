{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"value\", \"defaultValue\", \"orientation\", \"direction\", \"onChange\", \"selectionFollowsFocus\", \"slotProps\", \"slots\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSlotProps } from '../utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getTabsUtilityClass } from './tabsClasses';\nimport { useTabs } from '../useTabs';\nimport { TabsProvider } from '../useTabs/TabsProvider';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    orientation\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabsUtilityClass));\n};\n\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\r\n *\r\n * API:\r\n *\r\n * - [Tabs API](https://mui.com/base-ui/react-tabs/components-api/#tabs)\r\n */\nconst Tabs = /*#__PURE__*/React.forwardRef(function Tabs(props, forwardedRef) {\n  var _slots$root;\n  const {\n      children,\n      orientation = 'horizontal',\n      direction = 'ltr',\n      slotProps = {},\n      slots = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    contextValue\n  } = useTabs(props);\n  const ownerState = _extends({}, props, {\n    orientation,\n    direction\n  });\n  const classes = useUtilityClasses(ownerState);\n  const TabsRoot = (_slots$root = slots.root) != null ? _slots$root : 'div';\n  const tabsRootProps = useSlotProps({\n    elementType: TabsRoot,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabsRoot, _extends({}, tabsRootProps, {\n    children: /*#__PURE__*/_jsx(TabsProvider, {\n      value: contextValue,\n      children: children\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Tabs.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\r\n   * The direction of the text.\r\n   * @default 'ltr'\r\n   */\n  direction: PropTypes.oneOf(['ltr', 'rtl']),\n  /**\r\n   * Callback invoked when new value is being set.\r\n   */\n  onChange: PropTypes.func,\n  /**\r\n   * The component orientation (layout flow direction).\r\n   * @default 'horizontal'\r\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\r\n   * If `true` the selected tab changes on focus. Otherwise it only\r\n   * changes on activation.\r\n   */\n  selectionFollowsFocus: PropTypes.bool,\n  /**\r\n   * The props used for each slot inside the Tabs.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside the Tabs.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * The value of the currently selected `Tab`.\r\n   * If you don't want any selected `Tab`, you can set this prop to `null`.\r\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport { Tabs };","map":null,"metadata":{},"sourceType":"module"}