{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"component\", \"children\", \"color\", \"variant\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useThemeProps } from '../styles';\nimport styled from '../styles/styled';\nimport accordionDetailsClasses, { getAccordionDetailsUtilityClass } from './accordionDetailsClasses';\nimport useSlot from '../utils/useSlot';\nimport AccordionContext from '../Accordion/AccordionContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    expanded\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded'],\n    content: ['content', expanded && 'expanded']\n  };\n  return composeClasses(slots, getAccordionDetailsUtilityClass, {});\n};\nconst AccordionDetailsRoot = styled('div', {\n  name: 'JoyAccordionDetails',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(_ref => {\n  let {\n    ownerState,\n    theme\n  } = _ref;\n  var _theme$variants;\n  return _extends({\n    overflow: 'hidden',\n    borderRadius: 'var(--AccordionDetails-radius)',\n    display: 'grid',\n    gridTemplateRows: '1fr',\n    marginInline: 'calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))',\n    transition: 'var(--AccordionDetails-transition)'\n  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {\n    [\"&:not(.\".concat(accordionDetailsClasses.expanded, \")\")]: {\n      gridTemplateRows: '0fr'\n    }\n  });\n});\n\n/**\r\n * The content slot is required because the root slot is a CSS Grid, it needs a child.\r\n */\nconst AccordionDetailsContent = styled('div', {\n  name: 'JoyAccordionDetails',\n  slot: 'Content',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'flex',\n  flexDirection: 'column',\n  overflow: 'hidden',\n  // required for user-provided transition to work\n  // Need to apply padding to content rather than root because the overflow.\n  // Otherwise, the focus ring of the children can be cut off.\n  paddingInlineStart: 'var(--ListItem-paddingLeft)',\n  paddingInlineEnd: 'var(--ListItem-paddingRight)',\n  paddingBlockStart: 'calc(var(--ListItem-paddingY) / 2)',\n  paddingBlockEnd: 'calc(2.5 * var(--ListItem-paddingY))',\n  transition: 'var(--AccordionDetails-transition)',\n  [\"&:not(.\".concat(accordionDetailsClasses.expanded, \")\")]: {\n    paddingBlock: 0\n  }\n});\n\n/**\r\n * ⚠️ AccordionDetails must be used as a direct child of the [Card](https://mui.com/joy-ui/react-card/) component.\r\n *\r\n * Demos:\r\n *\r\n * - [Accordion](https://mui.com/joy-ui/react-accordion/)\r\n *\r\n * API:\r\n *\r\n * - [AccordionDetails API](https://mui.com/joy-ui/api/accordion-details/)\r\n */\nconst AccordionDetails = /*#__PURE__*/React.forwardRef(function AccordionDetails(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyAccordionDetails'\n  });\n  const {\n      component = 'div',\n      children,\n      color = 'neutral',\n      variant = 'plain',\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    accordionId,\n    expanded = false\n  } = React.useContext(AccordionContext);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(rootRef, ref);\n  React.useEffect(() => {\n    // When accordion is closed, prevent tabbing into the details content.\n    if (rootRef.current) {\n      const elements = rootRef.current.querySelectorAll('a, button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])');\n      elements.forEach(elm => {\n        if (expanded) {\n          const prevTabIndex = elm.getAttribute('data-prev-tabindex');\n          const currentTabIndex = elm.getAttribute('tabindex');\n          if (currentTabIndex && prevTabIndex) {\n            // restore tabindex\n            elm.setAttribute('tabindex', prevTabIndex);\n            elm.removeAttribute('data-prev-tabindex');\n          }\n          if (!prevTabIndex && !currentTabIndex) {\n            elm.removeAttribute('tabindex');\n          }\n        } else {\n          elm.setAttribute('data-prev-tabindex', elm.getAttribute('tabindex') || '');\n          elm.setAttribute('tabindex', '-1');\n        }\n      });\n    }\n  }, [expanded]);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const ownerState = _extends({}, props, {\n    component,\n    color,\n    variant,\n    expanded,\n    nesting: true // for the List styles\n  });\n  const classes = useUtilityClasses(ownerState);\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref: handleRef,\n    className: classes.root,\n    elementType: AccordionDetailsRoot,\n    externalForwardedProps,\n    additionalProps: {\n      id: \"\".concat(accordionId, \"-details\"),\n      'aria-labelledby': \"\".concat(accordionId, \"-summary\"),\n      role: 'region',\n      hidden: expanded ? undefined : true\n    },\n    ownerState\n  });\n  const [SlotContent, contentProps] = useSlot('content', {\n    className: classes.content,\n    elementType: AccordionDetailsContent,\n    externalForwardedProps,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: /*#__PURE__*/_jsx(SlotContent, _extends({}, contentProps, {\n      children: children\n    }))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? AccordionDetails.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * Used to render icon or text elements inside the AccordionDetails if `src` is not set.\r\n   * This can be an element, or just a string.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   * @default 'neutral'\r\n   */\n  color: PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']),\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    content: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    content: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\r\n   * @default 'plain'\r\n   */\n  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])\n} : void 0;\nexport default AccordionDetails;","map":null,"metadata":{},"sourceType":"module"}