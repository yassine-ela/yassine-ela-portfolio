{"ast":null,"code":"import SequentialIDGenerator from \"./sequential-id-generator\";\nimport sortMq from \"./sort-css-media-queries\";\nexport class MultiCache {\n  constructor(idGenerator, onNewCache, onNewValue) {\n    this.idGenerator = idGenerator;\n    this.onNewCache = onNewCache;\n    this.onNewValue = onNewValue;\n    this.sortedCacheKeys = [];\n    this.caches = {};\n  }\n  getCache(key) {\n    if (!this.caches[key]) {\n      const cache = new Cache(this.idGenerator, this.onNewValue);\n      cache.key = key;\n      this.sortedCacheKeys.push(key);\n      this.sortedCacheKeys.sort(sortMq);\n      const keyIndex = this.sortedCacheKeys.indexOf(key);\n      const insertBeforeMedia = keyIndex < this.sortedCacheKeys.length - 1 ? this.sortedCacheKeys[keyIndex + 1] : void 0;\n      this.caches[key] = cache;\n      this.onNewCache(key, cache, insertBeforeMedia);\n    }\n    return this.caches[key];\n  }\n  getSortedCacheKeys() {\n    return this.sortedCacheKeys;\n  }\n}\nexport class Cache {\n  constructor(idGenerator, onNewValue) {\n    this.cache = {};\n    this.idGenerator = idGenerator;\n    this.onNewValue = onNewValue;\n  }\n  addValue(key, value) {\n    const cached = this.cache[key];\n    if (cached) {\n      return cached;\n    }\n    const id = this.idGenerator.next();\n    this.cache[key] = id;\n    this.onNewValue(this, id, value);\n    return id;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}