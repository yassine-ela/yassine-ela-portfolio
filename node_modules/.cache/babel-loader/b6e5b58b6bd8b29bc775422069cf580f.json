{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _Cancel;\nvar _excluded = [\"children\", \"variant\", \"color\", \"disabled\", \"onKeyDown\", \"onDelete\", \"onClick\", \"component\", \"slots\", \"slotProps\"],\n  _excluded2 = [\"onDelete\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { useButton } from '@mui/base/useButton';\nimport { useThemeProps } from '../styles';\nimport styled from '../styles/styled';\nimport { useVariantColor } from '../styles/variantColorInheritance';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport Cancel from '../internal/svg-icons/Cancel';\nimport { getChipDeleteUtilityClass } from './chipDeleteClasses';\nimport ChipContext from '../Chip/ChipContext';\nimport useSlot from '../utils/useSlot';\nimport { StyledIconButton } from '../IconButton/IconButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var focusVisible = ownerState.focusVisible,\n    variant = ownerState.variant,\n    color = ownerState.color,\n    disabled = ownerState.disabled;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color))]\n  };\n  return composeClasses(slots, getChipDeleteUtilityClass, {});\n};\nvar ChipDeleteRoot = styled(StyledIconButton, {\n  name: 'JoyChipDelete',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref) {\n  var theme = _ref.theme;\n  return {\n    '--IconButton-size': 'var(--Chip-deleteSize, 2rem)',\n    '--Icon-fontSize': 'calc(var(--IconButton-size, 2rem) / 1.3)',\n    minWidth: 'var(--IconButton-size, 2rem)',\n    // use min-width instead of height to make the button resilient to its content\n    minHeight: 'var(--IconButton-size, 2rem)',\n    // use min-height instead of height to make the button resilient to its content\n    fontSize: theme.vars.fontSize.sm,\n    paddingInline: '2px',\n    // add a gap, in case the content is long, e.g. multiple icons\n    pointerEvents: 'visible',\n    // force the ChipDelete to be hoverable because the decorator can have pointerEvents 'none'\n    borderRadius: 'var(--Chip-deleteRadius, 50%)',\n    zIndex: 1,\n    // overflow above sibling button or anchor\n    padding: 0 // reset user agent stylesheet\n  };\n});\n\n/**\n *\n * Demos:\n *\n * - [Chip](https://mui.com/joy-ui/react-chip/)\n *\n * API:\n *\n * - [ChipDelete API](https://mui.com/joy-ui/api/chip-delete/)\n */\nvar ChipDelete = /*#__PURE__*/React.forwardRef(function ChipDelete(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyChipDelete'\n  });\n  var children = props.children,\n    _props$variant = props.variant,\n    variantProp = _props$variant === void 0 ? 'plain' : _props$variant,\n    _props$color = props.color,\n    colorProp = _props$color === void 0 ? 'neutral' : _props$color,\n    disabledProp = props.disabled,\n    onKeyDown = props.onKeyDown,\n    onDelete = props.onDelete,\n    onClick = props.onClick,\n    component = props.component,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var chipContext = React.useContext(ChipContext);\n  var _useVariantColor = useVariantColor(inProps.variant, inProps.color, true),\n    _useVariantColor$vari = _useVariantColor.variant,\n    variant = _useVariantColor$vari === void 0 ? variantProp : _useVariantColor$vari,\n    _useVariantColor$colo = _useVariantColor.color,\n    inheritedColor = _useVariantColor$colo === void 0 ? colorProp : _useVariantColor$colo;\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, inheritedColor);\n  var disabled = disabledProp != null ? disabledProp : chipContext.disabled;\n  var buttonRef = React.useRef(null);\n  var handleRef = useForkRef(buttonRef, ref);\n  var _useButton = useButton(_extends({}, props, {\n      disabled: disabled,\n      rootRef: handleRef\n    })),\n    focusVisible = _useButton.focusVisible,\n    getRootProps = _useButton.getRootProps;\n  var ownerState = _extends({}, props, {\n    disabled: disabled,\n    variant: variant,\n    color: color,\n    focusVisible: focusVisible\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var handleClickDelete = function handleClickDelete(event) {\n    if (!disabled && onDelete) {\n      onDelete(event);\n    }\n    if (onClick) {\n      onClick(event);\n    }\n  };\n  var handleKeyDelete = function handleKeyDelete(event) {\n    if (['Backspace', 'Enter', 'Delete'].includes(event.key)) {\n      event.preventDefault();\n      if (!disabled && onDelete) {\n        onDelete(event);\n      }\n    }\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      elementType: ChipDeleteRoot,\n      getSlotProps: getRootProps,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      additionalProps: {\n        as: component,\n        onKeyDown: handleKeyDelete,\n        onClick: handleClickDelete\n      },\n      className: classes.root\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  var restOfRootProps = _objectWithoutPropertiesLoose(rootProps, _excluded2);\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, restOfRootProps, {\n    children: children != null ? children : _Cancel || (_Cancel = /*#__PURE__*/_jsx(Cancel, {}))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ChipDelete.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If provided, it will replace the default icon.\n   */\n  children: PropTypes.node,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the component is disabled.\n   * If `undefined`, the value inherits from the parent chip via a React context.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * Callback fired when the component is not disabled and either:\n   * - `Backspace`, `Enter` or `Delete` is pressed.\n   * - The component is clicked.\n   */\n  onDelete: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'plain'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default ChipDelete;","map":null,"metadata":{},"sourceType":"module"}