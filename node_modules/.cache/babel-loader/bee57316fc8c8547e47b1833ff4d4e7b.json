{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"actions\", \"children\", \"color\", \"component\", \"disablePortal\", \"keepMounted\", \"id\", \"invertedColors\", \"onItemsChange\", \"modifiers\", \"variant\", \"size\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize, refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { useMenu, MenuProvider } from '@mui/base/useMenu';\nimport { ListActionTypes } from '@mui/base/useList';\nimport { Popper } from '@mui/base/Popper';\nimport { useSlotProps } from '@mui/base/utils';\nimport { StyledList } from '../List/List';\nimport ListProvider, { scopedVariables } from '../List/ListProvider';\nimport GroupListContext from '../List/GroupListContext';\nimport { styled, useThemeProps } from '../styles';\nimport { VariantColorProvider } from '../styles/variantColorInheritance';\nimport ColorInversion, { ColorInversionProvider, useColorInversion } from '../styles/ColorInversion';\nimport { getMenuUtilityClass } from './menuClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    open,\n    variant,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', open && 'expanded', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],\n    listbox: ['listbox']\n  };\n  return composeClasses(slots, getMenuUtilityClass, {});\n};\nconst MenuRoot = styled(StyledList, {\n  name: 'JoyMenu',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme,\n  ownerState\n}) => {\n  var _theme$variants, _theme$colorInversion;\n  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];\n  return [_extends({\n    '--focus-outline-offset': `calc(${theme.vars.focus.thickness} * -1)`,\n    // to prevent the focus outline from being cut by overflow\n    '--ListItem-stickyBackground': (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,\n    '--ListItem-stickyTop': 'calc(var(--List-padding, var(--ListDivider-gap)) * -1)'\n  }, scopedVariables, {\n    borderRadius: `var(--List-radius, ${theme.vars.radius.sm})`,\n    boxShadow: theme.shadow.md,\n    overflow: 'auto',\n    // `unstable_popup-zIndex` is a private variable that lets other component, e.g. Modal, to override the z-index so that the listbox can be displayed above the Modal.\n    zIndex: `var(--unstable_popup-zIndex, ${theme.vars.zIndex.popup})`\n  }, !(variantStyle != null && variantStyle.backgroundColor) && {\n    backgroundColor: theme.vars.palette.background.popup\n  }), ownerState.color !== 'context' && ownerState.invertedColors && ((_theme$colorInversion = theme.colorInversion[ownerState.variant]) == null ? void 0 : _theme$colorInversion[ownerState.color])];\n});\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/joy-ui/react-menu/)\n *\n * API:\n *\n * - [Menu API](https://mui.com/joy-ui/api/menu/)\n * - inherits [Popper API](https://mui.com/base-ui/api/popper/)\n */\nconst Menu = /*#__PURE__*/React.forwardRef(function Menu(inProps, ref) {\n  var _props$slots;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyMenu'\n  });\n  const {\n      actions,\n      children,\n      color: colorProp = 'neutral',\n      component,\n      disablePortal = false,\n      keepMounted = false,\n      id,\n      invertedColors = false,\n      onItemsChange,\n      modifiers: modifiersProp,\n      variant = 'outlined',\n      size = 'md',\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    getColor\n  } = useColorInversion(variant);\n  const color = disablePortal ? getColor(inProps.color, colorProp) : colorProp;\n  const {\n    contextValue,\n    getListboxProps,\n    dispatch,\n    open,\n    triggerElement\n  } = useMenu({\n    onItemsChange,\n    id,\n    listboxRef: ref\n  });\n  React.useImperativeHandle(actions, () => ({\n    dispatch,\n    resetHighlight: () => dispatch({\n      type: ListActionTypes.resetHighlight,\n      event: null\n    })\n  }), [dispatch]);\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    invertedColors,\n    color,\n    variant,\n    size,\n    open,\n    nesting: false,\n    row: false\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const modifiers = React.useMemo(() => [{\n    name: 'offset',\n    options: {\n      offset: [0, 4]\n    }\n  }, ...(modifiersProp || [])], [modifiersProp]);\n  const rootProps = useSlotProps({\n    elementType: MenuRoot,\n    getSlotProps: getListboxProps,\n    externalForwardedProps,\n    externalSlotProps: {},\n    ownerState: ownerState,\n    additionalProps: {\n      anchorEl: triggerElement,\n      open: open && triggerElement !== null,\n      disablePortal,\n      keepMounted,\n      modifiers\n    },\n    className: classes.root\n  });\n  let result = /*#__PURE__*/_jsx(MenuProvider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(VariantColorProvider, {\n      variant: invertedColors ? undefined : variant,\n      color: colorProp,\n      children: /*#__PURE__*/_jsx(GroupListContext.Provider, {\n        value: \"menu\",\n        children: /*#__PURE__*/_jsx(ListProvider, {\n          nested: true,\n          children: children\n        })\n      })\n    })\n  });\n  if (invertedColors) {\n    result = /*#__PURE__*/_jsx(ColorInversionProvider, {\n      variant: variant,\n      children: result\n    });\n  }\n  result = /*#__PURE__*/_jsx(MenuRoot, _extends({}, rootProps, !((_props$slots = props.slots) != null && _props$slots.root) && {\n    as: Popper,\n    slots: {\n      root: component || 'ul'\n    }\n  }, {\n    children: result\n  }));\n  return disablePortal ? result : /*#__PURE__*/\n  // For portal popup, the children should not inherit color inversion from the upper parent.\n  _jsx(ColorInversion.Provider, {\n    value: undefined,\n    children: result\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref with imperative actions.\n   * It allows to select the first or last menu item.\n   */\n  actions: refType,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.\n   * @default false\n   */\n  invertedColors: PropTypes.bool,\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Popper.\n   * @default false\n   */\n  keepMounted: PropTypes.bool,\n  /**\n   * Popper.js is based on a \"plugin-like\" architecture,\n   * most of its features are fully encapsulated \"modifiers\".\n   *\n   * A modifier is a function that is called each time Popper.js needs to\n   * compute the position of the popper.\n   * For this reason, modifiers should be very performant to avoid bottlenecks.\n   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).\n   */\n  modifiers: PropTypes.arrayOf(PropTypes.shape({\n    data: PropTypes.object,\n    effect: PropTypes.func,\n    enabled: PropTypes.bool,\n    fn: PropTypes.func,\n    name: PropTypes.any,\n    options: PropTypes.object,\n    phase: PropTypes.oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),\n    requires: PropTypes.arrayOf(PropTypes.string),\n    requiresIfExists: PropTypes.arrayOf(PropTypes.string)\n  })),\n  /**\n   * Triggered when focus leaves the menu and the menu should close.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Function called when the items displayed in the menu change.\n   */\n  onItemsChange: PropTypes.func,\n  /**\n   * Controls whether the menu is displayed.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The size of the component (affect other nested list* components because the `Menu` inherits `List`).\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}