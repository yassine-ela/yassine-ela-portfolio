{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"component\", \"children\", \"buttonFlex\", \"orientation\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useThemeProps } from '../styles';\nimport styled from '../styles/styled';\nimport { getDialogActionsUtilityClass } from './dialogActionsClasses';\nimport useSlot from '../utils/useSlot';\nimport { StyledCardActionsRoot } from '../CardActions/CardActions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses() {\n  var slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogActionsUtilityClass, {});\n};\nvar DialogActionsRoot = styled(StyledCardActionsRoot, {\n  name: 'JoyDialogActions',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({});\n/**\n *\n * Demos:\n *\n * - [Modal](https://mui.com/joy-ui/react-modal/)\n *\n * API:\n *\n * - [DialogActions API](https://mui.com/joy-ui/api/dialog-actions/)\n */\nvar DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyDialogActions'\n  });\n  var _props$component = props.component,\n    component = _props$component === void 0 ? 'div' : _props$component,\n    children = props.children,\n    buttonFlex = props.buttonFlex,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? 'horizontal-reverse' : _props$orientation,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var ownerState = _extends({}, props, {\n    component: component,\n    buttonFlex: buttonFlex,\n    orientation: orientation\n  });\n  var classes = useUtilityClasses();\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      className: classes.root,\n      elementType: DialogActionsRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogActions.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The CSS `flex` for the Button and its wrapper.\n   */\n  buttonFlex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Used to render icon or text elements inside the DialogActions if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The component orientation.\n   * @default 'horizontal-reverse'\n   */\n  orientation: PropTypes.oneOf(['horizontal-reverse', 'horizontal', 'vertical']),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogActions;","map":null,"metadata":{},"sourceType":"module"}