{"ast":null,"code":"import hyphenate from \"./hyphenate-style-name\";\nimport { validateNoMixedHand } from \"./validate-no-mixed-hand\";\nimport { prefix } from \"inline-style-prefixer\";\nimport { MultiCache } from \"./cache\";\nexport default function injectStylePrefixed(styleCache, styles, media, pseudo) {\n  const cache = styleCache.getCache(media);\n  let classString = \"\";\n  for (const originalKey in styles) {\n    const originalVal = styles[originalKey];\n    if (originalVal === void 0 || originalVal === null) {\n      continue;\n    }\n    if (typeof originalVal !== \"object\") {\n      // Non-null and non-undefined primitive value\n      if (process.env.NODE_ENV !== \"production\") {\n        validateValueType(originalVal, originalKey);\n      }\n      const propValPair = `${hyphenate(originalKey)}:${originalVal}`;\n      const key = `${pseudo}${propValPair}`;\n      const cachedId = cache.cache[key];\n      if (cachedId !== void 0) {\n        // cache hit\n        classString += \" \" + cachedId;\n        continue;\n      } else {\n        // cache miss\n        let block = \"\";\n        const prefixed = prefix({\n          [originalKey]: originalVal\n        });\n        for (const prefixedKey in prefixed) {\n          const prefixedVal = prefixed[prefixedKey];\n          const prefixedValType = typeof prefixedVal;\n          if (prefixedValType === \"string\" || prefixedValType === \"number\") {\n            const prefixedPair = `${hyphenate(prefixedKey)}:${prefixedVal}`;\n            if (prefixedPair !== propValPair) {\n              block += `${prefixedPair};`;\n            }\n          } else if (Array.isArray(prefixedVal)) {\n            const hyphenated = hyphenate(prefixedKey);\n            for (let i = 0; i < prefixedVal.length; i++) {\n              const prefixedPair = `${hyphenated}:${prefixedVal[i]}`;\n              if (prefixedPair !== propValPair) {\n                block += `${prefixedPair};`;\n              }\n            }\n          }\n        }\n        block += propValPair; // ensure original prop/val is last (for hydration)\n\n        const id = cache.addValue(key, {\n          pseudo,\n          block\n        });\n        classString += \" \" + id;\n      }\n    } else {\n      // Non-null object value\n      if (originalKey[0] === \":\") {\n        classString += \" \" + injectStylePrefixed(styleCache, originalVal, media, pseudo + originalKey);\n      } else if (originalKey.substring(0, 6) === \"@media\") {\n        classString += \" \" + injectStylePrefixed(styleCache, originalVal, originalKey.substr(7), pseudo);\n      }\n    }\n  }\n  if (process.env.NODE_ENV !== \"production\") {\n    const conflicts = validateNoMixedHand(styles);\n    if (conflicts.length) {\n      conflicts.forEach(({\n        shorthand,\n        longhand\n      }) => {\n        const short = JSON.stringify({\n          [shorthand.property]: shorthand.value\n        });\n        const long = JSON.stringify({\n          [longhand.property]: longhand.value\n        }); // eslint-disable-next-line no-console\n\n        console.warn(`Styles \\`${short}\\` and \\`${long}\\` in object yielding class \"${classString.slice(1)}\" may result in unexpected behavior. Mixing shorthand and longhand properties within the same style object is unsupported with atomic rendering.`);\n      });\n    }\n  } // remove leading space\n\n  return classString.slice(1);\n}\nfunction validateValueType(value, key) {\n  if (value === null || Array.isArray(value) || typeof value !== \"number\" && typeof value !== \"string\") {\n    throw new Error(`Unsupported style value: ${JSON.stringify(value)} used in property ${JSON.stringify(key)}`);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}