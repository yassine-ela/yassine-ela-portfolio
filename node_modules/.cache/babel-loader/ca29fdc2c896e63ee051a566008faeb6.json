{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"children\", \"invertedColors\", \"orientation\", \"color\", \"component\", \"variant\", \"size\", \"layout\", \"maxWidth\", \"minWidth\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { unstable_capitalize as capitalize, unstable_isMuiElement as isMuiElement, unstable_useId as useId } from '@mui/utils';\nimport { styled, useThemeProps } from '../styles';\nimport { ColorInversionProvider, useColorInversion } from '../styles/ColorInversion';\nimport { getModalDialogUtilityClass } from './modalDialogClasses';\nimport ModalDialogSizeContext from './ModalDialogSizeContext';\nimport ModalDialogVariantColorContext from './ModalDialogVariantColorContext';\nimport useSlot from '../utils/useSlot';\nimport { StyledCardRoot } from '../Card/Card';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var variant = ownerState.variant,\n    color = ownerState.color,\n    size = ownerState.size,\n    layout = ownerState.layout;\n  var slots = {\n    root: ['root', variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color)), size && \"size\".concat(capitalize(size)), layout && \"layout\".concat(capitalize(layout))]\n  };\n  return composeClasses(slots, getModalDialogUtilityClass, {});\n};\nfunction getBreakpointValue(theme, breakpoint) {\n  var _theme$breakpoints, _theme$breakpoints2;\n  return breakpoint && (_theme$breakpoints = theme.breakpoints) != null && _theme$breakpoints.values[breakpoint] ? \"\".concat((_theme$breakpoints2 = theme.breakpoints) == null ? void 0 : _theme$breakpoints2.values[breakpoint], \"px\") : breakpoint;\n}\nvar ModalDialogRoot = styled(StyledCardRoot, {\n  name: 'JoyModalDialog',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref) {\n  var _extends2;\n  var theme = _ref.theme,\n    ownerState = _ref.ownerState;\n  return _extends({\n    '--ModalDialog-minWidth': typeof ownerState.minWidth === 'number' ? \"\".concat(ownerState.minWidth, \"px\") : getBreakpointValue(theme, ownerState.minWidth),\n    '--ModalDialog-maxWidth': typeof ownerState.maxWidth === 'number' ? \"\".concat(ownerState.maxWidth, \"px\") : getBreakpointValue(theme, ownerState.maxWidth),\n    '--ModalClose-radius': 'max((var(--Card-radius) - var(--variant-borderWidth, 0px)) - var(--ModalClose-inset), min(var(--ModalClose-inset) / 2, (var(--Card-radius) - var(--variant-borderWidth, 0px)) / 2))'\n  }, ownerState.variant === 'solid' && {\n    '--DialogContent-color': 'currentColor'\n  }, ownerState.size === 'sm' && {\n    '--Card-padding': '1rem',\n    '--ModalDialog-titleOffset': theme.spacing(0.25),\n    '--ModalDialog-descriptionOffset': theme.spacing(0.25),\n    '--ModalClose-inset': '0.375rem'\n  }, ownerState.size === 'md' && {\n    '--Card-padding': '1.25rem',\n    '--ModalDialog-titleOffset': theme.spacing(0.25),\n    '--ModalDialog-descriptionOffset': theme.spacing(0.75),\n    '--ModalClose-inset': '0.5rem'\n  }, ownerState.size === 'lg' && {\n    '--Card-padding': '1.5rem',\n    '--ModalDialog-titleOffset': theme.spacing(0.5),\n    '--ModalDialog-descriptionOffset': theme.spacing(1),\n    '--ModalClose-inset': '0.625rem'\n  }, {\n    boxSizing: 'border-box',\n    boxShadow: theme.shadow.md,\n    minWidth: 'min(calc(100vw - 2 * var(--Card-padding)), var(--ModalDialog-minWidth, 300px))',\n    outline: 0,\n    position: 'absolute'\n  }, ownerState.layout === 'fullscreen' && {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    border: 0,\n    borderRadius: 0\n  }, ownerState.layout === 'center' && {\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    maxWidth: 'min(calc(100vw - 2 * var(--Card-padding)), var(--ModalDialog-maxWidth, 100vw))',\n    maxHeight: 'calc(100% - 2 * var(--Card-padding))'\n  }, (_extends2 = {}, _defineProperty(_extends2, \"& [id=\\\"\".concat(ownerState['aria-labelledby'], \"\\\"]\"), _defineProperty({\n    '--Typography-margin': 'calc(-1 * var(--ModalDialog-titleOffset)) 0 var(--ModalDialog-gap) 0',\n    '--Typography-fontSize': '1.125em'\n  }, \"& + [id=\\\"\".concat(ownerState['aria-describedby'], \"\\\"]\"), {\n    '--unstable_ModalDialog-descriptionOffset': 'calc(-1 * var(--ModalDialog-descriptionOffset))'\n  })), _defineProperty(_extends2, \"& [id=\\\"\".concat(ownerState['aria-describedby'], \"\\\"]\"), {\n    '--Typography-fontSize': '1em',\n    '--Typography-margin': 'var(--unstable_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 0 0',\n    '&:not(:last-child)': {\n      // create spacing between description and the next element.\n      '--Typography-margin': 'var(--unstable_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 var(--ModalDialog-gap) 0'\n    }\n  }), _extends2));\n});\n/**\n *\n * Demos:\n *\n * - [Modal](https://mui.com/joy-ui/react-modal/)\n *\n * API:\n *\n * - [ModalDialog API](https://mui.com/joy-ui/api/modal-dialog/)\n */\nvar ModalDialog = /*#__PURE__*/React.forwardRef(function ModalDialog(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyModalDialog'\n  });\n  var className = props.className,\n    children = props.children,\n    _props$invertedColors = props.invertedColors,\n    invertedColors = _props$invertedColors === void 0 ? false : _props$invertedColors,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? 'vertical' : _props$orientation,\n    _props$color = props.color,\n    colorProp = _props$color === void 0 ? 'neutral' : _props$color,\n    _props$component = props.component,\n    component = _props$component === void 0 ? 'div' : _props$component,\n    _props$variant = props.variant,\n    variant = _props$variant === void 0 ? 'outlined' : _props$variant,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 'md' : _props$size,\n    _props$layout = props.layout,\n    layout = _props$layout === void 0 ? 'center' : _props$layout,\n    maxWidth = props.maxWidth,\n    minWidth = props.minWidth,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, colorProp);\n  var ownerState = _extends({}, props, {\n    color: color,\n    component: component,\n    maxWidth: maxWidth,\n    minWidth: minWidth,\n    layout: layout,\n    size: size,\n    variant: variant\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var labelledBy = useId();\n  var describedBy = useId();\n  var contextValue = React.useMemo(function () {\n    return {\n      variant: variant,\n      color: color === 'context' ? undefined : color,\n      labelledBy: labelledBy,\n      describedBy: describedBy\n    };\n  }, [color, variant, labelledBy, describedBy]);\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      className: clsx(classes.root, className),\n      elementType: ModalDialogRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState,\n      additionalProps: {\n        as: component,\n        role: 'dialog',\n        'aria-modal': 'true',\n        'aria-labelledby': labelledBy,\n        'aria-describedby': describedBy\n      }\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  var result = /*#__PURE__*/_jsx(ModalDialogSizeContext.Provider, {\n    value: size,\n    children: /*#__PURE__*/_jsx(ModalDialogVariantColorContext.Provider, {\n      value: contextValue,\n      children: /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n        children: React.Children.map(children, function (child, index) {\n          if (! /*#__PURE__*/React.isValidElement(child)) {\n            return child;\n          }\n          var extraProps = {};\n          if (isMuiElement(child, ['Divider'])) {\n            extraProps.inset = 'inset' in child.props ? child.props.inset : 'context';\n            var dividerOrientation = orientation === 'vertical' ? 'horizontal' : 'vertical';\n            extraProps.orientation = 'orientation' in child.props ? child.props.orientation : dividerOrientation;\n          }\n          if (isMuiElement(child, ['CardOverflow'])) {\n            if (orientation === 'horizontal') {\n              extraProps['data-parent'] = 'Card-horizontal';\n            }\n            if (orientation === 'vertical') {\n              extraProps['data-parent'] = 'Card-vertical';\n            }\n          }\n          if (index === 0) {\n            extraProps['data-first-child'] = '';\n          }\n          if (index === React.Children.count(children) - 1) {\n            extraProps['data-last-child'] = '';\n          }\n          return /*#__PURE__*/React.cloneElement(child, extraProps);\n        })\n      }))\n    })\n  });\n  if (invertedColors) {\n    return /*#__PURE__*/_jsx(ColorInversionProvider, {\n      variant: variant,\n      children: result\n    });\n  }\n  return result;\n});\nprocess.env.NODE_ENV !== \"production\" ? ModalDialog.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.\n   * @default false\n   */\n  invertedColors: PropTypes.bool,\n  /**\n   * The layout of the dialog\n   * @default 'center'\n   */\n  layout: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['center', 'fullscreen']), PropTypes.string]),\n  /**\n   * The maximum width of the component.\n   * @example 'md' will use the theme's `md` breakpoint value\n   * @example 360 is the number of pixels\n   * @example '60ch' can be any valid CSS max-width unit\n   */\n  maxWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * The minimum width of the component.\n   * @example 'md' will use the theme's `md` breakpoint value\n   * @example 360 is the number of pixels\n   * @example '60ch' can be any valid CSS min-width unit\n   */\n  minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * The component orientation.\n   * @default 'vertical'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default ModalDialog;","map":null,"metadata":{},"sourceType":"module"}