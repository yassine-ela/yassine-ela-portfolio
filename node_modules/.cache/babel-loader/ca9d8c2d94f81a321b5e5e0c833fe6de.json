{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"anchorOrigin\", \"badgeInset\", \"children\", \"size\", \"color\", \"invisible\", \"max\", \"badgeContent\", \"showZero\", \"variant\", \"component\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_capitalize as capitalize, usePreviousProps } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport useSlot from '../utils/useSlot';\nimport badgeClasses, { getBadgeUtilityClass } from './badgeClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var color = ownerState.color,\n    variant = ownerState.variant,\n    size = ownerState.size,\n    anchorOrigin = ownerState.anchorOrigin,\n    invisible = ownerState.invisible;\n  var slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible', anchorOrigin && \"anchorOrigin\".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal)), variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color)), size && \"size\".concat(capitalize(size))]\n  };\n  return composeClasses(slots, getBadgeUtilityClass, {});\n};\nvar BadgeRoot = styled('span', {\n  name: 'JoyBadge',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref) {\n  var theme = _ref.theme,\n    ownerState = _ref.ownerState;\n  return _extends({}, ownerState.size === 'sm' && _extends({\n    '--Badge-minHeight': '0.5rem'\n  }, ownerState.badgeContent && {\n    '--Badge-minHeight': '1rem'\n  }, {\n    '--Badge-paddingX': '0.25rem'\n  }), ownerState.size === 'md' && _extends({\n    '--Badge-minHeight': '0.75rem'\n  }, ownerState.badgeContent && {\n    '--Badge-minHeight': '1.25rem'\n  }, {\n    '--Badge-paddingX': '0.375rem'\n  }), ownerState.size === 'lg' && _extends({\n    '--Badge-minHeight': '1rem'\n  }, ownerState.badgeContent && {\n    '--Badge-minHeight': '1.5rem'\n  }, {\n    '--Badge-paddingX': '0.5rem'\n  }), {\n    '--Badge-ringSize': '2px',\n    '--Badge-ring': \"0 0 0 var(--Badge-ringSize) var(--Badge-ringColor, \".concat(theme.vars.palette.background.surface, \")\"),\n    position: 'relative',\n    display: 'inline-flex',\n    // For correct alignment with the text.\n    verticalAlign: 'middle',\n    flexShrink: 0\n  });\n});\nvar BadgeBadge = styled('span', {\n  name: 'JoyBadge',\n  slot: 'Badge',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.badge;\n  }\n})(function (_ref2) {\n  var _extends2;\n  var theme = _ref2.theme,\n    ownerState = _ref2.ownerState;\n  var _ownerState$anchorOri, _ownerState$anchorOri2, _ownerState$anchorOri3, _ownerState$anchorOri4, _typography$lineHeigh, _theme$variants;\n  var inset = {\n    top: ownerState.badgeInset,\n    left: ownerState.badgeInset,\n    bottom: ownerState.badgeInset,\n    right: ownerState.badgeInset\n  };\n  if (typeof ownerState.badgeInset === 'string') {\n    var insetValues = ownerState.badgeInset.split(' ');\n    if (insetValues.length > 1) {\n      inset.top = insetValues[0];\n      inset.right = insetValues[1];\n      if (insetValues.length === 2) {\n        inset.bottom = insetValues[0];\n        inset.left = insetValues[1];\n      }\n      if (insetValues.length === 3) {\n        inset.left = insetValues[1];\n        inset.bottom = insetValues[2];\n      }\n      if (insetValues.length === 4) {\n        inset.bottom = insetValues[2];\n        inset.left = insetValues[3];\n      }\n    }\n  }\n  var translateY = ((_ownerState$anchorOri = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri.vertical) === 'top' ? 'translateY(-50%)' : 'translateY(50%)';\n  var translateX = ((_ownerState$anchorOri2 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri2.horizontal) === 'left' ? 'translateX(-50%)' : 'translateX(50%)';\n  var transformOriginY = ((_ownerState$anchorOri3 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri3.vertical) === 'top' ? '0%' : '100%';\n  var transformOriginX = ((_ownerState$anchorOri4 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri4.horizontal) === 'left' ? '0%' : '100%';\n  var typography = theme.typography[\"body-\".concat({\n    sm: 'xs',\n    md: 'sm',\n    lg: 'md'\n  }[ownerState.size])];\n  return _extends((_extends2 = {\n    '--Icon-color': 'currentColor',\n    '--Icon-fontSize': \"calc(1em * \".concat((_typography$lineHeigh = typography.lineHeight) != null ? _typography$lineHeigh : '1', \")\"),\n    display: 'inline-flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    boxSizing: 'border-box',\n    boxShadow: 'var(--Badge-ring)',\n    lineHeight: 1,\n    padding: '0 calc(var(--Badge-paddingX) - var(--variant-borderWidth, 0px))',\n    minHeight: 'var(--Badge-minHeight)',\n    minWidth: 'var(--Badge-minHeight)',\n    borderRadius: 'var(--Badge-radius, var(--Badge-minHeight))',\n    zIndex: theme.vars.zIndex.badge,\n    backgroundColor: theme.vars.palette.background.surface\n  }, _defineProperty(_extends2, ownerState.anchorOrigin.vertical, inset[ownerState.anchorOrigin.vertical]), _defineProperty(_extends2, ownerState.anchorOrigin.horizontal, inset[ownerState.anchorOrigin.horizontal]), _defineProperty(_extends2, \"transform\", \"scale(1) \".concat(translateX, \" \").concat(translateY)), _defineProperty(_extends2, \"transformOrigin\", \"\".concat(transformOriginX, \" \").concat(transformOriginY)), _defineProperty(_extends2, \"&.\".concat(badgeClasses.invisible), {\n    transform: \"scale(0) \".concat(translateX, \" \").concat(translateY)\n  }), _extends2), typography, {\n    fontWeight: theme.vars.fontWeight.md\n  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);\n});\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/joy-ui/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/joy-ui/api/badge/)\n */\nvar Badge = /*#__PURE__*/React.forwardRef(function Badge(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyBadge'\n  });\n  var _props$anchorOrigin = props.anchorOrigin,\n    anchorOriginProp = _props$anchorOrigin === void 0 ? {\n      vertical: 'top',\n      horizontal: 'right'\n    } : _props$anchorOrigin,\n    _props$badgeInset = props.badgeInset,\n    badgeInsetProp = _props$badgeInset === void 0 ? 0 : _props$badgeInset,\n    children = props.children,\n    _props$size = props.size,\n    sizeProp = _props$size === void 0 ? 'md' : _props$size,\n    _props$color = props.color,\n    colorProp = _props$color === void 0 ? 'primary' : _props$color,\n    _props$invisible = props.invisible,\n    invisibleProp = _props$invisible === void 0 ? false : _props$invisible,\n    _props$max = props.max,\n    max = _props$max === void 0 ? 99 : _props$max,\n    _props$badgeContent = props.badgeContent,\n    badgeContentProp = _props$badgeContent === void 0 ? '' : _props$badgeContent,\n    _props$showZero = props.showZero,\n    showZero = _props$showZero === void 0 ? false : _props$showZero,\n    _props$variant = props.variant,\n    variantProp = _props$variant === void 0 ? 'solid' : _props$variant,\n    component = props.component,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    size: sizeProp,\n    badgeInset: badgeInsetProp,\n    color: colorProp,\n    variant: variantProp\n  });\n  var invisible = invisibleProp;\n  if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null)) {\n    invisible = true;\n  }\n  var _ref3 = invisible ? prevProps : props,\n    _ref3$color = _ref3.color,\n    internalColor = _ref3$color === void 0 ? colorProp : _ref3$color,\n    _ref3$size = _ref3.size,\n    size = _ref3$size === void 0 ? sizeProp : _ref3$size,\n    _ref3$anchorOrigin = _ref3.anchorOrigin,\n    anchorOrigin = _ref3$anchorOrigin === void 0 ? anchorOriginProp : _ref3$anchorOrigin,\n    _ref3$variant = _ref3.variant,\n    variant = _ref3$variant === void 0 ? variantProp : _ref3$variant,\n    _ref3$badgeInset = _ref3.badgeInset,\n    badgeInset = _ref3$badgeInset === void 0 ? badgeInsetProp : _ref3$badgeInset;\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, internalColor);\n  var ownerState = _extends({}, props, {\n    anchorOrigin: anchorOrigin,\n    badgeInset: badgeInset,\n    variant: variant,\n    invisible: invisible,\n    color: color,\n    size: size\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var displayValue = badgeContentProp && Number(badgeContentProp) > max ? \"\".concat(max, \"+\") : badgeContentProp;\n  if (invisible && badgeContentProp === 0) {\n    displayValue = '';\n  }\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      className: classes.root,\n      elementType: BadgeRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  var _useSlot3 = useSlot('badge', {\n      className: classes.badge,\n      elementType: BadgeBadge,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot4 = _slicedToArray(_useSlot3, 2),\n    SlotBadge = _useSlot4[0],\n    badgeProps = _useSlot4[1];\n  return /*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n    children: [children, /*#__PURE__*/_jsx(SlotBadge, _extends({}, badgeProps, {\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n  /**\n   * The content rendered within the badge.\n   * @default ''\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The inset of the badge. Support shorthand syntax as described in https://developer.mozilla.org/en-US/docs/Web/CSS/inset.\n   * @default 0\n   */\n  badgeInset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'solid'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default Badge;","map":null,"metadata":{},"sourceType":"module"}