{"ast":null,"code":"// Source from https://github.com/alitaheri/normalize-scroll-left\nlet cachedType;\n\n/**\r\n * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type\r\n *\r\n * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.\r\n *\r\n * Type             | <- Most Left | Most Right -> | Initial\r\n * ---------------- | ------------ | ------------- | -------\r\n * default          | 0            | 100           | 100\r\n * negative (spec*) | -100         | 0             | 0\r\n * reverse          | 100          | 0             | 0\r\n *\r\n * Edge 85: default\r\n * Safari 14: negative\r\n * Chrome 85: negative\r\n * Firefox 81: negative\r\n * IE11: reverse\r\n *\r\n * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll\r\n */\nexport function detectScrollType() {\n  if (cachedType) {\n    return cachedType;\n  }\n  const dummy = document.createElement('div');\n  const container = document.createElement('div');\n  container.style.width = '10px';\n  container.style.height = '1px';\n  dummy.appendChild(container);\n  dummy.dir = 'rtl';\n  dummy.style.fontSize = '14px';\n  dummy.style.width = '4px';\n  dummy.style.height = '1px';\n  dummy.style.position = 'absolute';\n  dummy.style.top = '-1000px';\n  dummy.style.overflow = 'scroll';\n  document.body.appendChild(dummy);\n  cachedType = 'reverse';\n  if (dummy.scrollLeft > 0) {\n    cachedType = 'default';\n  } else {\n    dummy.scrollLeft = 1;\n    if (dummy.scrollLeft === 0) {\n      cachedType = 'negative';\n    }\n  }\n  document.body.removeChild(dummy);\n  return cachedType;\n}\n\n// Based on https://stackoverflow.com/a/24394376\nexport function getNormalizedScrollLeft(element, direction) {\n  const scrollLeft = element.scrollLeft;\n\n  // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior\n  if (direction !== 'rtl') {\n    return scrollLeft;\n  }\n  const type = detectScrollType();\n  switch (type) {\n    case 'negative':\n      return element.scrollWidth - element.clientWidth + scrollLeft;\n    case 'reverse':\n      return element.scrollWidth - element.clientWidth - scrollLeft;\n    default:\n      return scrollLeft;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}