{"ast":null,"code":"'use client';\n\nimport _defineProperty from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"elementType\", \"ownerState\", \"externalForwardedProps\", \"getSlotOwnerState\", \"internalForwardedProps\"],\n  _excluded2 = [\"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"component\"],\n  _excluded4 = [\"disableColorInversion\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { appendOwnerState, resolveComponentProps, mergeSlotProps } from '@mui/base/utils';\nimport { useColorInversion } from '../styles/ColorInversion';\n/**\n * An internal function to create a Joy UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Joy UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Joy UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  var className = parameters.className,\n    initialElementType = parameters.elementType,\n    ownerState = parameters.ownerState,\n    externalForwardedProps = parameters.externalForwardedProps,\n    getSlotOwnerState = parameters.getSlotOwnerState,\n    internalForwardedProps = parameters.internalForwardedProps,\n    useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded);\n  var rootComponent = externalForwardedProps.component,\n    _externalForwardedPro = externalForwardedProps.slots,\n    slots = _externalForwardedPro === void 0 ? _defineProperty({}, name, undefined) : _externalForwardedPro,\n    _externalForwardedPro2 = externalForwardedProps.slotProps,\n    slotProps = _externalForwardedPro2 === void 0 ? _defineProperty({}, name, undefined) : _externalForwardedPro2,\n    other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded2);\n  var elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  var resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  var _mergeSlotProps = mergeSlotProps(_extends({\n      className: className\n    }, useSlotPropsParams, {\n      externalForwardedProps: name === 'root' ? other : undefined,\n      externalSlotProps: resolvedComponentsProps\n    })),\n    slotComponent = _mergeSlotProps.props.component,\n    internalRef = _mergeSlotProps.internalRef,\n    mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded3);\n  var ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);\n\n  // @ts-ignore internal logic\n  var _ref = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {},\n    _ref$disableColorInve = _ref.disableColorInversion,\n    disableColorInversion = _ref$disableColorInve === void 0 ? false : _ref$disableColorInve,\n    slotOwnerState = _objectWithoutPropertiesLoose(_ref, _excluded4);\n  var finalOwnerState = _extends({}, ownerState, slotOwnerState);\n  var _useColorInversion = useColorInversion(finalOwnerState.variant),\n    getColor = _useColorInversion.getColor;\n  if (name === 'root') {\n    var _color;\n    // for the root slot, color inversion is calculated before the `useSlot` and pass through `ownerState`.\n    finalOwnerState.color = (_color = mergedProps.color) != null ? _color : ownerState.color;\n  } else if (!disableColorInversion) {\n    finalOwnerState.color = getColor(mergedProps.color, finalOwnerState.color);\n  }\n  var LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  var props = appendOwnerState(elementType, _extends({}, name === 'root' && !rootComponent && !slots[name] && internalForwardedProps, name !== 'root' && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {\n    as: LeafComponent\n  }, {\n    ref: ref\n  }), finalOwnerState);\n  Object.keys(slotOwnerState).forEach(function (propName) {\n    delete props[propName];\n  });\n  return [elementType, props];\n}","map":null,"metadata":{},"sourceType":"module"}