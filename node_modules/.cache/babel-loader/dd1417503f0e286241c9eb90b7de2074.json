{"ast":null,"code":"'use client';\n\nimport _toConsumableArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _Unfold;\nvar _excluded = [\"action\", \"autoFocus\", \"children\", \"defaultValue\", \"defaultListboxOpen\", \"disabled\", \"getSerializedValue\", \"placeholder\", \"listboxId\", \"listboxOpen\", \"onChange\", \"onListboxOpenChange\", \"onClose\", \"renderValue\", \"required\", \"value\", \"size\", \"variant\", \"color\", \"startDecorator\", \"endDecorator\", \"indicator\", \"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"id\", \"name\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { Popper } from '@mui/base/Popper';\nimport { useSelect, SelectProvider } from '@mui/base/useSelect';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { StyledList } from '../List/List';\nimport ListProvider, { scopedVariables } from '../List/ListProvider';\nimport GroupListContext from '../List/GroupListContext';\nimport Unfold from '../internal/svg-icons/Unfold';\nimport { styled, useThemeProps } from '../styles';\nimport ColorInversion, { useColorInversion } from '../styles/ColorInversion';\nimport { resolveSxValue } from '../styles/styleUtils';\nimport useSlot from '../utils/useSlot';\nimport selectClasses, { getSelectUtilityClass } from './selectClasses';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport { VariantColorProvider } from '../styles/variantColorInheritance';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction defaultRenderSingleValue(selectedOption) {\n  var _selectedOption$label;\n  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : '';\n}\nvar defaultModifiers = [{\n  name: 'offset',\n  options: {\n    offset: [0, 4]\n  }\n}, {\n  // popper will have the same width as root element when open\n  name: 'equalWidth',\n  enabled: true,\n  phase: 'beforeWrite',\n  requires: ['computeStyles'],\n  fn: function fn(_ref4) {\n    var state = _ref4.state;\n    state.styles.popper.width = \"\".concat(state.rects.reference.width, \"px\");\n  }\n}];\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var color = ownerState.color,\n    disabled = ownerState.disabled,\n    focusVisible = ownerState.focusVisible,\n    size = ownerState.size,\n    variant = ownerState.variant,\n    open = ownerState.open;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', open && 'expanded', variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color)), size && \"size\".concat(capitalize(size))],\n    button: ['button'],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator'],\n    indicator: ['indicator', open && 'expanded'],\n    listbox: ['listbox', open && 'expanded', disabled && 'disabled']\n  };\n  return composeClasses(slots, getSelectUtilityClass, {});\n};\nvar SelectRoot = styled('div', {\n  name: 'JoySelect',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref5) {\n  var _extends2;\n  var theme = _ref5.theme,\n    ownerState = _ref5.ownerState;\n  var _theme$variants, _theme$vars$palette, _theme$variants2, _theme$variants3;\n  var variantStyle = (_theme$variants = theme.variants[\"\".concat(ownerState.variant)]) == null ? void 0 : _theme$variants[ownerState.color];\n  var _resolveSxValue = resolveSxValue({\n      theme: theme,\n      ownerState: ownerState\n    }, ['borderRadius']),\n    borderRadius = _resolveSxValue.borderRadius;\n  return [_extends({\n    '--Select-radius': theme.vars.radius.sm,\n    '--Select-gap': '0.5rem',\n    '--Select-placeholderOpacity': 0.64,\n    '--Select-decoratorColor': theme.vars.palette.text.icon,\n    '--Select-focusedThickness': theme.vars.focus.thickness\n  }, ownerState.color === 'context' ? {\n    '--Select-focusedHighlight': theme.vars.palette.focusVisible\n  } : {\n    '--Select-focusedHighlight': (_theme$vars$palette = theme.vars.palette[ownerState.color === 'neutral' ? 'primary' : ownerState.color]) == null ? void 0 : _theme$vars$palette[500]\n  }, {\n    '--Select-indicatorColor': variantStyle != null && variantStyle.backgroundColor ? variantStyle == null ? void 0 : variantStyle.color : theme.vars.palette.text.tertiary\n  }, ownerState.size === 'sm' && {\n    '--Select-minHeight': '2rem',\n    '--Select-paddingInline': '0.5rem',\n    '--Select-decoratorChildHeight': 'min(1.5rem, var(--Select-minHeight))',\n    '--Icon-fontSize': theme.vars.fontSize.xl\n  }, ownerState.size === 'md' && {\n    '--Select-minHeight': '2.25rem',\n    '--Select-paddingInline': '0.75rem',\n    '--Select-decoratorChildHeight': 'min(1.75rem, var(--Select-minHeight))',\n    '--Icon-fontSize': theme.vars.fontSize.xl2\n  }, ownerState.size === 'lg' && {\n    '--Select-minHeight': '2.75rem',\n    '--Select-paddingInline': '1rem',\n    '--Select-decoratorChildHeight': 'min(2.375rem, var(--Select-minHeight))',\n    '--Icon-fontSize': theme.vars.fontSize.xl2\n  }, {\n    // variables for controlling child components\n    '--Select-decoratorChildOffset': 'min(calc(var(--Select-paddingInline) - (var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2), var(--Select-paddingInline))',\n    '--_Select-paddingBlock': 'max((var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2, 0px)',\n    '--Select-decoratorChildRadius': 'max(var(--Select-radius) - var(--variant-borderWidth, 0px) - var(--_Select-paddingBlock), min(var(--_Select-paddingBlock) + var(--variant-borderWidth, 0px), var(--Select-radius) / 2))',\n    '--Button-minHeight': 'var(--Select-decoratorChildHeight)',\n    '--IconButton-size': 'var(--Select-decoratorChildHeight)',\n    '--Button-radius': 'var(--Select-decoratorChildRadius)',\n    '--IconButton-radius': 'var(--Select-decoratorChildRadius)',\n    boxSizing: 'border-box'\n  }, ownerState.variant !== 'plain' && {\n    boxShadow: theme.shadow.xs\n  }, {\n    minWidth: 0,\n    minHeight: 'var(--Select-minHeight)',\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n    borderRadius: 'var(--Select-radius)',\n    cursor: 'pointer'\n  }, !(variantStyle != null && variantStyle.backgroundColor) && {\n    backgroundColor: theme.vars.palette.background.surface\n  }, ownerState.size && {\n    paddingBlock: {\n      sm: 2,\n      md: 3,\n      lg: 4\n    }[ownerState.size] // the padding-block act as a minimum spacing between content and root element\n  }, {\n    paddingInline: \"var(--Select-paddingInline)\"\n  }, theme.typography[\"body-\".concat(ownerState.size)], variantStyle, (_extends2 = {\n    '&::before': {\n      boxSizing: 'border-box',\n      content: '\"\"',\n      display: 'block',\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      zIndex: 1,\n      borderRadius: 'inherit',\n      margin: 'calc(var(--variant-borderWidth, 0px) * -1)' // for outlined variant\n    }\n  }, _defineProperty(_extends2, \"&.\".concat(selectClasses.focusVisible), {\n    '--Select-indicatorColor': variantStyle == null ? void 0 : variantStyle.color,\n    '&::before': {\n      boxShadow: \"inset 0 0 0 var(--Select-focusedThickness) var(--Select-focusedHighlight)\"\n    }\n  }), _defineProperty(_extends2, \"&.\".concat(selectClasses.disabled), {\n    '--Select-indicatorColor': 'inherit'\n  }), _extends2)), _defineProperty({\n    '&:hover': (_theme$variants2 = theme.variants[\"\".concat(ownerState.variant, \"Hover\")]) == null ? void 0 : _theme$variants2[ownerState.color]\n  }, \"&.\".concat(selectClasses.disabled), (_theme$variants3 = theme.variants[\"\".concat(ownerState.variant, \"Disabled\")]) == null ? void 0 : _theme$variants3[ownerState.color]), borderRadius !== undefined && {\n    '--Select-radius': borderRadius\n  }];\n});\nvar SelectButton = styled('button', {\n  name: 'JoySelect',\n  slot: 'Button',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.button;\n  }\n})(function (_ref7) {\n  var ownerState = _ref7.ownerState;\n  return _extends({\n    // reset user-agent button style\n    border: 0,\n    outline: 0,\n    background: 'none',\n    padding: 0,\n    fontSize: 'inherit',\n    color: 'inherit',\n    alignSelf: 'stretch',\n    // make children horizontally aligned\n    display: 'flex',\n    alignItems: 'center',\n    flex: 1,\n    fontFamily: 'inherit',\n    cursor: 'pointer',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden'\n  }, (ownerState.value === null || ownerState.value === undefined) && {\n    opacity: 'var(--Select-placeholderOpacity)'\n  }, {\n    '&::before': {\n      content: '\"\"',\n      display: 'block',\n      position: 'absolute',\n      // TODO: use https://caniuse.com/?search=inset when ~94%\n      top: 'calc(-1 * var(--variant-borderWidth, 0px))',\n      left: 'calc(-1 * var(--variant-borderWidth, 0px))',\n      right: 'calc(-1 * var(--variant-borderWidth, 0px))',\n      bottom: 'calc(-1 * var(--variant-borderWidth, 0px))',\n      borderRadius: 'var(--Select-radius)'\n    }\n  });\n});\nvar SelectListbox = styled(StyledList, {\n  name: 'JoySelect',\n  slot: 'Listbox',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.listbox;\n  }\n})(function (_ref8) {\n  var theme = _ref8.theme,\n    ownerState = _ref8.ownerState;\n  var _theme$variants4;\n  var variantStyle = ownerState.color === 'context' ? undefined : (_theme$variants4 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants4[ownerState.color];\n  return _extends({\n    '--focus-outline-offset': \"calc(\".concat(theme.vars.focus.thickness, \" * -1)\"),\n    // to prevent the focus outline from being cut by overflow\n    '--ListItem-stickyBackground': (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,\n    '--ListItem-stickyTop': 'calc(var(--List-padding, var(--ListDivider-gap)) * -1)'\n  }, scopedVariables, {\n    minWidth: 'max-content',\n    // prevent options from shrinking if some of them is wider than the Select's root.\n    maxHeight: '44vh',\n    // the best value from what I tried so far which does not cause screen flicker when listbox is open.\n    overflow: 'auto',\n    outline: 0,\n    boxShadow: theme.shadow.md,\n    borderRadius: \"var(--List-radius, \".concat(theme.vars.radius.sm, \")\"),\n    // `unstable_popup-zIndex` is a private variable that lets other component, e.g. Modal, to override the z-index so that the listbox can be displayed above the Modal.\n    zIndex: \"var(--unstable_popup-zIndex, \".concat(theme.vars.zIndex.popup, \")\")\n  }, !(variantStyle != null && variantStyle.backgroundColor) && {\n    backgroundColor: theme.vars.palette.background.popup\n  });\n});\nvar SelectStartDecorator = styled('span', {\n  name: 'JoySelect',\n  slot: 'StartDecorator',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.startDecorator;\n  }\n})({\n  '--Button-margin': '0 0 0 calc(var(--Select-decoratorChildOffset) * -1)',\n  '--IconButton-margin': '0 0 0 calc(var(--Select-decoratorChildOffset) * -1)',\n  '--Icon-margin': '0 0 0 calc(var(--Select-paddingInline) / -4)',\n  display: 'inherit',\n  alignItems: 'center',\n  color: 'var(--Select-decoratorColor)',\n  marginInlineEnd: 'var(--Select-gap)'\n});\nvar SelectEndDecorator = styled('span', {\n  name: 'JoySelect',\n  slot: 'EndDecorator',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.endDecorator;\n  }\n})({\n  '--Button-margin': '0 calc(var(--Select-decoratorChildOffset) * -1) 0 0',\n  '--IconButton-margin': '0 calc(var(--Select-decoratorChildOffset) * -1) 0 0',\n  '--Icon-margin': '0 calc(var(--Select-paddingInline) / -4) 0 0',\n  display: 'inherit',\n  alignItems: 'center',\n  color: 'var(--Select-decoratorColor)',\n  marginInlineStart: 'var(--Select-gap)'\n});\nvar SelectIndicator = styled('span', {\n  name: 'JoySelect',\n  slot: 'Indicator'\n})(function (_ref9) {\n  var _extends3;\n  var ownerState = _ref9.ownerState,\n    theme = _ref9.theme;\n  return _extends({}, ownerState.size === 'sm' && {\n    '--Icon-fontSize': theme.vars.fontSize.lg\n  }, ownerState.size === 'md' && {\n    '--Icon-fontSize': theme.vars.fontSize.xl\n  }, ownerState.size === 'lg' && {\n    '--Icon-fontSize': theme.vars.fontSize.xl2\n  }, (_extends3 = {\n    '--Icon-color': ownerState.color !== 'neutral' || ownerState.variant === 'solid' ? 'currentColor' : theme.vars.palette.text.icon,\n    display: 'inherit',\n    alignItems: 'center',\n    marginInlineStart: 'var(--Select-gap)',\n    marginInlineEnd: 'calc(var(--Select-paddingInline) / -4)'\n  }, _defineProperty(_extends3, \".\".concat(selectClasses.endDecorator, \" + &\"), {\n    marginInlineStart: 'calc(var(--Select-gap) / 2)'\n  }), _defineProperty(_extends3, \"&.\".concat(selectClasses.expanded, \", .\").concat(selectClasses.disabled, \" > &\"), {\n    '--Icon-color': 'currentColor'\n  }), _extends3));\n});\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/joy-ui/react-select/)\n *\n * API:\n *\n * - [Select API](https://mui.com/joy-ui/api/select/)\n */\nvar Select = /*#__PURE__*/React.forwardRef(function Select(inProps, ref) {\n  var _ref2, _inProps$disabled, _ref3, _inProps$size, _formControl$color;\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoySelect'\n  });\n  var _ref = props,\n    action = _ref.action,\n    autoFocus = _ref.autoFocus,\n    children = _ref.children,\n    defaultValue = _ref.defaultValue,\n    _ref$defaultListboxOp = _ref.defaultListboxOpen,\n    defaultListboxOpen = _ref$defaultListboxOp === void 0 ? false : _ref$defaultListboxOp,\n    disabledExternalProp = _ref.disabled,\n    getSerializedValue = _ref.getSerializedValue,\n    placeholder = _ref.placeholder,\n    listboxId = _ref.listboxId,\n    listboxOpenProp = _ref.listboxOpen,\n    onChange = _ref.onChange,\n    onListboxOpenChange = _ref.onListboxOpenChange,\n    onClose = _ref.onClose,\n    renderValueProp = _ref.renderValue,\n    _ref$required = _ref.required,\n    required = _ref$required === void 0 ? false : _ref$required,\n    valueProp = _ref.value,\n    _ref$size = _ref.size,\n    sizeProp = _ref$size === void 0 ? 'md' : _ref$size,\n    _ref$variant = _ref.variant,\n    variant = _ref$variant === void 0 ? 'outlined' : _ref$variant,\n    _ref$color = _ref.color,\n    colorProp = _ref$color === void 0 ? 'neutral' : _ref$color,\n    startDecorator = _ref.startDecorator,\n    endDecorator = _ref.endDecorator,\n    _ref$indicator = _ref.indicator,\n    indicator = _ref$indicator === void 0 ? _Unfold || (_Unfold = /*#__PURE__*/_jsx(Unfold, {})) : _ref$indicator,\n    ariaDescribedby = _ref['aria-describedby'],\n    ariaLabel = _ref['aria-label'],\n    ariaLabelledby = _ref['aria-labelledby'],\n    id = _ref.id,\n    name = _ref.name,\n    _ref$slots = _ref.slots,\n    slots = _ref$slots === void 0 ? {} : _ref$slots,\n    _ref$slotProps = _ref.slotProps,\n    slotProps = _ref$slotProps === void 0 ? {} : _ref$slotProps,\n    other = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var formControl = React.useContext(FormControlContext);\n  if (process.env.NODE_ENV !== 'production') {\n    var registerEffect = formControl == null ? void 0 : formControl.registerEffect;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (registerEffect) {\n        return registerEffect();\n      }\n      return undefined;\n    }, [registerEffect]);\n  }\n  var disabledProp = (_ref2 = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref2 : disabledExternalProp;\n  var size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, formControl != null && formControl.error ? 'danger' : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);\n  var renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    anchorEl = _React$useState2[0],\n    setAnchorEl = _React$useState2[1];\n  var rootRef = React.useRef(null);\n  var buttonRef = React.useRef(null);\n  var listboxRef = React.useRef(null);\n  var handleRef = useForkRef(ref, rootRef);\n  React.useImperativeHandle(action, function () {\n    return {\n      focusVisible: function focusVisible() {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    setAnchorEl(rootRef.current);\n  }, []);\n  React.useEffect(function () {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  var handleOpenChange = React.useCallback(function (isOpen) {\n    onListboxOpenChange == null || onListboxOpenChange(isOpen);\n    if (!isOpen) {\n      onClose == null || onClose();\n    }\n  }, [onClose, onListboxOpenChange]);\n  var _useSelect = useSelect({\n      buttonRef: buttonRef,\n      defaultOpen: defaultListboxOpen,\n      defaultValue: defaultValue,\n      disabled: disabledProp,\n      getSerializedValue: getSerializedValue,\n      listboxId: listboxId,\n      multiple: false,\n      name: name,\n      required: required,\n      onChange: onChange,\n      onOpenChange: handleOpenChange,\n      open: listboxOpenProp,\n      value: valueProp\n    }),\n    buttonActive = _useSelect.buttonActive,\n    buttonFocusVisible = _useSelect.buttonFocusVisible,\n    contextValue = _useSelect.contextValue,\n    disabled = _useSelect.disabled,\n    getButtonProps = _useSelect.getButtonProps,\n    getListboxProps = _useSelect.getListboxProps,\n    getHiddenInputProps = _useSelect.getHiddenInputProps,\n    getOptionMetadata = _useSelect.getOptionMetadata,\n    listboxOpen = _useSelect.open,\n    value = _useSelect.value;\n  var ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen: defaultListboxOpen,\n    disabled: disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue: renderValue,\n    value: value,\n    size: size,\n    variant: variant,\n    color: color\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    slots: slots,\n    slotProps: slotProps\n  });\n  var selectedOption = React.useMemo(function () {\n    var _getOptionMetadata;\n    return (_getOptionMetadata = getOptionMetadata(value)) != null ? _getOptionMetadata : null;\n  }, [getOptionMetadata, value]);\n  var _useSlot = useSlot('root', {\n      ref: handleRef,\n      className: classes.root,\n      elementType: SelectRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  var _useSlot3 = useSlot('button', {\n      additionalProps: {\n        'aria-describedby': ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl['aria-describedby'],\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledby != null ? ariaLabelledby : formControl == null ? void 0 : formControl.labelId,\n        'aria-required': required ? 'true' : undefined,\n        id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,\n        name: name\n      },\n      className: classes.button,\n      elementType: SelectButton,\n      externalForwardedProps: externalForwardedProps,\n      getSlotProps: getButtonProps,\n      ownerState: ownerState\n    }),\n    _useSlot4 = _slicedToArray(_useSlot3, 2),\n    SlotButton = _useSlot4[0],\n    buttonProps = _useSlot4[1];\n  var _useSlot5 = useSlot('listbox', {\n      additionalProps: {\n        ref: listboxRef,\n        anchorEl: anchorEl,\n        open: listboxOpen,\n        placement: 'bottom',\n        keepMounted: true\n      },\n      className: classes.listbox,\n      elementType: SelectListbox,\n      externalForwardedProps: externalForwardedProps,\n      getSlotProps: getListboxProps,\n      ownerState: _extends({}, ownerState, {\n        nesting: false,\n        row: false,\n        wrap: false\n      }),\n      getSlotOwnerState: function getSlotOwnerState(mergedProps) {\n        return {\n          size: mergedProps.size || size,\n          variant: mergedProps.variant || variant,\n          color: mergedProps.color || (!mergedProps.disablePortal ? colorProp : color),\n          disableColorInversion: !mergedProps.disablePortal\n        };\n      }\n    }),\n    _useSlot6 = _slicedToArray(_useSlot5, 2),\n    SlotListbox = _useSlot6[0],\n    listboxProps = _useSlot6[1];\n  var _useSlot7 = useSlot('startDecorator', {\n      className: classes.startDecorator,\n      elementType: SelectStartDecorator,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot8 = _slicedToArray(_useSlot7, 2),\n    SlotStartDecorator = _useSlot8[0],\n    startDecoratorProps = _useSlot8[1];\n  var _useSlot9 = useSlot('endDecorator', {\n      className: classes.endDecorator,\n      elementType: SelectEndDecorator,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot10 = _slicedToArray(_useSlot9, 2),\n    SlotEndDecorator = _useSlot10[0],\n    endDecoratorProps = _useSlot10[1];\n  var _useSlot11 = useSlot('indicator', {\n      className: classes.indicator,\n      elementType: SelectIndicator,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot12 = _slicedToArray(_useSlot11, 2),\n    SlotIndicator = _useSlot12[0],\n    indicatorProps = _useSlot12[1];\n\n  // Wait for `listboxProps` because `slotProps.listbox` could be a function.\n  var modifiers = React.useMemo(function () {\n    return [].concat(defaultModifiers, _toConsumableArray(listboxProps.modifiers || []));\n  }, [listboxProps.modifiers]);\n  var result = null;\n  if (anchorEl) {\n    var _listboxProps$ownerSt, _props$slots;\n    result = /*#__PURE__*/_jsx(SlotListbox, _extends({}, listboxProps, {\n      className: clsx(listboxProps.className, ((_listboxProps$ownerSt = listboxProps.ownerState) == null ? void 0 : _listboxProps$ownerSt.color) === 'context' && selectClasses.colorContext)\n      // @ts-ignore internal logic (too complex to typed PopperOwnProps to SlotListbox but this should be removed when we have `usePopper`)\n      ,\n\n      modifiers: modifiers\n    }, !((_props$slots = props.slots) != null && _props$slots.listbox) && {\n      as: Popper,\n      slots: {\n        root: listboxProps.as || 'ul'\n      }\n    }, {\n      children: /*#__PURE__*/_jsx(SelectProvider, {\n        value: contextValue,\n        children: /*#__PURE__*/_jsx(VariantColorProvider, {\n          variant: variant,\n          color: colorProp,\n          children: /*#__PURE__*/_jsx(GroupListContext.Provider, {\n            value: \"select\",\n            children: /*#__PURE__*/_jsx(ListProvider, {\n              nested: true,\n              children: children\n            })\n          })\n        })\n      })\n    }));\n    if (!listboxProps.disablePortal) {\n      result = /*#__PURE__*/\n      // For portal popup, the children should not inherit color inversion from the upper parent.\n      _jsx(ColorInversion.Provider, {\n        value: undefined,\n        children: result\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {\n      children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {\n        children: startDecorator\n      })), /*#__PURE__*/_jsx(SlotButton, _extends({}, buttonProps, {\n        children: selectedOption ? renderValue(selectedOption) : placeholder\n      })), endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {\n        children: endDecorator\n      })), indicator && /*#__PURE__*/_jsx(SlotIndicator, _extends({}, indicatorProps, {\n        children: indicator\n      })), /*#__PURE__*/_jsx(\"input\", _extends({}, getHiddenInputProps()))]\n    })), result]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n  /**\n   * The default selected value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Trailing adornment for the select.\n   */\n  endDecorator: PropTypes.node,\n  /**\n   * A function to convert the currently selected value to a string.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected value can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n  /**\n   * The indicator(*) for the select.\n   *    ________________\n   *   [ value        * ]\n   *    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   */\n  indicator: PropTypes.node,\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Triggered when focus leaves the menu and the menu should close.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n  /**\n   * Text to show when there is no selected value.\n   */\n  placeholder: PropTypes.node,\n  /**\n   * Function that customizes the rendering of the selected value.\n   */\n  renderValue: PropTypes.func,\n  /**\n   * If `true`, the Select cannot be empty when submitting form.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    button: PropTypes.elementType,\n    endDecorator: PropTypes.elementType,\n    indicator: PropTypes.elementType,\n    listbox: PropTypes.elementType,\n    root: PropTypes.elementType,\n    startDecorator: PropTypes.elementType\n  }),\n  /**\n   * Leading adornment for the select.\n   */\n  startDecorator: PropTypes.node,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The selected value.\n   * Set to `null` to deselect all options.\n   */\n  value: PropTypes.any,\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\nexport default Select;","map":null,"metadata":{},"sourceType":"module"}