{"ast":null,"code":"import prefixProperty from './utils/prefixProperty';\nimport prefixValue from './utils/prefixValue';\nimport addNewValuesOnly from './utils/addNewValuesOnly';\nimport isObject from './utils/isObject';\nexport default function createPrefixer(_ref) {\n  var prefixMap = _ref.prefixMap,\n    plugins = _ref.plugins;\n  return function prefix(style) {\n    for (var property in style) {\n      var value = style[property];\n\n      // handle nested objects\n      if (isObject(value)) {\n        style[property] = prefix(value);\n        // handle array values\n      } else if (Array.isArray(value)) {\n        var combinedValue = [];\n        for (var i = 0, len = value.length; i < len; ++i) {\n          var processedValue = prefixValue(plugins, property, value[i], style, prefixMap);\n          addNewValuesOnly(combinedValue, processedValue || value[i]);\n        }\n\n        // only modify the value if it was touched\n        // by any plugin to prevent unnecessary mutations\n        if (combinedValue.length > 0) {\n          style[property] = combinedValue;\n        }\n      } else {\n        var _processedValue = prefixValue(plugins, property, value, style, prefixMap);\n\n        // only modify the value if it was touched\n        // by any plugin to prevent unnecessary mutations\n        if (_processedValue) {\n          style[property] = _processedValue;\n        }\n        style = prefixProperty(prefixMap, property, style);\n      }\n    }\n    return style;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}