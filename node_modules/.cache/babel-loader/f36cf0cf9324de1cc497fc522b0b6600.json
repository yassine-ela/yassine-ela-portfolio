{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n/**\r\n * internal utility\r\n *\r\n * Why? to read `sx` values and attach component's CSS variables\r\n *      e.g. <Card sx={{ borderRadius: 0 }} /> should attach\r\n *          `--Card-radius: 0px` so that developers don't have to remember\r\n *\r\n * Why not reuse `styleFunctionSx`?\r\n *     `styleFunctionSx` is more expensive as it iterates over all the keys\r\n */ // eslint-disable-next-line import/prefer-default-export\nexport const resolveSxValue = (_ref, keys) => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  let sxObject = {};\n  function resolveSx(sxProp) {\n    if (typeof sxProp === 'function') {\n      const result = sxProp(theme);\n      resolveSx(result);\n    } else if (Array.isArray(sxProp)) {\n      sxProp.forEach(sxItem => {\n        if (typeof sxItem !== 'boolean') {\n          resolveSx(sxItem);\n        }\n      });\n    } else if (typeof sxProp === 'object') {\n      sxObject = _extends({}, sxObject, sxProp);\n    }\n  }\n  if (ownerState.sx) {\n    resolveSx(ownerState.sx);\n    keys.forEach(key => {\n      const value = sxObject[key];\n      if (typeof value === 'string' || typeof value === 'number') {\n        if (key === 'borderRadius') {\n          if (typeof value === 'number') {\n            sxObject[key] = \"\".concat(value, \"px\");\n          } else {\n            var _theme$vars;\n            sxObject[key] = ((_theme$vars = theme.vars) == null ? void 0 : _theme$vars.radius[value]) || value;\n          }\n        } else if (['p', 'padding', 'm', 'margin'].indexOf(key) !== -1 && typeof value === 'number') {\n          sxObject[key] = theme.spacing(value);\n        } else {\n          sxObject[key] = value;\n        }\n      } else if (typeof value === 'function') {\n        sxObject[key] = value(theme);\n      } else {\n        sxObject[key] = undefined;\n      }\n    });\n  }\n  return sxObject;\n};","map":null,"metadata":{},"sourceType":"module"}