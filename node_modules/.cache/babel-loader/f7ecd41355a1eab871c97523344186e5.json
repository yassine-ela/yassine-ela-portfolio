{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"children\", \"component\", \"inset\", \"orientation\", \"role\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { styled, useThemeProps } from '../styles';\nimport { getDividerUtilityClass } from './dividerClasses';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    orientation,\n    inset\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation, inset && \"inset\".concat(capitalize(inset))]\n  };\n  return composeClasses(slots, getDividerUtilityClass, {});\n};\nexport const DividerRoot = styled('hr', {\n  name: 'JoyDivider',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(_ref => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  return _extends({\n    '--Divider-thickness': '1px',\n    '--Divider-lineColor': theme.vars.palette.divider\n  }, ownerState.inset === 'none' && {\n    '--_Divider-inset': '0px'\n  }, ownerState.inset === 'context' && {\n    '--_Divider-inset': 'var(--Divider-inset, 0px)'\n  }, {\n    margin: 'initial',\n    // reset margin for `hr` tag\n    marginInline: ownerState.orientation === 'vertical' ? 'initial' : 'var(--_Divider-inset)',\n    marginBlock: ownerState.orientation === 'vertical' ? 'var(--_Divider-inset)' : 'initial',\n    position: 'relative',\n    alignSelf: 'stretch',\n    flexShrink: 0\n  }, ownerState.children ? _extends({\n    '--Divider-gap': theme.spacing(1),\n    '--Divider-childPosition': '50%',\n    display: 'flex',\n    flexDirection: ownerState.orientation === 'vertical' ? 'column' : 'row',\n    alignItems: 'center',\n    whiteSpace: 'nowrap',\n    textAlign: 'center',\n    border: 0\n  }, theme.typography['body-sm'], {\n    '&::before, &::after': {\n      position: 'relative',\n      inlineSize: ownerState.orientation === 'vertical' ? 'var(--Divider-thickness)' : 'initial',\n      blockSize: ownerState.orientation === 'vertical' ? 'initial' : 'var(--Divider-thickness)',\n      backgroundColor: 'var(--Divider-lineColor)',\n      // use logical size + background is better than border because they work with gradient.\n      content: '\"\"'\n    },\n    '&::before': {\n      marginInlineEnd: ownerState.orientation === 'vertical' ? 'initial' : 'min(var(--Divider-childPosition) * 999, var(--Divider-gap))',\n      marginBlockEnd: ownerState.orientation === 'vertical' ? 'min(var(--Divider-childPosition) * 999, var(--Divider-gap))' : 'initial',\n      flexBasis: 'var(--Divider-childPosition)'\n    },\n    '&::after': {\n      marginInlineStart: ownerState.orientation === 'vertical' ? 'initial' : 'min((100% - var(--Divider-childPosition)) * 999, var(--Divider-gap))',\n      marginBlockStart: ownerState.orientation === 'vertical' ? 'min((100% - var(--Divider-childPosition)) * 999, var(--Divider-gap))' : 'initial',\n      flexBasis: 'calc(100% - var(--Divider-childPosition))'\n    }\n  }) : {\n    border: 'none',\n    // reset the border for `hr` tag\n    listStyle: 'none',\n    backgroundColor: 'var(--Divider-lineColor)',\n    // use logical size + background is better than border because they work with gradient.\n    inlineSize: ownerState.orientation === 'vertical' ? 'var(--Divider-thickness)' : 'initial',\n    blockSize: ownerState.orientation === 'vertical' ? 'initial' : 'var(--Divider-thickness)'\n  });\n});\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Divider](https://mui.com/joy-ui/react-divider/)\r\n *\r\n * API:\r\n *\r\n * - [Divider API](https://mui.com/joy-ui/api/divider/)\r\n */\nconst Divider = /*#__PURE__*/React.forwardRef(function Divider(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyDivider'\n  });\n  const {\n      className,\n      children,\n      component = children !== undefined && children !== null ? 'div' : 'hr',\n      inset,\n      orientation = 'horizontal',\n      role = component !== 'hr' ? 'separator' : undefined,\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    inset,\n    role,\n    orientation,\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = _extends({}, other, {\n    component,\n    slots,\n    slotProps\n  });\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref,\n    className: clsx(classes.root, className),\n    elementType: DividerRoot,\n    externalForwardedProps,\n    ownerState,\n    additionalProps: _extends({\n      as: component,\n      role\n    }, role === 'separator' && orientation === 'vertical' && {\n      // The implicit aria-orientation of separator is 'horizontal'\n      // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role\n      'aria-orientation': 'vertical'\n    })\n  });\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Divider.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * Class name applied to the divider to shrink or stretch the line based on the orientation.\r\n   */\n  inset: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['none', 'context']), PropTypes.string]),\n  /**\r\n   * The component orientation.\r\n   * @default 'horizontal'\r\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\r\n   * @ignore\r\n   */\n  role: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\n\n// @ts-ignore internal logic\nDivider.muiName = 'Divider';\nexport default Divider;","map":null,"metadata":{},"sourceType":"module"}