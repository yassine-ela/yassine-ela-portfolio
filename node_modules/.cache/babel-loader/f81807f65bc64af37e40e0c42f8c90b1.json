{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\yassinePortfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"component\", \"children\", \"color\", \"variant\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport { useThemeProps } from '../styles';\nimport styled from '../styles/styled';\nimport { useColorInversion } from '../styles/ColorInversion';\nimport { getCardOverflowUtilityClass } from './cardOverflowClasses';\nimport useSlot from '../utils/useSlot';\nimport buttonClasses from '../Button/buttonClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var variant = ownerState.variant,\n    color = ownerState.color;\n  var slots = {\n    root: ['root', variant && \"variant\".concat(capitalize(variant)), color && \"color\".concat(capitalize(color))]\n  };\n  return composeClasses(slots, getCardOverflowUtilityClass, {});\n};\nvar CardOverflowRoot = styled('div', {\n  name: 'JoyCardOverflow',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref) {\n  var theme = _ref.theme,\n    ownerState = _ref.ownerState;\n  var _theme$variants;\n  var childRadius = 'calc(var(--CardOverflow-radius) - var(--variant-borderWidth, 0px))';\n  return _extends({\n    alignSelf: 'stretch',\n    // prevent shrinking if parent's align-items is not initial\n    borderRadius: 'var(--CardOverflow-radius)',\n    position: 'relative',\n    display: 'flex'\n  }, ownerState['data-parent'] === 'Card-horizontal' && _extends({\n    '--AspectRatio-margin': 'calc(-1 * var(--Card-padding)) 0px',\n    marginTop: 'var(--CardOverflow-offset)',\n    marginBottom: 'var(--CardOverflow-offset)',\n    padding: 'var(--Card-padding) 0px'\n  }, ownerState['data-first-child'] !== undefined && {\n    '--AspectRatio-radius': \"\".concat(childRadius, \" 0 0 \").concat(childRadius),\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n    marginLeft: 'var(--CardOverflow-offset)'\n  }, ownerState['data-last-child'] !== undefined && {\n    '--AspectRatio-radius': \"0 \".concat(childRadius, \" \").concat(childRadius, \" 0\"),\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    marginRight: 'var(--CardOverflow-offset)'\n  }, ownerState['data-first-child'] !== undefined && ownerState['data-last-child'] !== undefined && {\n    '--AspectRatio-radius': childRadius\n  }, _defineProperty({}, \"& > .\".concat(buttonClasses.root, \":only-child\"), {\n    height: 'calc(100% + -2 * var(--CardOverflow-offset))',\n    '--Button-margin': 'var(--CardOverflow-offset) 0',\n    '--Button-radius': '0 var(--CardOverflow-radius) var(--CardOverflow-radius) 0'\n  })), ownerState['data-parent'] === 'Card-vertical' && _extends({\n    '--AspectRatio-margin': '0px calc(-1 * var(--Card-padding))',\n    flexDirection: 'column',\n    // required to make AspectRatio works\n    marginLeft: 'var(--CardOverflow-offset)',\n    marginRight: 'var(--CardOverflow-offset)',\n    padding: '0px var(--Card-padding)'\n  }, ownerState['data-first-child'] !== undefined && {\n    '--AspectRatio-radius': \"\".concat(childRadius, \" \").concat(childRadius, \" 0 0\"),\n    borderBottomLeftRadius: 0,\n    borderBottomRightRadius: 0,\n    marginTop: 'var(--CardOverflow-offset)'\n  }, ownerState['data-last-child'] !== undefined && {\n    '--AspectRatio-radius': \"0 0 \".concat(childRadius, \" \").concat(childRadius),\n    borderTopLeftRadius: 0,\n    borderTopRightRadius: 0,\n    marginBottom: 'var(--CardOverflow-offset)'\n  }, ownerState['data-first-child'] !== undefined && ownerState['data-last-child'] !== undefined && {\n    '--AspectRatio-radius': childRadius\n  }, _defineProperty({}, \"& > .\".concat(buttonClasses.root, \":only-child\"), {\n    zIndex: 1,\n    // prevent button from being covered Link overlay. This can be improved in the future with :has() selector\n    width: 'calc(100% + -2 * var(--CardOverflow-offset))',\n    '--Button-margin': '0 var(--CardOverflow-offset)',\n    '--Button-radius': '0 0 var(--CardOverflow-radius) var(--CardOverflow-radius)'\n  })), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);\n});\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/joy-ui/react-card/)\n *\n * API:\n *\n * - [CardOverflow API](https://mui.com/joy-ui/api/card-overflow/)\n */\nvar CardOverflow = /*#__PURE__*/React.forwardRef(function CardOverflow(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'JoyCardOverflow'\n  });\n  var className = props.className,\n    _props$component = props.component,\n    component = _props$component === void 0 ? 'div' : _props$component,\n    children = props.children,\n    _props$color = props.color,\n    colorProp = _props$color === void 0 ? 'neutral' : _props$color,\n    _props$variant = props.variant,\n    variant = _props$variant === void 0 ? 'plain' : _props$variant,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useColorInversion = useColorInversion(variant),\n    getColor = _useColorInversion.getColor;\n  var color = getColor(inProps.color, colorProp);\n  var ownerState = _extends({}, props, {\n    component: component,\n    color: color,\n    variant: variant\n  });\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = _extends({}, other, {\n    component: component,\n    slots: slots,\n    slotProps: slotProps\n  });\n  var _useSlot = useSlot('root', {\n      ref: ref,\n      className: clsx(classes.root, className),\n      elementType: CardOverflowRoot,\n      externalForwardedProps: externalForwardedProps,\n      ownerState: ownerState\n    }),\n    _useSlot2 = _slicedToArray(_useSlot, 2),\n    SlotRoot = _useSlot2[0],\n    rootProps = _useSlot2[1];\n  return /*#__PURE__*/_jsx(SlotRoot, _extends({}, rootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardOverflow.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Used to render icon or text elements inside the CardOverflow if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'plain'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])\n} : void 0;\n\n// @ts-ignore\nCardOverflow.muiName = 'CardOverflow';\nexport default CardOverflow;","map":null,"metadata":{},"sourceType":"module"}