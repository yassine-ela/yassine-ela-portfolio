{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\n/**\r\n * @ignore - internal component.\r\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction Ripple(props) {\n  const {\n    className,\n    classes,\n    pulsate = false,\n    rippleX,\n    rippleY,\n    rippleSize,\n    in: inProp,\n    onExited,\n    timeout\n  } = props;\n  const [leaving, setLeaving] = React.useState(false);\n  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\n  const rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX\n  };\n  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\n  if (!inProp && !leaving) {\n    setLeaving(true);\n  }\n  React.useEffect(() => {\n    if (!inProp && onExited != null) {\n      // react-transition-group#onExited\n      const timeoutId = setTimeout(onExited, timeout);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n    return undefined;\n  }, [onExited, inProp, timeout]);\n  return /*#__PURE__*/_jsx(\"span\", {\n    className: rippleClassName,\n    style: rippleStyles,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: childClassName\n    })\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? Ripple.propTypes = {\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  /**\r\n   * @ignore - injected from TransitionGroup\r\n   */\n  in: PropTypes.bool,\n  /**\r\n   * @ignore - injected from TransitionGroup\r\n   */\n  onExited: PropTypes.func,\n  /**\r\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\r\n   */\n  pulsate: PropTypes.bool,\n  /**\r\n   * Diameter of the ripple.\r\n   */\n  rippleSize: PropTypes.number,\n  /**\r\n   * Horizontal position of the ripple center.\r\n   */\n  rippleX: PropTypes.number,\n  /**\r\n   * Vertical position of the ripple center.\r\n   */\n  rippleY: PropTypes.number,\n  /**\r\n   * exit delay\r\n   */\n  timeout: PropTypes.number.isRequired\n} : void 0;\nexport default Ripple;","map":null,"metadata":{},"sourceType":"module"}